
Aula 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004264  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404264  00404264  0000c264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000086c  20000000  0040426c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000e4  2000086c  00404ad8  0001086c  2**2
                  ALLOC
  4 .stack        00003000  20000950  00404bbc  0001086c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0001086c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010896  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ab1f  00000000  00000000  000108f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c9e  00000000  00000000  0001b410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004288  00000000  00000000  0001d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000968  00000000  00000000  00021336  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b8  00000000  00000000  00021c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012ecb  00000000  00000000  00022556  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a051  00000000  00000000  00035421  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000527c6  00000000  00000000  0003f472  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000020e4  00000000  00000000  00091c38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003950 	.word	0x20003950
  400004:	004009b5 	.word	0x004009b5
  400008:	004009b1 	.word	0x004009b1
  40000c:	004009b1 	.word	0x004009b1
  400010:	004009b1 	.word	0x004009b1
  400014:	004009b1 	.word	0x004009b1
  400018:	004009b1 	.word	0x004009b1
	...
  40002c:	004009b1 	.word	0x004009b1
  400030:	004009b1 	.word	0x004009b1
  400034:	00000000 	.word	0x00000000
  400038:	004009b1 	.word	0x004009b1
  40003c:	00400de9 	.word	0x00400de9
  400040:	004009b1 	.word	0x004009b1
  400044:	004009b1 	.word	0x004009b1
  400048:	004009b1 	.word	0x004009b1
  40004c:	004009b1 	.word	0x004009b1
  400050:	004009b1 	.word	0x004009b1
  400054:	004009b1 	.word	0x004009b1
  400058:	004009b1 	.word	0x004009b1
  40005c:	004009b1 	.word	0x004009b1
  400060:	004009b1 	.word	0x004009b1
  400064:	004009b1 	.word	0x004009b1
  400068:	00000000 	.word	0x00000000
  40006c:	00400675 	.word	0x00400675
  400070:	00400689 	.word	0x00400689
  400074:	0040069d 	.word	0x0040069d
  400078:	004009b1 	.word	0x004009b1
  40007c:	004009b1 	.word	0x004009b1
	...
  400088:	004009b1 	.word	0x004009b1
  40008c:	004009b1 	.word	0x004009b1
  400090:	004009b1 	.word	0x004009b1
  400094:	004009b1 	.word	0x004009b1
  400098:	004009b1 	.word	0x004009b1
  40009c:	00400df9 	.word	0x00400df9
  4000a0:	004009b1 	.word	0x004009b1
  4000a4:	004009b1 	.word	0x004009b1
  4000a8:	004009b1 	.word	0x004009b1
  4000ac:	004009b1 	.word	0x004009b1
  4000b0:	004009b1 	.word	0x004009b1
  4000b4:	004009b1 	.word	0x004009b1
  4000b8:	004009b1 	.word	0x004009b1
  4000bc:	004009b1 	.word	0x004009b1
  4000c0:	004009b1 	.word	0x004009b1
  4000c4:	004009b1 	.word	0x004009b1
  4000c8:	004009b1 	.word	0x004009b1

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000086c 	.word	0x2000086c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040426c 	.word	0x0040426c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	0040426c 	.word	0x0040426c
  40011c:	20000870 	.word	0x20000870
  400120:	0040426c 	.word	0x0040426c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400b79 	.word	0x00400b79
  40016c:	00400799 	.word	0x00400799
  400170:	004007ed 	.word	0x004007ed
  400174:	004007fd 	.word	0x004007fd
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	0040080d 	.word	0x0040080d
  400184:	00400731 	.word	0x00400731
  400188:	00400a65 	.word	0x00400a65

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000944 	.word	0x20000944
  4001c4:	2000093c 	.word	0x2000093c

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000940 	.word	0x20000940
  400214:	20000944 	.word	0x20000944

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b10      	ldr	r3, [pc, #64]	; (400260 <board_init+0x48>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c0f      	ldr	r4, [pc, #60]	; (400264 <board_init+0x4c>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c0c      	ldr	r4, [pc, #48]	; (400268 <board_init+0x50>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	4909      	ldr	r1, [pc, #36]	; (40026c <board_init+0x54>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	4909      	ldr	r1, [pc, #36]	; (400270 <board_init+0x58>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	4809      	ldr	r0, [pc, #36]	; (400274 <board_init+0x5c>)
  400250:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400258:	4b07      	ldr	r3, [pc, #28]	; (400278 <board_init+0x60>)
  40025a:	4798      	blx	r3
  40025c:	bd10      	pop	{r4, pc}
  40025e:	bf00      	nop
  400260:	400e1450 	.word	0x400e1450
  400264:	0040081d 	.word	0x0040081d
  400268:	004003cd 	.word	0x004003cd
  40026c:	28000079 	.word	0x28000079
  400270:	28000059 	.word	0x28000059
  400274:	400e0e00 	.word	0x400e0e00
  400278:	004004f1 	.word	0x004004f1

0040027c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40027c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400280:	0052      	lsls	r2, r2, #1
  400282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400286:	fbb3 f2f2 	udiv	r2, r3, r2
  40028a:	3a01      	subs	r2, #1
  40028c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400290:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400294:	4770      	bx	lr
  400296:	bf00      	nop

00400298 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400298:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40029a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40029e:	d02f      	beq.n	400300 <pio_set_peripheral+0x68>
  4002a0:	d807      	bhi.n	4002b2 <pio_set_peripheral+0x1a>
  4002a2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002a6:	d014      	beq.n	4002d2 <pio_set_peripheral+0x3a>
  4002a8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4002ac:	d01e      	beq.n	4002ec <pio_set_peripheral+0x54>
  4002ae:	b939      	cbnz	r1, 4002c0 <pio_set_peripheral+0x28>
  4002b0:	4770      	bx	lr
  4002b2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002b6:	d037      	beq.n	400328 <pio_set_peripheral+0x90>
  4002b8:	d804      	bhi.n	4002c4 <pio_set_peripheral+0x2c>
  4002ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4002be:	d029      	beq.n	400314 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002c0:	6042      	str	r2, [r0, #4]
  4002c2:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4002c4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002c8:	d02e      	beq.n	400328 <pio_set_peripheral+0x90>
  4002ca:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002ce:	d02b      	beq.n	400328 <pio_set_peripheral+0x90>
  4002d0:	e7f6      	b.n	4002c0 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4002d2:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002d4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002d6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4002d8:	43d3      	mvns	r3, r2
  4002da:	4021      	ands	r1, r4
  4002dc:	4019      	ands	r1, r3
  4002de:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002e0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002e2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4002e4:	4021      	ands	r1, r4
  4002e6:	400b      	ands	r3, r1
  4002e8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002ea:	e01a      	b.n	400322 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002ee:	4313      	orrs	r3, r2
  4002f0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002f6:	400b      	ands	r3, r1
  4002f8:	ea23 0302 	bic.w	r3, r3, r2
  4002fc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002fe:	e7df      	b.n	4002c0 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400300:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400302:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400304:	400b      	ands	r3, r1
  400306:	ea23 0302 	bic.w	r3, r3, r2
  40030a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40030c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40030e:	4313      	orrs	r3, r2
  400310:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400312:	e7d5      	b.n	4002c0 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400314:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400316:	4313      	orrs	r3, r2
  400318:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40031a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40031c:	4313      	orrs	r3, r2
  40031e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400320:	e7ce      	b.n	4002c0 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400322:	6042      	str	r2, [r0, #4]
}
  400324:	f85d 4b04 	ldr.w	r4, [sp], #4
  400328:	4770      	bx	lr
  40032a:	bf00      	nop

0040032c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40032c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40032e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400332:	bf14      	ite	ne
  400334:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400336:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400338:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40033c:	bf14      	ite	ne
  40033e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400340:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400342:	f012 0f02 	tst.w	r2, #2
  400346:	d002      	beq.n	40034e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400348:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40034c:	e004      	b.n	400358 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40034e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400352:	bf18      	it	ne
  400354:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400358:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40035a:	6001      	str	r1, [r0, #0]
  40035c:	4770      	bx	lr
  40035e:	bf00      	nop

00400360 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400360:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400362:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400364:	9c01      	ldr	r4, [sp, #4]
  400366:	b10c      	cbz	r4, 40036c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400368:	6641      	str	r1, [r0, #100]	; 0x64
  40036a:	e000      	b.n	40036e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40036c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40036e:	b10b      	cbz	r3, 400374 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400370:	6501      	str	r1, [r0, #80]	; 0x50
  400372:	e000      	b.n	400376 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400374:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400376:	b10a      	cbz	r2, 40037c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400378:	6301      	str	r1, [r0, #48]	; 0x30
  40037a:	e000      	b.n	40037e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40037c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40037e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400380:	6001      	str	r1, [r0, #0]
}
  400382:	f85d 4b04 	ldr.w	r4, [sp], #4
  400386:	4770      	bx	lr

00400388 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400388:	f012 0f10 	tst.w	r2, #16
  40038c:	d010      	beq.n	4003b0 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40038e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400392:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400396:	bf14      	ite	ne
  400398:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40039c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4003a0:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4003a4:	bf14      	ite	ne
  4003a6:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4003aa:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4003ae:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4003b0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4003b4:	4770      	bx	lr
  4003b6:	bf00      	nop

004003b8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  4003b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4003ba:	6401      	str	r1, [r0, #64]	; 0x40
  4003bc:	4770      	bx	lr
  4003be:	bf00      	nop

004003c0 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4003c0:	6441      	str	r1, [r0, #68]	; 0x44
  4003c2:	4770      	bx	lr

004003c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003c6:	4770      	bx	lr

004003c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003ca:	4770      	bx	lr

004003cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4003cc:	b570      	push	{r4, r5, r6, lr}
  4003ce:	b082      	sub	sp, #8
  4003d0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4003d2:	0943      	lsrs	r3, r0, #5
  4003d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4003dc:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4003de:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4003e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4003e6:	d047      	beq.n	400478 <pio_configure_pin+0xac>
  4003e8:	d809      	bhi.n	4003fe <pio_configure_pin+0x32>
  4003ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4003ee:	d021      	beq.n	400434 <pio_configure_pin+0x68>
  4003f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4003f4:	d02f      	beq.n	400456 <pio_configure_pin+0x8a>
  4003f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4003fa:	d16f      	bne.n	4004dc <pio_configure_pin+0x110>
  4003fc:	e009      	b.n	400412 <pio_configure_pin+0x46>
  4003fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400402:	d055      	beq.n	4004b0 <pio_configure_pin+0xe4>
  400404:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400408:	d052      	beq.n	4004b0 <pio_configure_pin+0xe4>
  40040a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40040e:	d044      	beq.n	40049a <pio_configure_pin+0xce>
  400410:	e064      	b.n	4004dc <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400412:	f000 001f 	and.w	r0, r0, #31
  400416:	2601      	movs	r6, #1
  400418:	4086      	lsls	r6, r0
  40041a:	4620      	mov	r0, r4
  40041c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400420:	4632      	mov	r2, r6
  400422:	4b30      	ldr	r3, [pc, #192]	; (4004e4 <pio_configure_pin+0x118>)
  400424:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400426:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40042a:	bf14      	ite	ne
  40042c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40042e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400430:	2001      	movs	r0, #1
  400432:	e054      	b.n	4004de <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400434:	f000 001f 	and.w	r0, r0, #31
  400438:	2601      	movs	r6, #1
  40043a:	4086      	lsls	r6, r0
  40043c:	4620      	mov	r0, r4
  40043e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400442:	4632      	mov	r2, r6
  400444:	4b27      	ldr	r3, [pc, #156]	; (4004e4 <pio_configure_pin+0x118>)
  400446:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400448:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40044c:	bf14      	ite	ne
  40044e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400450:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400452:	2001      	movs	r0, #1
  400454:	e043      	b.n	4004de <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400456:	f000 001f 	and.w	r0, r0, #31
  40045a:	2601      	movs	r6, #1
  40045c:	4086      	lsls	r6, r0
  40045e:	4620      	mov	r0, r4
  400460:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400464:	4632      	mov	r2, r6
  400466:	4b1f      	ldr	r3, [pc, #124]	; (4004e4 <pio_configure_pin+0x118>)
  400468:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40046a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40046e:	bf14      	ite	ne
  400470:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400472:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400474:	2001      	movs	r0, #1
  400476:	e032      	b.n	4004de <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400478:	f000 001f 	and.w	r0, r0, #31
  40047c:	2601      	movs	r6, #1
  40047e:	4086      	lsls	r6, r0
  400480:	4620      	mov	r0, r4
  400482:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400486:	4632      	mov	r2, r6
  400488:	4b16      	ldr	r3, [pc, #88]	; (4004e4 <pio_configure_pin+0x118>)
  40048a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40048c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400490:	bf14      	ite	ne
  400492:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400494:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400496:	2001      	movs	r0, #1
  400498:	e021      	b.n	4004de <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40049a:	f000 031f 	and.w	r3, r0, #31
  40049e:	2601      	movs	r6, #1
  4004a0:	4620      	mov	r0, r4
  4004a2:	fa06 f103 	lsl.w	r1, r6, r3
  4004a6:	462a      	mov	r2, r5
  4004a8:	4b0f      	ldr	r3, [pc, #60]	; (4004e8 <pio_configure_pin+0x11c>)
  4004aa:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4004ac:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4004ae:	e016      	b.n	4004de <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004b0:	f000 031f 	and.w	r3, r0, #31
  4004b4:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4004b6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4004ba:	ea05 0106 	and.w	r1, r5, r6
  4004be:	9100      	str	r1, [sp, #0]
  4004c0:	4620      	mov	r0, r4
  4004c2:	fa06 f103 	lsl.w	r1, r6, r3
  4004c6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4004ca:	bf14      	ite	ne
  4004cc:	2200      	movne	r2, #0
  4004ce:	2201      	moveq	r2, #1
  4004d0:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4004d4:	4c05      	ldr	r4, [pc, #20]	; (4004ec <pio_configure_pin+0x120>)
  4004d6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4004d8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4004da:	e000      	b.n	4004de <pio_configure_pin+0x112>

	default:
		return 0;
  4004dc:	2000      	movs	r0, #0
	}

	return 1;
}
  4004de:	b002      	add	sp, #8
  4004e0:	bd70      	pop	{r4, r5, r6, pc}
  4004e2:	bf00      	nop
  4004e4:	00400299 	.word	0x00400299
  4004e8:	0040032d 	.word	0x0040032d
  4004ec:	00400361 	.word	0x00400361

004004f0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4004f0:	b570      	push	{r4, r5, r6, lr}
  4004f2:	b082      	sub	sp, #8
  4004f4:	4606      	mov	r6, r0
  4004f6:	460d      	mov	r5, r1
  4004f8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4004fa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4004fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400502:	d038      	beq.n	400576 <pio_configure_pin_group+0x86>
  400504:	d809      	bhi.n	40051a <pio_configure_pin_group+0x2a>
  400506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40050a:	d01c      	beq.n	400546 <pio_configure_pin_group+0x56>
  40050c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400510:	d025      	beq.n	40055e <pio_configure_pin_group+0x6e>
  400512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400516:	d150      	bne.n	4005ba <pio_configure_pin_group+0xca>
  400518:	e009      	b.n	40052e <pio_configure_pin_group+0x3e>
  40051a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40051e:	d03a      	beq.n	400596 <pio_configure_pin_group+0xa6>
  400520:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400524:	d037      	beq.n	400596 <pio_configure_pin_group+0xa6>
  400526:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40052a:	d030      	beq.n	40058e <pio_configure_pin_group+0x9e>
  40052c:	e045      	b.n	4005ba <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40052e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400532:	462a      	mov	r2, r5
  400534:	4b22      	ldr	r3, [pc, #136]	; (4005c0 <pio_configure_pin_group+0xd0>)
  400536:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400538:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40053c:	bf14      	ite	ne
  40053e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400540:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400542:	2001      	movs	r0, #1
  400544:	e03a      	b.n	4005bc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400546:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40054a:	462a      	mov	r2, r5
  40054c:	4b1c      	ldr	r3, [pc, #112]	; (4005c0 <pio_configure_pin_group+0xd0>)
  40054e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400550:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400554:	bf14      	ite	ne
  400556:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400558:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40055a:	2001      	movs	r0, #1
  40055c:	e02e      	b.n	4005bc <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40055e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400562:	462a      	mov	r2, r5
  400564:	4b16      	ldr	r3, [pc, #88]	; (4005c0 <pio_configure_pin_group+0xd0>)
  400566:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400568:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40056c:	bf14      	ite	ne
  40056e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400570:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400572:	2001      	movs	r0, #1
  400574:	e022      	b.n	4005bc <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400576:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40057a:	462a      	mov	r2, r5
  40057c:	4b10      	ldr	r3, [pc, #64]	; (4005c0 <pio_configure_pin_group+0xd0>)
  40057e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400580:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400584:	bf14      	ite	ne
  400586:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400588:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40058a:	2001      	movs	r0, #1
  40058c:	e016      	b.n	4005bc <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40058e:	4b0d      	ldr	r3, [pc, #52]	; (4005c4 <pio_configure_pin_group+0xd4>)
  400590:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400592:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400594:	e012      	b.n	4005bc <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400596:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40059a:	f004 0301 	and.w	r3, r4, #1
  40059e:	9300      	str	r3, [sp, #0]
  4005a0:	4630      	mov	r0, r6
  4005a2:	4629      	mov	r1, r5
  4005a4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005a8:	bf14      	ite	ne
  4005aa:	2200      	movne	r2, #0
  4005ac:	2201      	moveq	r2, #1
  4005ae:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005b2:	4c05      	ldr	r4, [pc, #20]	; (4005c8 <pio_configure_pin_group+0xd8>)
  4005b4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4005b6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4005b8:	e000      	b.n	4005bc <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4005ba:	2000      	movs	r0, #0
	}

	return 1;
}
  4005bc:	b002      	add	sp, #8
  4005be:	bd70      	pop	{r4, r5, r6, pc}
  4005c0:	00400299 	.word	0x00400299
  4005c4:	0040032d 	.word	0x0040032d
  4005c8:	00400361 	.word	0x00400361

004005cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4005d0:	4681      	mov	r9, r0
  4005d2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005d4:	4b12      	ldr	r3, [pc, #72]	; (400620 <pio_handler_process+0x54>)
  4005d6:	4798      	blx	r3
  4005d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4005da:	4648      	mov	r0, r9
  4005dc:	4b11      	ldr	r3, [pc, #68]	; (400624 <pio_handler_process+0x58>)
  4005de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4005e0:	4005      	ands	r5, r0
  4005e2:	d013      	beq.n	40060c <pio_handler_process+0x40>
  4005e4:	4c10      	ldr	r4, [pc, #64]	; (400628 <pio_handler_process+0x5c>)
  4005e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4005ea:	6823      	ldr	r3, [r4, #0]
  4005ec:	4543      	cmp	r3, r8
  4005ee:	d108      	bne.n	400602 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005f0:	6861      	ldr	r1, [r4, #4]
  4005f2:	4229      	tst	r1, r5
  4005f4:	d005      	beq.n	400602 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005f6:	68e3      	ldr	r3, [r4, #12]
  4005f8:	4640      	mov	r0, r8
  4005fa:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4005fc:	6863      	ldr	r3, [r4, #4]
  4005fe:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400602:	42b4      	cmp	r4, r6
  400604:	d002      	beq.n	40060c <pio_handler_process+0x40>
  400606:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400608:	2d00      	cmp	r5, #0
  40060a:	d1ee      	bne.n	4005ea <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40060c:	4b07      	ldr	r3, [pc, #28]	; (40062c <pio_handler_process+0x60>)
  40060e:	681b      	ldr	r3, [r3, #0]
  400610:	b123      	cbz	r3, 40061c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400612:	4b07      	ldr	r3, [pc, #28]	; (400630 <pio_handler_process+0x64>)
  400614:	681b      	ldr	r3, [r3, #0]
  400616:	b10b      	cbz	r3, 40061c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400618:	4648      	mov	r0, r9
  40061a:	4798      	blx	r3
  40061c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400620:	004003c5 	.word	0x004003c5
  400624:	004003c9 	.word	0x004003c9
  400628:	20000890 	.word	0x20000890
  40062c:	20000948 	.word	0x20000948
  400630:	2000088c 	.word	0x2000088c

00400634 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400636:	4c0c      	ldr	r4, [pc, #48]	; (400668 <pio_handler_set+0x34>)
  400638:	6824      	ldr	r4, [r4, #0]
  40063a:	2c06      	cmp	r4, #6
  40063c:	d811      	bhi.n	400662 <pio_handler_set+0x2e>
  40063e:	4615      	mov	r5, r2
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
	pSource->id = ul_id;
  400640:	4f0a      	ldr	r7, [pc, #40]	; (40066c <pio_handler_set+0x38>)
  400642:	0122      	lsls	r2, r4, #4
  400644:	18be      	adds	r6, r7, r2
  400646:	50b9      	str	r1, [r7, r2]
	pSource->mask = ul_mask;
  400648:	6075      	str	r5, [r6, #4]
	pSource->attr = ul_attr;
  40064a:	60b3      	str	r3, [r6, #8]
	pSource->handler = p_handler;
  40064c:	9a06      	ldr	r2, [sp, #24]
  40064e:	60f2      	str	r2, [r6, #12]
	gs_ul_nb_sources++;
  400650:	3401      	adds	r4, #1
  400652:	4a05      	ldr	r2, [pc, #20]	; (400668 <pio_handler_set+0x34>)
  400654:	6014      	str	r4, [r2, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400656:	4629      	mov	r1, r5
  400658:	461a      	mov	r2, r3
  40065a:	4b05      	ldr	r3, [pc, #20]	; (400670 <pio_handler_set+0x3c>)
  40065c:	4798      	blx	r3

	return 0;
  40065e:	2000      	movs	r0, #0
  400660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  400662:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  400664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400666:	bf00      	nop
  400668:	20000888 	.word	0x20000888
  40066c:	20000890 	.word	0x20000890
  400670:	00400389 	.word	0x00400389

00400674 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400674:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400676:	4802      	ldr	r0, [pc, #8]	; (400680 <PIOA_Handler+0xc>)
  400678:	210b      	movs	r1, #11
  40067a:	4b02      	ldr	r3, [pc, #8]	; (400684 <PIOA_Handler+0x10>)
  40067c:	4798      	blx	r3
  40067e:	bd08      	pop	{r3, pc}
  400680:	400e0e00 	.word	0x400e0e00
  400684:	004005cd 	.word	0x004005cd

00400688 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400688:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40068a:	4802      	ldr	r0, [pc, #8]	; (400694 <PIOB_Handler+0xc>)
  40068c:	210c      	movs	r1, #12
  40068e:	4b02      	ldr	r3, [pc, #8]	; (400698 <PIOB_Handler+0x10>)
  400690:	4798      	blx	r3
  400692:	bd08      	pop	{r3, pc}
  400694:	400e1000 	.word	0x400e1000
  400698:	004005cd 	.word	0x004005cd

0040069c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40069c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40069e:	4802      	ldr	r0, [pc, #8]	; (4006a8 <PIOC_Handler+0xc>)
  4006a0:	210d      	movs	r1, #13
  4006a2:	4b02      	ldr	r3, [pc, #8]	; (4006ac <PIOC_Handler+0x10>)
  4006a4:	4798      	blx	r3
  4006a6:	bd08      	pop	{r3, pc}
  4006a8:	400e1200 	.word	0x400e1200
  4006ac:	004005cd 	.word	0x004005cd

004006b0 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006b2:	4605      	mov	r5, r0
  4006b4:	460c      	mov	r4, r1
  4006b6:	4617      	mov	r7, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4006b8:	4b18      	ldr	r3, [pc, #96]	; (40071c <pio_handler_set_priority+0x6c>)
  4006ba:	4798      	blx	r3
  4006bc:	4606      	mov	r6, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4006be:	4628      	mov	r0, r5
  4006c0:	f04f 31ff 	mov.w	r1, #4294967295
  4006c4:	4b16      	ldr	r3, [pc, #88]	; (400720 <pio_handler_set_priority+0x70>)
  4006c6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4006c8:	4628      	mov	r0, r5
  4006ca:	4b16      	ldr	r3, [pc, #88]	; (400724 <pio_handler_set_priority+0x74>)
  4006cc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4006ce:	b2e2      	uxtb	r2, r4
  4006d0:	f002 031f 	and.w	r3, r2, #31
  4006d4:	2101      	movs	r1, #1
  4006d6:	4099      	lsls	r1, r3
  4006d8:	0963      	lsrs	r3, r4, #5
  4006da:	009b      	lsls	r3, r3, #2
  4006dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4006e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  4006e4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4006e8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4006ec:	2c00      	cmp	r4, #0
  4006ee:	da06      	bge.n	4006fe <pio_handler_set_priority+0x4e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4006f0:	f002 020f 	and.w	r2, r2, #15
  4006f4:	013f      	lsls	r7, r7, #4
  4006f6:	b2ff      	uxtb	r7, r7
  4006f8:	480b      	ldr	r0, [pc, #44]	; (400728 <pio_handler_set_priority+0x78>)
  4006fa:	5487      	strb	r7, [r0, r2]
  4006fc:	e007      	b.n	40070e <pio_handler_set_priority+0x5e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4006fe:	013f      	lsls	r7, r7, #4
  400700:	b2ff      	uxtb	r7, r7
  400702:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  400706:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  40070a:	f884 7300 	strb.w	r7, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40070e:	6019      	str	r1, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400710:	4628      	mov	r0, r5
  400712:	4631      	mov	r1, r6
  400714:	4b05      	ldr	r3, [pc, #20]	; (40072c <pio_handler_set_priority+0x7c>)
  400716:	4798      	blx	r3
  400718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40071a:	bf00      	nop
  40071c:	004003c9 	.word	0x004003c9
  400720:	004003c1 	.word	0x004003c1
  400724:	004003c5 	.word	0x004003c5
  400728:	e000ed14 	.word	0xe000ed14
  40072c:	004003b9 	.word	0x004003b9

00400730 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400730:	4a18      	ldr	r2, [pc, #96]	; (400794 <pmc_switch_mck_to_pllack+0x64>)
  400732:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400738:	4318      	orrs	r0, r3
  40073a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40073c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40073e:	f013 0f08 	tst.w	r3, #8
  400742:	d003      	beq.n	40074c <pmc_switch_mck_to_pllack+0x1c>
  400744:	e009      	b.n	40075a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400746:	3b01      	subs	r3, #1
  400748:	d103      	bne.n	400752 <pmc_switch_mck_to_pllack+0x22>
  40074a:	e01e      	b.n	40078a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40074c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400750:	4910      	ldr	r1, [pc, #64]	; (400794 <pmc_switch_mck_to_pllack+0x64>)
  400752:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400754:	f012 0f08 	tst.w	r2, #8
  400758:	d0f5      	beq.n	400746 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40075a:	4a0e      	ldr	r2, [pc, #56]	; (400794 <pmc_switch_mck_to_pllack+0x64>)
  40075c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40075e:	f023 0303 	bic.w	r3, r3, #3
  400762:	f043 0302 	orr.w	r3, r3, #2
  400766:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400768:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40076a:	f010 0008 	ands.w	r0, r0, #8
  40076e:	d004      	beq.n	40077a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400770:	2000      	movs	r0, #0
  400772:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400774:	3b01      	subs	r3, #1
  400776:	d103      	bne.n	400780 <pmc_switch_mck_to_pllack+0x50>
  400778:	e009      	b.n	40078e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40077a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40077e:	4905      	ldr	r1, [pc, #20]	; (400794 <pmc_switch_mck_to_pllack+0x64>)
  400780:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400782:	f012 0f08 	tst.w	r2, #8
  400786:	d0f5      	beq.n	400774 <pmc_switch_mck_to_pllack+0x44>
  400788:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40078a:	2001      	movs	r0, #1
  40078c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40078e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400790:	4770      	bx	lr
  400792:	bf00      	nop
  400794:	400e0400 	.word	0x400e0400

00400798 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400798:	b138      	cbz	r0, 4007aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40079a:	4911      	ldr	r1, [pc, #68]	; (4007e0 <pmc_switch_mainck_to_xtal+0x48>)
  40079c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40079e:	4a11      	ldr	r2, [pc, #68]	; (4007e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4007a0:	401a      	ands	r2, r3
  4007a2:	4b11      	ldr	r3, [pc, #68]	; (4007e8 <pmc_switch_mainck_to_xtal+0x50>)
  4007a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007a6:	620b      	str	r3, [r1, #32]
  4007a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007aa:	4a0d      	ldr	r2, [pc, #52]	; (4007e0 <pmc_switch_mainck_to_xtal+0x48>)
  4007ac:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007ae:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4007b2:	f023 0303 	bic.w	r3, r3, #3
  4007b6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007ba:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007be:	0209      	lsls	r1, r1, #8
  4007c0:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007c2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007c4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007c8:	f013 0f01 	tst.w	r3, #1
  4007cc:	d0fb      	beq.n	4007c6 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007ce:	4a04      	ldr	r2, [pc, #16]	; (4007e0 <pmc_switch_mainck_to_xtal+0x48>)
  4007d0:	6a13      	ldr	r3, [r2, #32]
  4007d2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4007d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007da:	6213      	str	r3, [r2, #32]
  4007dc:	4770      	bx	lr
  4007de:	bf00      	nop
  4007e0:	400e0400 	.word	0x400e0400
  4007e4:	fec8fffc 	.word	0xfec8fffc
  4007e8:	01370002 	.word	0x01370002

004007ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4007ec:	4b02      	ldr	r3, [pc, #8]	; (4007f8 <pmc_osc_is_ready_mainck+0xc>)
  4007ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4007f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop
  4007f8:	400e0400 	.word	0x400e0400

004007fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4007fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400800:	4b01      	ldr	r3, [pc, #4]	; (400808 <pmc_disable_pllack+0xc>)
  400802:	629a      	str	r2, [r3, #40]	; 0x28
  400804:	4770      	bx	lr
  400806:	bf00      	nop
  400808:	400e0400 	.word	0x400e0400

0040080c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40080c:	4b02      	ldr	r3, [pc, #8]	; (400818 <pmc_is_locked_pllack+0xc>)
  40080e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400810:	f000 0002 	and.w	r0, r0, #2
  400814:	4770      	bx	lr
  400816:	bf00      	nop
  400818:	400e0400 	.word	0x400e0400

0040081c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40081c:	2822      	cmp	r0, #34	; 0x22
  40081e:	d81e      	bhi.n	40085e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400820:	281f      	cmp	r0, #31
  400822:	d80c      	bhi.n	40083e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400824:	4b11      	ldr	r3, [pc, #68]	; (40086c <pmc_enable_periph_clk+0x50>)
  400826:	699a      	ldr	r2, [r3, #24]
  400828:	2301      	movs	r3, #1
  40082a:	4083      	lsls	r3, r0
  40082c:	401a      	ands	r2, r3
  40082e:	4293      	cmp	r3, r2
  400830:	d017      	beq.n	400862 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400832:	2301      	movs	r3, #1
  400834:	4083      	lsls	r3, r0
  400836:	4a0d      	ldr	r2, [pc, #52]	; (40086c <pmc_enable_periph_clk+0x50>)
  400838:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40083a:	2000      	movs	r0, #0
  40083c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40083e:	4b0b      	ldr	r3, [pc, #44]	; (40086c <pmc_enable_periph_clk+0x50>)
  400840:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400844:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400846:	2301      	movs	r3, #1
  400848:	4083      	lsls	r3, r0
  40084a:	401a      	ands	r2, r3
  40084c:	4293      	cmp	r3, r2
  40084e:	d00a      	beq.n	400866 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400850:	2301      	movs	r3, #1
  400852:	4083      	lsls	r3, r0
  400854:	4a05      	ldr	r2, [pc, #20]	; (40086c <pmc_enable_periph_clk+0x50>)
  400856:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40085a:	2000      	movs	r0, #0
  40085c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40085e:	2001      	movs	r0, #1
  400860:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400862:	2000      	movs	r0, #0
  400864:	4770      	bx	lr
  400866:	2000      	movs	r0, #0
}
  400868:	4770      	bx	lr
  40086a:	bf00      	nop
  40086c:	400e0400 	.word	0x400e0400

00400870 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400870:	b410      	push	{r4}
  400872:	0189      	lsls	r1, r1, #6
  400874:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400876:	2402      	movs	r4, #2
  400878:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40087a:	f04f 31ff 	mov.w	r1, #4294967295
  40087e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400880:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400882:	605a      	str	r2, [r3, #4]
}
  400884:	f85d 4b04 	ldr.w	r4, [sp], #4
  400888:	4770      	bx	lr
  40088a:	bf00      	nop

0040088c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40088c:	0189      	lsls	r1, r1, #6
  40088e:	2305      	movs	r3, #5
  400890:	5043      	str	r3, [r0, r1]
  400892:	4770      	bx	lr

00400894 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400894:	0189      	lsls	r1, r1, #6
  400896:	2302      	movs	r3, #2
  400898:	5043      	str	r3, [r0, r1]
  40089a:	4770      	bx	lr

0040089c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40089c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4008a0:	61ca      	str	r2, [r1, #28]
  4008a2:	4770      	bx	lr

004008a4 <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
  4008a4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4008a8:	624a      	str	r2, [r1, #36]	; 0x24
  4008aa:	4770      	bx	lr

004008ac <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
  4008ac:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4008b0:	6a08      	ldr	r0, [r1, #32]
}
  4008b2:	4770      	bx	lr

004008b4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4008b4:	b4f0      	push	{r4, r5, r6, r7}
  4008b6:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4008b8:	2402      	movs	r4, #2
  4008ba:	9401      	str	r4, [sp, #4]
  4008bc:	2408      	movs	r4, #8
  4008be:	9402      	str	r4, [sp, #8]
  4008c0:	2420      	movs	r4, #32
  4008c2:	9403      	str	r4, [sp, #12]
  4008c4:	2480      	movs	r4, #128	; 0x80
  4008c6:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4008c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4008ca:	0be4      	lsrs	r4, r4, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4008cc:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
  4008ce:	0c4c      	lsrs	r4, r1, #17
		if (ul_freq > ul_high) {
  4008d0:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4008d4:	d81b      	bhi.n	40090e <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  4008d6:	42a0      	cmp	r0, r4
  4008d8:	d21f      	bcs.n	40091a <tc_find_mck_divisor+0x66>
  4008da:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  4008dc:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4008de:	f856 4f04 	ldr.w	r4, [r6, #4]!
  4008e2:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4008e6:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  4008e8:	4284      	cmp	r4, r0
  4008ea:	d312      	bcc.n	400912 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  4008ec:	4287      	cmp	r7, r0
  4008ee:	d915      	bls.n	40091c <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  4008f0:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4008f2:	2d05      	cmp	r5, #5
  4008f4:	d1f3      	bne.n	4008de <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4008f6:	2000      	movs	r0, #0
  4008f8:	e013      	b.n	400922 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  4008fa:	a906      	add	r1, sp, #24
  4008fc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400900:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400904:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400906:	b133      	cbz	r3, 400916 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400908:	601d      	str	r5, [r3, #0]
	}

	return 1;
  40090a:	2001      	movs	r0, #1
  40090c:	e009      	b.n	400922 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  40090e:	2000      	movs	r0, #0
  400910:	e007      	b.n	400922 <tc_find_mck_divisor+0x6e>
  400912:	2000      	movs	r0, #0
  400914:	e005      	b.n	400922 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  400916:	2001      	movs	r0, #1
  400918:	e003      	b.n	400922 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40091a:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  40091c:	2a00      	cmp	r2, #0
  40091e:	d1ec      	bne.n	4008fa <tc_find_mck_divisor+0x46>
  400920:	e7f1      	b.n	400906 <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400922:	b006      	add	sp, #24
  400924:	bcf0      	pop	{r4, r5, r6, r7}
  400926:	4770      	bx	lr

00400928 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400928:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40092a:	23ac      	movs	r3, #172	; 0xac
  40092c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40092e:	680b      	ldr	r3, [r1, #0]
  400930:	684a      	ldr	r2, [r1, #4]
  400932:	fbb3 f3f2 	udiv	r3, r3, r2
  400936:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400938:	1e5c      	subs	r4, r3, #1
  40093a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40093e:	4294      	cmp	r4, r2
  400940:	d80a      	bhi.n	400958 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400942:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400944:	688b      	ldr	r3, [r1, #8]
  400946:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400948:	f240 2302 	movw	r3, #514	; 0x202
  40094c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400950:	2350      	movs	r3, #80	; 0x50
  400952:	6003      	str	r3, [r0, #0]

	return 0;
  400954:	2000      	movs	r0, #0
  400956:	e000      	b.n	40095a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400958:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40095a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40095e:	4770      	bx	lr

00400960 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400960:	6943      	ldr	r3, [r0, #20]
  400962:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400966:	bf1a      	itte	ne
  400968:	61c1      	strne	r1, [r0, #28]
	return 0;
  40096a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40096c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40096e:	4770      	bx	lr

00400970 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400970:	6943      	ldr	r3, [r0, #20]
  400972:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400976:	bf1d      	ittte	ne
  400978:	6983      	ldrne	r3, [r0, #24]
  40097a:	700b      	strbne	r3, [r1, #0]
	return 0;
  40097c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40097e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400980:	4770      	bx	lr
  400982:	bf00      	nop

00400984 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400984:	6943      	ldr	r3, [r0, #20]
  400986:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40098a:	bf1d      	ittte	ne
  40098c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400990:	61c1      	strne	r1, [r0, #28]
	return 0;
  400992:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400994:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400996:	4770      	bx	lr

00400998 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400998:	6943      	ldr	r3, [r0, #20]
  40099a:	f013 0f01 	tst.w	r3, #1
  40099e:	d005      	beq.n	4009ac <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4009a0:	6983      	ldr	r3, [r0, #24]
  4009a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4009a6:	600b      	str	r3, [r1, #0]

	return 0;
  4009a8:	2000      	movs	r0, #0
  4009aa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4009ac:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4009ae:	4770      	bx	lr

004009b0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  4009b0:	e7fe      	b.n	4009b0 <Dummy_Handler>
  4009b2:	bf00      	nop

004009b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4009b4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4009b6:	4b20      	ldr	r3, [pc, #128]	; (400a38 <Reset_Handler+0x84>)
  4009b8:	4a20      	ldr	r2, [pc, #128]	; (400a3c <Reset_Handler+0x88>)
  4009ba:	429a      	cmp	r2, r3
  4009bc:	d913      	bls.n	4009e6 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4009be:	4b20      	ldr	r3, [pc, #128]	; (400a40 <Reset_Handler+0x8c>)
  4009c0:	4a1d      	ldr	r2, [pc, #116]	; (400a38 <Reset_Handler+0x84>)
  4009c2:	429a      	cmp	r2, r3
  4009c4:	d21f      	bcs.n	400a06 <Reset_Handler+0x52>
  4009c6:	4611      	mov	r1, r2
  4009c8:	3204      	adds	r2, #4
  4009ca:	3303      	adds	r3, #3
  4009cc:	1a9b      	subs	r3, r3, r2
  4009ce:	f023 0303 	bic.w	r3, r3, #3
  4009d2:	3304      	adds	r3, #4
  4009d4:	4a19      	ldr	r2, [pc, #100]	; (400a3c <Reset_Handler+0x88>)
  4009d6:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4009d8:	f852 0b04 	ldr.w	r0, [r2], #4
  4009dc:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4009e0:	429a      	cmp	r2, r3
  4009e2:	d1f9      	bne.n	4009d8 <Reset_Handler+0x24>
  4009e4:	e00f      	b.n	400a06 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4009e6:	4b14      	ldr	r3, [pc, #80]	; (400a38 <Reset_Handler+0x84>)
  4009e8:	4a14      	ldr	r2, [pc, #80]	; (400a3c <Reset_Handler+0x88>)
  4009ea:	429a      	cmp	r2, r3
  4009ec:	d20b      	bcs.n	400a06 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4009ee:	4b14      	ldr	r3, [pc, #80]	; (400a40 <Reset_Handler+0x8c>)
  4009f0:	4a11      	ldr	r2, [pc, #68]	; (400a38 <Reset_Handler+0x84>)
  4009f2:	1a9a      	subs	r2, r3, r2
  4009f4:	4813      	ldr	r0, [pc, #76]	; (400a44 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4009f6:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4009f8:	b12a      	cbz	r2, 400a06 <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  4009fa:	f851 2904 	ldr.w	r2, [r1], #-4
  4009fe:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400a02:	4281      	cmp	r1, r0
  400a04:	d1f9      	bne.n	4009fa <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400a06:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400a08:	4b0f      	ldr	r3, [pc, #60]	; (400a48 <Reset_Handler+0x94>)
  400a0a:	4a10      	ldr	r2, [pc, #64]	; (400a4c <Reset_Handler+0x98>)
  400a0c:	429a      	cmp	r2, r3
  400a0e:	d20b      	bcs.n	400a28 <Reset_Handler+0x74>
  400a10:	1d13      	adds	r3, r2, #4
  400a12:	4a0f      	ldr	r2, [pc, #60]	; (400a50 <Reset_Handler+0x9c>)
  400a14:	1ad2      	subs	r2, r2, r3
  400a16:	f022 0203 	bic.w	r2, r2, #3
  400a1a:	441a      	add	r2, r3
  400a1c:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400a1e:	2100      	movs	r1, #0
  400a20:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400a24:	4293      	cmp	r3, r2
  400a26:	d1fb      	bne.n	400a20 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400a28:	4b0a      	ldr	r3, [pc, #40]	; (400a54 <Reset_Handler+0xa0>)
  400a2a:	4a0b      	ldr	r2, [pc, #44]	; (400a58 <Reset_Handler+0xa4>)
  400a2c:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400a2e:	4b0b      	ldr	r3, [pc, #44]	; (400a5c <Reset_Handler+0xa8>)
  400a30:	4798      	blx	r3

	/* Branch to main function */
	main();
  400a32:	4b0b      	ldr	r3, [pc, #44]	; (400a60 <Reset_Handler+0xac>)
  400a34:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  400a36:	e7fe      	b.n	400a36 <Reset_Handler+0x82>
  400a38:	20000000 	.word	0x20000000
  400a3c:	0040426c 	.word	0x0040426c
  400a40:	2000086c 	.word	0x2000086c
  400a44:	00404268 	.word	0x00404268
  400a48:	20000950 	.word	0x20000950
  400a4c:	2000086c 	.word	0x2000086c
  400a50:	20000953 	.word	0x20000953
  400a54:	e000ed00 	.word	0xe000ed00
  400a58:	00400000 	.word	0x00400000
  400a5c:	004010a5 	.word	0x004010a5
  400a60:	00400e3d 	.word	0x00400e3d

00400a64 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400a64:	4b3d      	ldr	r3, [pc, #244]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a68:	f003 0303 	and.w	r3, r3, #3
  400a6c:	2b03      	cmp	r3, #3
  400a6e:	d85d      	bhi.n	400b2c <SystemCoreClockUpdate+0xc8>
  400a70:	e8df f003 	tbb	[pc, r3]
  400a74:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400a78:	4b39      	ldr	r3, [pc, #228]	; (400b60 <SystemCoreClockUpdate+0xfc>)
  400a7a:	695b      	ldr	r3, [r3, #20]
  400a7c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a80:	bf14      	ite	ne
  400a82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a8a:	4b36      	ldr	r3, [pc, #216]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400a8c:	601a      	str	r2, [r3, #0]
  400a8e:	e04d      	b.n	400b2c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400a90:	4b32      	ldr	r3, [pc, #200]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400a92:	6a1b      	ldr	r3, [r3, #32]
  400a94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a98:	d003      	beq.n	400aa2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400a9a:	4a33      	ldr	r2, [pc, #204]	; (400b68 <SystemCoreClockUpdate+0x104>)
  400a9c:	4b31      	ldr	r3, [pc, #196]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400a9e:	601a      	str	r2, [r3, #0]
  400aa0:	e044      	b.n	400b2c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400aa2:	4a32      	ldr	r2, [pc, #200]	; (400b6c <SystemCoreClockUpdate+0x108>)
  400aa4:	4b2f      	ldr	r3, [pc, #188]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400aa6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400aa8:	4b2c      	ldr	r3, [pc, #176]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400aaa:	6a1b      	ldr	r3, [r3, #32]
  400aac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ab0:	2b10      	cmp	r3, #16
  400ab2:	d002      	beq.n	400aba <SystemCoreClockUpdate+0x56>
  400ab4:	2b20      	cmp	r3, #32
  400ab6:	d004      	beq.n	400ac2 <SystemCoreClockUpdate+0x5e>
  400ab8:	e038      	b.n	400b2c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400aba:	4a2d      	ldr	r2, [pc, #180]	; (400b70 <SystemCoreClockUpdate+0x10c>)
  400abc:	4b29      	ldr	r3, [pc, #164]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400abe:	601a      	str	r2, [r3, #0]
			break;
  400ac0:	e034      	b.n	400b2c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400ac2:	4a29      	ldr	r2, [pc, #164]	; (400b68 <SystemCoreClockUpdate+0x104>)
  400ac4:	4b27      	ldr	r3, [pc, #156]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400ac6:	601a      	str	r2, [r3, #0]
			break;
  400ac8:	e030      	b.n	400b2c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400aca:	4b24      	ldr	r3, [pc, #144]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400acc:	6a1b      	ldr	r3, [r3, #32]
  400ace:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ad2:	d003      	beq.n	400adc <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400ad4:	4a24      	ldr	r2, [pc, #144]	; (400b68 <SystemCoreClockUpdate+0x104>)
  400ad6:	4b23      	ldr	r3, [pc, #140]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400ad8:	601a      	str	r2, [r3, #0]
  400ada:	e012      	b.n	400b02 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400adc:	4a23      	ldr	r2, [pc, #140]	; (400b6c <SystemCoreClockUpdate+0x108>)
  400ade:	4b21      	ldr	r3, [pc, #132]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400ae0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ae2:	4b1e      	ldr	r3, [pc, #120]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400ae4:	6a1b      	ldr	r3, [r3, #32]
  400ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400aea:	2b10      	cmp	r3, #16
  400aec:	d002      	beq.n	400af4 <SystemCoreClockUpdate+0x90>
  400aee:	2b20      	cmp	r3, #32
  400af0:	d004      	beq.n	400afc <SystemCoreClockUpdate+0x98>
  400af2:	e006      	b.n	400b02 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400af4:	4a1e      	ldr	r2, [pc, #120]	; (400b70 <SystemCoreClockUpdate+0x10c>)
  400af6:	4b1b      	ldr	r3, [pc, #108]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400af8:	601a      	str	r2, [r3, #0]
					break;
  400afa:	e002      	b.n	400b02 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400afc:	4a1a      	ldr	r2, [pc, #104]	; (400b68 <SystemCoreClockUpdate+0x104>)
  400afe:	4b19      	ldr	r3, [pc, #100]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400b00:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400b02:	4b16      	ldr	r3, [pc, #88]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b06:	f003 0303 	and.w	r3, r3, #3
  400b0a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400b0c:	4a13      	ldr	r2, [pc, #76]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400b0e:	bf07      	ittee	eq
  400b10:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400b12:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400b14:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400b16:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400b18:	4812      	ldr	r0, [pc, #72]	; (400b64 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400b1a:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400b1e:	6803      	ldr	r3, [r0, #0]
  400b20:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400b24:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400b26:	fbb3 f3f2 	udiv	r3, r3, r2
  400b2a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400b2c:	4b0b      	ldr	r3, [pc, #44]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b30:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b34:	2b70      	cmp	r3, #112	; 0x70
  400b36:	d107      	bne.n	400b48 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400b38:	4a0a      	ldr	r2, [pc, #40]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400b3a:	6813      	ldr	r3, [r2, #0]
  400b3c:	490d      	ldr	r1, [pc, #52]	; (400b74 <SystemCoreClockUpdate+0x110>)
  400b3e:	fba1 1303 	umull	r1, r3, r1, r3
  400b42:	085b      	lsrs	r3, r3, #1
  400b44:	6013      	str	r3, [r2, #0]
  400b46:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b48:	4b04      	ldr	r3, [pc, #16]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400b4c:	4905      	ldr	r1, [pc, #20]	; (400b64 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b4e:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400b52:	680b      	ldr	r3, [r1, #0]
  400b54:	40d3      	lsrs	r3, r2
  400b56:	600b      	str	r3, [r1, #0]
  400b58:	4770      	bx	lr
  400b5a:	bf00      	nop
  400b5c:	400e0400 	.word	0x400e0400
  400b60:	400e1410 	.word	0x400e1410
  400b64:	20000000 	.word	0x20000000
  400b68:	00b71b00 	.word	0x00b71b00
  400b6c:	003d0900 	.word	0x003d0900
  400b70:	007a1200 	.word	0x007a1200
  400b74:	aaaaaaab 	.word	0xaaaaaaab

00400b78 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400b78:	4b1a      	ldr	r3, [pc, #104]	; (400be4 <system_init_flash+0x6c>)
  400b7a:	4298      	cmp	r0, r3
  400b7c:	d807      	bhi.n	400b8e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400b82:	4a19      	ldr	r2, [pc, #100]	; (400be8 <system_init_flash+0x70>)
  400b84:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b86:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b8a:	6013      	str	r3, [r2, #0]
  400b8c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400b8e:	4b17      	ldr	r3, [pc, #92]	; (400bec <system_init_flash+0x74>)
  400b90:	4298      	cmp	r0, r3
  400b92:	d806      	bhi.n	400ba2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b94:	4b16      	ldr	r3, [pc, #88]	; (400bf0 <system_init_flash+0x78>)
  400b96:	4a14      	ldr	r2, [pc, #80]	; (400be8 <system_init_flash+0x70>)
  400b98:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b9a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b9e:	6013      	str	r3, [r2, #0]
  400ba0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400ba2:	4b14      	ldr	r3, [pc, #80]	; (400bf4 <system_init_flash+0x7c>)
  400ba4:	4298      	cmp	r0, r3
  400ba6:	d806      	bhi.n	400bb6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ba8:	4b13      	ldr	r3, [pc, #76]	; (400bf8 <system_init_flash+0x80>)
  400baa:	4a0f      	ldr	r2, [pc, #60]	; (400be8 <system_init_flash+0x70>)
  400bac:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bb2:	6013      	str	r3, [r2, #0]
  400bb4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400bb6:	4b11      	ldr	r3, [pc, #68]	; (400bfc <system_init_flash+0x84>)
  400bb8:	4298      	cmp	r0, r3
  400bba:	d806      	bhi.n	400bca <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bbc:	4b10      	ldr	r3, [pc, #64]	; (400c00 <system_init_flash+0x88>)
  400bbe:	4a0a      	ldr	r2, [pc, #40]	; (400be8 <system_init_flash+0x70>)
  400bc0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bc2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bc6:	6013      	str	r3, [r2, #0]
  400bc8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400bca:	4b0e      	ldr	r3, [pc, #56]	; (400c04 <system_init_flash+0x8c>)
  400bcc:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400bce:	bf94      	ite	ls
  400bd0:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400bd4:	4b0c      	ldrhi	r3, [pc, #48]	; (400c08 <system_init_flash+0x90>)
  400bd6:	4a04      	ldr	r2, [pc, #16]	; (400be8 <system_init_flash+0x70>)
  400bd8:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400bda:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bde:	6013      	str	r3, [r2, #0]
  400be0:	4770      	bx	lr
  400be2:	bf00      	nop
  400be4:	01312cff 	.word	0x01312cff
  400be8:	400e0a00 	.word	0x400e0a00
  400bec:	026259ff 	.word	0x026259ff
  400bf0:	04000100 	.word	0x04000100
  400bf4:	039386ff 	.word	0x039386ff
  400bf8:	04000200 	.word	0x04000200
  400bfc:	04c4b3ff 	.word	0x04c4b3ff
  400c00:	04000300 	.word	0x04000300
  400c04:	05f5e0ff 	.word	0x05f5e0ff
  400c08:	04000500 	.word	0x04000500

00400c0c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400c0c:	4b09      	ldr	r3, [pc, #36]	; (400c34 <_sbrk+0x28>)
  400c0e:	681b      	ldr	r3, [r3, #0]
  400c10:	b913      	cbnz	r3, 400c18 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400c12:	4a09      	ldr	r2, [pc, #36]	; (400c38 <_sbrk+0x2c>)
  400c14:	4b07      	ldr	r3, [pc, #28]	; (400c34 <_sbrk+0x28>)
  400c16:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400c18:	4b06      	ldr	r3, [pc, #24]	; (400c34 <_sbrk+0x28>)
  400c1a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400c1c:	181a      	adds	r2, r3, r0
  400c1e:	4907      	ldr	r1, [pc, #28]	; (400c3c <_sbrk+0x30>)
  400c20:	4291      	cmp	r1, r2
  400c22:	db04      	blt.n	400c2e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400c24:	4610      	mov	r0, r2
  400c26:	4a03      	ldr	r2, [pc, #12]	; (400c34 <_sbrk+0x28>)
  400c28:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400c2a:	4618      	mov	r0, r3
  400c2c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400c2e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400c32:	4770      	bx	lr
  400c34:	20000900 	.word	0x20000900
  400c38:	20003950 	.word	0x20003950
  400c3c:	20027ffc 	.word	0x20027ffc

00400c40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c40:	f04f 30ff 	mov.w	r0, #4294967295
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop

00400c48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c4c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c4e:	2000      	movs	r0, #0
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop

00400c54 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400c54:	2001      	movs	r0, #1
  400c56:	4770      	bx	lr

00400c58 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c58:	2000      	movs	r0, #0
  400c5a:	4770      	bx	lr

00400c5c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400c5e:	b083      	sub	sp, #12
  400c60:	4605      	mov	r5, r0
  400c62:	460c      	mov	r4, r1
	uint32_t val = 0;
  400c64:	2300      	movs	r3, #0
  400c66:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c68:	4b18      	ldr	r3, [pc, #96]	; (400ccc <usart_serial_getchar+0x70>)
  400c6a:	4298      	cmp	r0, r3
  400c6c:	d107      	bne.n	400c7e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400c6e:	461f      	mov	r7, r3
  400c70:	4e17      	ldr	r6, [pc, #92]	; (400cd0 <usart_serial_getchar+0x74>)
  400c72:	4638      	mov	r0, r7
  400c74:	4621      	mov	r1, r4
  400c76:	47b0      	blx	r6
  400c78:	2800      	cmp	r0, #0
  400c7a:	d1fa      	bne.n	400c72 <usart_serial_getchar+0x16>
  400c7c:	e017      	b.n	400cae <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c7e:	4b15      	ldr	r3, [pc, #84]	; (400cd4 <usart_serial_getchar+0x78>)
  400c80:	4298      	cmp	r0, r3
  400c82:	d107      	bne.n	400c94 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400c84:	461e      	mov	r6, r3
  400c86:	4d12      	ldr	r5, [pc, #72]	; (400cd0 <usart_serial_getchar+0x74>)
  400c88:	4630      	mov	r0, r6
  400c8a:	4621      	mov	r1, r4
  400c8c:	47a8      	blx	r5
  400c8e:	2800      	cmp	r0, #0
  400c90:	d1fa      	bne.n	400c88 <usart_serial_getchar+0x2c>
  400c92:	e018      	b.n	400cc6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c94:	4b10      	ldr	r3, [pc, #64]	; (400cd8 <usart_serial_getchar+0x7c>)
  400c96:	4298      	cmp	r0, r3
  400c98:	d109      	bne.n	400cae <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400c9a:	461e      	mov	r6, r3
  400c9c:	4d0f      	ldr	r5, [pc, #60]	; (400cdc <usart_serial_getchar+0x80>)
  400c9e:	4630      	mov	r0, r6
  400ca0:	a901      	add	r1, sp, #4
  400ca2:	47a8      	blx	r5
  400ca4:	2800      	cmp	r0, #0
  400ca6:	d1fa      	bne.n	400c9e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400ca8:	9b01      	ldr	r3, [sp, #4]
  400caa:	7023      	strb	r3, [r4, #0]
  400cac:	e00b      	b.n	400cc6 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400cae:	4b0c      	ldr	r3, [pc, #48]	; (400ce0 <usart_serial_getchar+0x84>)
  400cb0:	429d      	cmp	r5, r3
  400cb2:	d108      	bne.n	400cc6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400cb4:	461e      	mov	r6, r3
  400cb6:	4d09      	ldr	r5, [pc, #36]	; (400cdc <usart_serial_getchar+0x80>)
  400cb8:	4630      	mov	r0, r6
  400cba:	a901      	add	r1, sp, #4
  400cbc:	47a8      	blx	r5
  400cbe:	2800      	cmp	r0, #0
  400cc0:	d1fa      	bne.n	400cb8 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400cc2:	9b01      	ldr	r3, [sp, #4]
  400cc4:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400cc6:	b003      	add	sp, #12
  400cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400cca:	bf00      	nop
  400ccc:	400e0600 	.word	0x400e0600
  400cd0:	00400971 	.word	0x00400971
  400cd4:	400e0800 	.word	0x400e0800
  400cd8:	40024000 	.word	0x40024000
  400cdc:	00400999 	.word	0x00400999
  400ce0:	40028000 	.word	0x40028000

00400ce4 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400ce4:	b570      	push	{r4, r5, r6, lr}
  400ce6:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400ce8:	4b18      	ldr	r3, [pc, #96]	; (400d4c <usart_serial_putchar+0x68>)
  400cea:	4298      	cmp	r0, r3
  400cec:	d108      	bne.n	400d00 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400cee:	461e      	mov	r6, r3
  400cf0:	4d17      	ldr	r5, [pc, #92]	; (400d50 <usart_serial_putchar+0x6c>)
  400cf2:	4630      	mov	r0, r6
  400cf4:	4621      	mov	r1, r4
  400cf6:	47a8      	blx	r5
  400cf8:	2800      	cmp	r0, #0
  400cfa:	d1fa      	bne.n	400cf2 <usart_serial_putchar+0xe>
		return 1;
  400cfc:	2001      	movs	r0, #1
  400cfe:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400d00:	4b14      	ldr	r3, [pc, #80]	; (400d54 <usart_serial_putchar+0x70>)
  400d02:	4298      	cmp	r0, r3
  400d04:	d108      	bne.n	400d18 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400d06:	461e      	mov	r6, r3
  400d08:	4d11      	ldr	r5, [pc, #68]	; (400d50 <usart_serial_putchar+0x6c>)
  400d0a:	4630      	mov	r0, r6
  400d0c:	4621      	mov	r1, r4
  400d0e:	47a8      	blx	r5
  400d10:	2800      	cmp	r0, #0
  400d12:	d1fa      	bne.n	400d0a <usart_serial_putchar+0x26>
		return 1;
  400d14:	2001      	movs	r0, #1
  400d16:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400d18:	4b0f      	ldr	r3, [pc, #60]	; (400d58 <usart_serial_putchar+0x74>)
  400d1a:	4298      	cmp	r0, r3
  400d1c:	d108      	bne.n	400d30 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400d1e:	461e      	mov	r6, r3
  400d20:	4d0e      	ldr	r5, [pc, #56]	; (400d5c <usart_serial_putchar+0x78>)
  400d22:	4630      	mov	r0, r6
  400d24:	4621      	mov	r1, r4
  400d26:	47a8      	blx	r5
  400d28:	2800      	cmp	r0, #0
  400d2a:	d1fa      	bne.n	400d22 <usart_serial_putchar+0x3e>
		return 1;
  400d2c:	2001      	movs	r0, #1
  400d2e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400d30:	4b0b      	ldr	r3, [pc, #44]	; (400d60 <usart_serial_putchar+0x7c>)
  400d32:	4298      	cmp	r0, r3
  400d34:	d108      	bne.n	400d48 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400d36:	461e      	mov	r6, r3
  400d38:	4d08      	ldr	r5, [pc, #32]	; (400d5c <usart_serial_putchar+0x78>)
  400d3a:	4630      	mov	r0, r6
  400d3c:	4621      	mov	r1, r4
  400d3e:	47a8      	blx	r5
  400d40:	2800      	cmp	r0, #0
  400d42:	d1fa      	bne.n	400d3a <usart_serial_putchar+0x56>
		return 1;
  400d44:	2001      	movs	r0, #1
  400d46:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400d48:	2000      	movs	r0, #0
}
  400d4a:	bd70      	pop	{r4, r5, r6, pc}
  400d4c:	400e0600 	.word	0x400e0600
  400d50:	00400961 	.word	0x00400961
  400d54:	400e0800 	.word	0x400e0800
  400d58:	40024000 	.word	0x40024000
  400d5c:	00400985 	.word	0x00400985
  400d60:	40028000 	.word	0x40028000

00400d64 <Button2_Handler>:
 *  Handle process led2 status change.
 */
// [main_button2_handler] 
static void Button2_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_2_ID == id && PIN_PUSHBUTTON_2_MASK == mask) {
  400d64:	280d      	cmp	r0, #13
  400d66:	d11e      	bne.n	400da6 <Button2_Handler+0x42>
  400d68:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  400d6c:	d11b      	bne.n	400da6 <Button2_Handler+0x42>
 *
 *  Handle process led2 status change.
 */
// [main_button2_handler] 
static void Button2_Handler(uint32_t id, uint32_t mask)
{
  400d6e:	b508      	push	{r3, lr}
	}
// [main_button1_evnt_process]
#ifdef LED1_GPIO 
	else {
// [main_button2_evnt_process]
		g_b_led1_active = !g_b_led1_active;
  400d70:	4b0d      	ldr	r3, [pc, #52]	; (400da8 <Button2_Handler+0x44>)
  400d72:	781a      	ldrb	r2, [r3, #0]
  400d74:	f082 0201 	eor.w	r2, r2, #1
  400d78:	701a      	strb	r2, [r3, #0]

		/* Enable LED#2 and TC if they were enabled */
		if (g_b_led1_active) {
  400d7a:	781b      	ldrb	r3, [r3, #0]
  400d7c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400d80:	d008      	beq.n	400d94 <Button2_Handler+0x30>
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <Button2_Handler+0x48>)
  400d88:	635a      	str	r2, [r3, #52]	; 0x34
			ioport_set_pin_level(LED1_GPIO, IOPORT_PIN_LEVEL_LOW);
			tc_start(TC0, 0);
  400d8a:	4809      	ldr	r0, [pc, #36]	; (400db0 <Button2_Handler+0x4c>)
  400d8c:	2100      	movs	r1, #0
  400d8e:	4b09      	ldr	r3, [pc, #36]	; (400db4 <Button2_Handler+0x50>)
  400d90:	4798      	blx	r3
  400d92:	bd08      	pop	{r3, pc}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400d98:	4b04      	ldr	r3, [pc, #16]	; (400dac <Button2_Handler+0x48>)
  400d9a:	631a      	str	r2, [r3, #48]	; 0x30
		}
		/* Disable LED#2 and TC if they were disabled */
		else {
			ioport_set_pin_level(LED1_GPIO, IOPORT_PIN_LEVEL_HIGH);
			tc_stop(TC0, 0);
  400d9c:	4804      	ldr	r0, [pc, #16]	; (400db0 <Button2_Handler+0x4c>)
  400d9e:	2100      	movs	r1, #0
  400da0:	4b05      	ldr	r3, [pc, #20]	; (400db8 <Button2_Handler+0x54>)
  400da2:	4798      	blx	r3
  400da4:	bd08      	pop	{r3, pc}
  400da6:	4770      	bx	lr
  400da8:	20000005 	.word	0x20000005
  400dac:	400e0e00 	.word	0x400e0e00
  400db0:	40010000 	.word	0x40010000
  400db4:	0040088d 	.word	0x0040088d
  400db8:	00400895 	.word	0x00400895

00400dbc <Button1_Handler>:
 *  Handle process led1 status change.
 */
// [main_button1_handler]
static void Button1_Handler(uint32_t id, uint32_t mask)
{
	if (PIN_PUSHBUTTON_1_ID == id && PIN_PUSHBUTTON_1_MASK == mask) {
  400dbc:	280c      	cmp	r0, #12
  400dbe:	d10e      	bne.n	400dde <Button1_Handler+0x22>
  400dc0:	2908      	cmp	r1, #8
  400dc2:	d10c      	bne.n	400dde <Button1_Handler+0x22>
 */
static void ProcessButtonEvt(uint8_t uc_button)
{
// [main_button1_evnt_process]
	if (uc_button == 0) {
		g_b_led0_active = !g_b_led0_active;
  400dc4:	4b06      	ldr	r3, [pc, #24]	; (400de0 <Button1_Handler+0x24>)
  400dc6:	781a      	ldrb	r2, [r3, #0]
  400dc8:	f082 0201 	eor.w	r2, r2, #1
  400dcc:	701a      	strb	r2, [r3, #0]
		if (!g_b_led0_active) {
  400dce:	781b      	ldrb	r3, [r3, #0]
  400dd0:	f013 0fff 	tst.w	r3, #255	; 0xff
  400dd4:	d103      	bne.n	400dde <Button1_Handler+0x22>
  400dd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400dda:	4b02      	ldr	r3, [pc, #8]	; (400de4 <Button1_Handler+0x28>)
  400ddc:	631a      	str	r2, [r3, #48]	; 0x30
  400dde:	4770      	bx	lr
  400de0:	20000004 	.word	0x20000004
  400de4:	400e0e00 	.word	0x400e0e00

00400de8 <SysTick_Handler>:
 *  Increments the g_ul_ms_ticks counter.
 */
// [main_systick_handler]
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
  400de8:	4a02      	ldr	r2, [pc, #8]	; (400df4 <SysTick_Handler+0xc>)
  400dea:	6813      	ldr	r3, [r2, #0]
  400dec:	3301      	adds	r3, #1
  400dee:	6013      	str	r3, [r2, #0]
  400df0:	4770      	bx	lr
  400df2:	bf00      	nop
  400df4:	20000904 	.word	0x20000904

00400df8 <TC0_Handler>:
 *  Interrupt handler for TC0 interrupt. Toggles the state of LED\#2.
 */
// [main_tc0_handler]
#ifndef BOARD_NO_LED_1
void TC0_Handler(void)
{
  400df8:	b500      	push	{lr}
  400dfa:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);
  400dfc:	480a      	ldr	r0, [pc, #40]	; (400e28 <TC0_Handler+0x30>)
  400dfe:	2100      	movs	r1, #0
  400e00:	4b0a      	ldr	r3, [pc, #40]	; (400e2c <TC0_Handler+0x34>)
  400e02:	4798      	blx	r3
  400e04:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  400e06:	9b01      	ldr	r3, [sp, #4]
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400e08:	4b09      	ldr	r3, [pc, #36]	; (400e30 <TC0_Handler+0x38>)
  400e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400e0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
		port->PIO_CODR = mask;
  400e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400e14:	4b06      	ldr	r3, [pc, #24]	; (400e30 <TC0_Handler+0x38>)
  400e16:	bf14      	ite	ne
  400e18:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400e1a:	631a      	streq	r2, [r3, #48]	; 0x30
#ifdef LED1_GPIO
	/** Toggle LED state. */
	ioport_toggle_pin_level(LED1_GPIO);
#endif

	printf("2 ");
  400e1c:	4805      	ldr	r0, [pc, #20]	; (400e34 <TC0_Handler+0x3c>)
  400e1e:	4b06      	ldr	r3, [pc, #24]	; (400e38 <TC0_Handler+0x40>)
  400e20:	4798      	blx	r3
}
  400e22:	b003      	add	sp, #12
  400e24:	f85d fb04 	ldr.w	pc, [sp], #4
  400e28:	40010000 	.word	0x40010000
  400e2c:	004008ad 	.word	0x004008ad
  400e30:	400e0e00 	.word	0x400e0e00
  400e34:	004040cc 	.word	0x004040cc
  400e38:	004010f5 	.word	0x004010f5

00400e3c <main>:
 *
 *  \return Unused (ANSI-C compatibility).
 */
// [main]
int main(void)
{
  400e3c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  400e40:	b087      	sub	sp, #28
//! [main_step_sys_init]
	/* Initialize the SAM system */
	sysclk_init();
  400e42:	4b6a      	ldr	r3, [pc, #424]	; (400fec <main+0x1b0>)
  400e44:	4798      	blx	r3
	board_init();
  400e46:	4b6a      	ldr	r3, [pc, #424]	; (400ff0 <main+0x1b4>)
  400e48:	4798      	blx	r3
  400e4a:	2008      	movs	r0, #8
  400e4c:	4e69      	ldr	r6, [pc, #420]	; (400ff4 <main+0x1b8>)
  400e4e:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400e50:	4d69      	ldr	r5, [pc, #420]	; (400ff8 <main+0x1bc>)
  400e52:	4b6a      	ldr	r3, [pc, #424]	; (400ffc <main+0x1c0>)
  400e54:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400e56:	4a6a      	ldr	r2, [pc, #424]	; (401000 <main+0x1c4>)
  400e58:	4b6a      	ldr	r3, [pc, #424]	; (401004 <main+0x1c8>)
  400e5a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400e5c:	4a6a      	ldr	r2, [pc, #424]	; (401008 <main+0x1cc>)
  400e5e:	4b6b      	ldr	r3, [pc, #428]	; (40100c <main+0x1d0>)
  400e60:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400e62:	4c6b      	ldr	r4, [pc, #428]	; (401010 <main+0x1d4>)
  400e64:	9403      	str	r4, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
  400e66:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400e6a:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
  400e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e70:	9305      	str	r3, [sp, #20]
  400e72:	2008      	movs	r0, #8
  400e74:	47b0      	blx	r6
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400e76:	4628      	mov	r0, r5
  400e78:	a903      	add	r1, sp, #12
  400e7a:	4b66      	ldr	r3, [pc, #408]	; (401014 <main+0x1d8>)
  400e7c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400e7e:	4f66      	ldr	r7, [pc, #408]	; (401018 <main+0x1dc>)
  400e80:	683b      	ldr	r3, [r7, #0]
  400e82:	6898      	ldr	r0, [r3, #8]
  400e84:	2100      	movs	r1, #0
  400e86:	4d65      	ldr	r5, [pc, #404]	; (40101c <main+0x1e0>)
  400e88:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400e8a:	683b      	ldr	r3, [r7, #0]
  400e8c:	6858      	ldr	r0, [r3, #4]
  400e8e:	2100      	movs	r1, #0
  400e90:	47a8      	blx	r5
	/* Initialize the console uart */
	configure_console();
//! [main_step_console_init]

	/* Output example information */
	puts(STRING_HEADER);
  400e92:	4863      	ldr	r0, [pc, #396]	; (401020 <main+0x1e4>)
  400e94:	4f63      	ldr	r7, [pc, #396]	; (401024 <main+0x1e8>)
  400e96:	47b8      	blx	r7

	/* Configure systick for 1 ms */
	puts("Configure system tick to get 1ms tick period.\r");
  400e98:	4863      	ldr	r0, [pc, #396]	; (401028 <main+0x1ec>)
  400e9a:	47b8      	blx	r7
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400e9c:	4b63      	ldr	r3, [pc, #396]	; (40102c <main+0x1f0>)
  400e9e:	4a64      	ldr	r2, [pc, #400]	; (401030 <main+0x1f4>)
  400ea0:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400ea2:	21f0      	movs	r1, #240	; 0xf0
  400ea4:	4a63      	ldr	r2, [pc, #396]	; (401034 <main+0x1f8>)
  400ea6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400eaa:	2500      	movs	r5, #0
  400eac:	609d      	str	r5, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400eae:	2207      	movs	r2, #7
  400eb0:	601a      	str	r2, [r3, #0]
		while (1);
	}
//! [main_step_systick_init]

#ifndef BOARD_NO_LED_1
	puts("Configure TC.\r");
  400eb2:	4861      	ldr	r0, [pc, #388]	; (401038 <main+0x1fc>)
  400eb4:	47b8      	blx	r7
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
  400eb6:	2017      	movs	r0, #23
  400eb8:	47b0      	blx	r6
	pmc_switch_pck_to_sclk(PMC_PCK_3, PMC_PCK_PRES_CLK_1);
	pmc_enable_pck(PMC_PCK_3);
#endif

	/** Configure TC for a 4Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(4, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400eba:	9400      	str	r4, [sp, #0]
  400ebc:	2004      	movs	r0, #4
  400ebe:	4621      	mov	r1, r4
  400ec0:	aa02      	add	r2, sp, #8
  400ec2:	ab03      	add	r3, sp, #12
  400ec4:	4e5d      	ldr	r6, [pc, #372]	; (40103c <main+0x200>)
  400ec6:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400ec8:	4e5d      	ldr	r6, [pc, #372]	; (401040 <main+0x204>)
  400eca:	4630      	mov	r0, r6
  400ecc:	4629      	mov	r1, r5
  400ece:	9a03      	ldr	r2, [sp, #12]
  400ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400ed4:	4b5b      	ldr	r3, [pc, #364]	; (401044 <main+0x208>)
  400ed6:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / 4);
  400ed8:	9a02      	ldr	r2, [sp, #8]
  400eda:	fbb4 f2f2 	udiv	r2, r4, r2
  400ede:	4630      	mov	r0, r6
  400ee0:	4629      	mov	r1, r5
  400ee2:	0892      	lsrs	r2, r2, #2
  400ee4:	4b58      	ldr	r3, [pc, #352]	; (401048 <main+0x20c>)
  400ee6:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ee8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400eec:	4b57      	ldr	r3, [pc, #348]	; (40104c <main+0x210>)
  400eee:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400ef0:	4630      	mov	r0, r6
  400ef2:	4629      	mov	r1, r5
  400ef4:	2210      	movs	r2, #16
  400ef6:	4b56      	ldr	r3, [pc, #344]	; (401050 <main+0x214>)
  400ef8:	4798      	blx	r3

#ifdef LED1_GPIO
	/** Start the counter if LED1 is enabled. */
	if (g_b_led1_active) {
  400efa:	4b56      	ldr	r3, [pc, #344]	; (401054 <main+0x218>)
  400efc:	781b      	ldrb	r3, [r3, #0]
  400efe:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f02:	d003      	beq.n	400f0c <main+0xd0>
		tc_start(TC0, 0);
  400f04:	4630      	mov	r0, r6
  400f06:	4629      	mov	r1, r5
  400f08:	4b53      	ldr	r3, [pc, #332]	; (401058 <main+0x21c>)
  400f0a:	4798      	blx	r3
//! [main_step_tc_init]
	configure_tc();
//! [main_step_tc_init]
#endif

	puts("Configure buttons with debouncing.\r");
  400f0c:	4853      	ldr	r0, [pc, #332]	; (40105c <main+0x220>)
  400f0e:	4b45      	ldr	r3, [pc, #276]	; (401024 <main+0x1e8>)
  400f10:	4798      	blx	r3
 */
static void configure_buttons(void)
{
// [main_button1_configure]
	/* Configure Pushbutton 1 */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  400f12:	200c      	movs	r0, #12
  400f14:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 400ff4 <main+0x1b8>
  400f18:	47d8      	blx	fp
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  400f1a:	4d51      	ldr	r5, [pc, #324]	; (401060 <main+0x224>)
  400f1c:	4628      	mov	r0, r5
  400f1e:	2108      	movs	r1, #8
  400f20:	220a      	movs	r2, #10
  400f22:	f8df a178 	ldr.w	sl, [pc, #376]	; 40109c <main+0x260>
  400f26:	47d0      	blx	sl
	/* Interrupt on rising edge  */
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  400f28:	4b4e      	ldr	r3, [pc, #312]	; (401064 <main+0x228>)
  400f2a:	9300      	str	r3, [sp, #0]
  400f2c:	4628      	mov	r0, r5
  400f2e:	210c      	movs	r1, #12
  400f30:	2208      	movs	r2, #8
  400f32:	2379      	movs	r3, #121	; 0x79
  400f34:	f8df 9168 	ldr.w	r9, [pc, #360]	; 4010a0 <main+0x264>
  400f38:	47c8      	blx	r9
  400f3a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 40104c <main+0x210>
  400f3e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  400f42:	f8c8 4000 	str.w	r4, [r8]
			PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO,
  400f46:	4628      	mov	r0, r5
  400f48:	210c      	movs	r1, #12
  400f4a:	2200      	movs	r2, #0
  400f4c:	4f46      	ldr	r7, [pc, #280]	; (401068 <main+0x22c>)
  400f4e:	47b8      	blx	r7
			(IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  400f50:	4628      	mov	r0, r5
  400f52:	2108      	movs	r1, #8
  400f54:	4e45      	ldr	r6, [pc, #276]	; (40106c <main+0x230>)
  400f56:	47b0      	blx	r6
// [main_button1_configure]
#ifndef BOARD_NO_PUSHBUTTON_2
// [main_button2_configure]
	/* Configure Pushbutton 2 */
	pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  400f58:	200d      	movs	r0, #13
  400f5a:	47d8      	blx	fp
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  400f5c:	f505 7500 	add.w	r5, r5, #512	; 0x200
  400f60:	4628      	mov	r0, r5
  400f62:	4621      	mov	r1, r4
  400f64:	220a      	movs	r2, #10
  400f66:	47d0      	blx	sl
	/* Interrupt on falling edge */
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  400f68:	4b41      	ldr	r3, [pc, #260]	; (401070 <main+0x234>)
  400f6a:	9300      	str	r3, [sp, #0]
  400f6c:	4628      	mov	r0, r5
  400f6e:	210d      	movs	r1, #13
  400f70:	4622      	mov	r2, r4
  400f72:	2359      	movs	r3, #89	; 0x59
  400f74:	47c8      	blx	r9
  400f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400f7a:	f8c8 3000 	str.w	r3, [r8]
			PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
	NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO,
  400f7e:	4628      	mov	r0, r5
  400f80:	210d      	movs	r1, #13
  400f82:	2200      	movs	r2, #0
  400f84:	47b8      	blx	r7
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  400f86:	4628      	mov	r0, r5
  400f88:	4621      	mov	r1, r4
  400f8a:	47b0      	blx	r6
	puts("Configure buttons with debouncing.\r");
//! [main_step_btn_init]
	configure_buttons();
//! [main_step_btn_init]

	printf("Press %s to Start/Stop the %s blinking.\r\n",
  400f8c:	4d39      	ldr	r5, [pc, #228]	; (401074 <main+0x238>)
  400f8e:	4628      	mov	r0, r5
  400f90:	4939      	ldr	r1, [pc, #228]	; (401078 <main+0x23c>)
  400f92:	4a3a      	ldr	r2, [pc, #232]	; (40107c <main+0x240>)
  400f94:	4c3a      	ldr	r4, [pc, #232]	; (401080 <main+0x244>)
  400f96:	47a0      	blx	r4
			PUSHBUTTON_1_NAME, LED_0_NAME);

#ifndef BOARD_NO_PUSHBUTTON_2
	printf("Press %s to Start/Stop the %s blinking.\r\n",
  400f98:	4628      	mov	r0, r5
  400f9a:	493a      	ldr	r1, [pc, #232]	; (401084 <main+0x248>)
  400f9c:	4a3a      	ldr	r2, [pc, #232]	; (401088 <main+0x24c>)
  400f9e:	47a0      	blx	r4
// [main_ms_delay]
static void mdelay(uint32_t ul_dly_ticks)
{
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
  400fa0:	4c3a      	ldr	r4, [pc, #232]	; (40108c <main+0x250>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400fa2:	4d3b      	ldr	r5, [pc, #236]	; (401090 <main+0x254>)
  400fa4:	e005      	b.n	400fb2 <main+0x176>
  400fa6:	6822      	ldr	r2, [r4, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  400fa8:	6823      	ldr	r3, [r4, #0]
  400faa:	1a9b      	subs	r3, r3, r2
  400fac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
  400fb0:	d3fa      	bcc.n	400fa8 <main+0x16c>
#endif

//! [main_step_loop]
	while (1) {
		/* Wait for LED to be active */
		while (!g_b_led0_active)
  400fb2:	4b38      	ldr	r3, [pc, #224]	; (401094 <main+0x258>)
  400fb4:	781b      	ldrb	r3, [r3, #0]
  400fb6:	f013 0fff 	tst.w	r3, #255	; 0xff
  400fba:	d0f4      	beq.n	400fa6 <main+0x16a>
			mdelay(300);
		}
		;

		/* Toggle LED state if active */
		if (g_b_led0_active) {
  400fbc:	4b35      	ldr	r3, [pc, #212]	; (401094 <main+0x258>)
  400fbe:	781b      	ldrb	r3, [r3, #0]
  400fc0:	f013 0fff 	tst.w	r3, #255	; 0xff
  400fc4:	d00a      	beq.n	400fdc <main+0x1a0>
  400fc6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400fc8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
		port->PIO_CODR = mask;
  400fcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400fd0:	bf14      	ite	ne
  400fd2:	636b      	strne	r3, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400fd4:	632b      	streq	r3, [r5, #48]	; 0x30
			ioport_toggle_pin_level(LED0_GPIO);
			printf("1 ");
  400fd6:	4830      	ldr	r0, [pc, #192]	; (401098 <main+0x25c>)
  400fd8:	4b29      	ldr	r3, [pc, #164]	; (401080 <main+0x244>)
  400fda:	4798      	blx	r3
// [main_ms_delay]
static void mdelay(uint32_t ul_dly_ticks)
{
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
  400fdc:	6821      	ldr	r1, [r4, #0]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
  400fde:	f640 32b7 	movw	r2, #2999	; 0xbb7
  400fe2:	6823      	ldr	r3, [r4, #0]
  400fe4:	1a5b      	subs	r3, r3, r1
  400fe6:	4293      	cmp	r3, r2
  400fe8:	d9fb      	bls.n	400fe2 <main+0x1a6>
  400fea:	e7e2      	b.n	400fb2 <main+0x176>
  400fec:	00400129 	.word	0x00400129
  400ff0:	00400219 	.word	0x00400219
  400ff4:	0040081d 	.word	0x0040081d
  400ff8:	400e0600 	.word	0x400e0600
  400ffc:	20000944 	.word	0x20000944
  401000:	00400ce5 	.word	0x00400ce5
  401004:	20000940 	.word	0x20000940
  401008:	00400c5d 	.word	0x00400c5d
  40100c:	2000093c 	.word	0x2000093c
  401010:	07270e00 	.word	0x07270e00
  401014:	00400929 	.word	0x00400929
  401018:	20000430 	.word	0x20000430
  40101c:	00401225 	.word	0x00401225
  401020:	004040d0 	.word	0x004040d0
  401024:	00401215 	.word	0x00401215
  401028:	00404128 	.word	0x00404128
  40102c:	e000e010 	.word	0xe000e010
  401030:	0001d4bf 	.word	0x0001d4bf
  401034:	e000ed00 	.word	0xe000ed00
  401038:	00404158 	.word	0x00404158
  40103c:	004008b5 	.word	0x004008b5
  401040:	40010000 	.word	0x40010000
  401044:	00400871 	.word	0x00400871
  401048:	0040089d 	.word	0x0040089d
  40104c:	e000e100 	.word	0xe000e100
  401050:	004008a5 	.word	0x004008a5
  401054:	20000005 	.word	0x20000005
  401058:	0040088d 	.word	0x0040088d
  40105c:	00404168 	.word	0x00404168
  401060:	400e1000 	.word	0x400e1000
  401064:	00400dbd 	.word	0x00400dbd
  401068:	004006b1 	.word	0x004006b1
  40106c:	004003b9 	.word	0x004003b9
  401070:	00400d65 	.word	0x00400d65
  401074:	0040418c 	.word	0x0040418c
  401078:	004041b8 	.word	0x004041b8
  40107c:	004041c0 	.word	0x004041c0
  401080:	004010f5 	.word	0x004010f5
  401084:	004041cc 	.word	0x004041cc
  401088:	004041d4 	.word	0x004041d4
  40108c:	20000904 	.word	0x20000904
  401090:	400e0e00 	.word	0x400e0e00
  401094:	20000004 	.word	0x20000004
  401098:	004041e4 	.word	0x004041e4
  40109c:	0040027d 	.word	0x0040027d
  4010a0:	00400635 	.word	0x00400635

004010a4 <__libc_init_array>:
  4010a4:	b570      	push	{r4, r5, r6, lr}
  4010a6:	4e0f      	ldr	r6, [pc, #60]	; (4010e4 <__libc_init_array+0x40>)
  4010a8:	4d0f      	ldr	r5, [pc, #60]	; (4010e8 <__libc_init_array+0x44>)
  4010aa:	1b76      	subs	r6, r6, r5
  4010ac:	10b6      	asrs	r6, r6, #2
  4010ae:	bf18      	it	ne
  4010b0:	2400      	movne	r4, #0
  4010b2:	d005      	beq.n	4010c0 <__libc_init_array+0x1c>
  4010b4:	3401      	adds	r4, #1
  4010b6:	f855 3b04 	ldr.w	r3, [r5], #4
  4010ba:	4798      	blx	r3
  4010bc:	42a6      	cmp	r6, r4
  4010be:	d1f9      	bne.n	4010b4 <__libc_init_array+0x10>
  4010c0:	4e0a      	ldr	r6, [pc, #40]	; (4010ec <__libc_init_array+0x48>)
  4010c2:	4d0b      	ldr	r5, [pc, #44]	; (4010f0 <__libc_init_array+0x4c>)
  4010c4:	1b76      	subs	r6, r6, r5
  4010c6:	f003 f8bb 	bl	404240 <_init>
  4010ca:	10b6      	asrs	r6, r6, #2
  4010cc:	bf18      	it	ne
  4010ce:	2400      	movne	r4, #0
  4010d0:	d006      	beq.n	4010e0 <__libc_init_array+0x3c>
  4010d2:	3401      	adds	r4, #1
  4010d4:	f855 3b04 	ldr.w	r3, [r5], #4
  4010d8:	4798      	blx	r3
  4010da:	42a6      	cmp	r6, r4
  4010dc:	d1f9      	bne.n	4010d2 <__libc_init_array+0x2e>
  4010de:	bd70      	pop	{r4, r5, r6, pc}
  4010e0:	bd70      	pop	{r4, r5, r6, pc}
  4010e2:	bf00      	nop
  4010e4:	0040424c 	.word	0x0040424c
  4010e8:	0040424c 	.word	0x0040424c
  4010ec:	00404254 	.word	0x00404254
  4010f0:	0040424c 	.word	0x0040424c

004010f4 <iprintf>:
  4010f4:	b40f      	push	{r0, r1, r2, r3}
  4010f6:	b500      	push	{lr}
  4010f8:	4907      	ldr	r1, [pc, #28]	; (401118 <iprintf+0x24>)
  4010fa:	b083      	sub	sp, #12
  4010fc:	ab04      	add	r3, sp, #16
  4010fe:	6808      	ldr	r0, [r1, #0]
  401100:	f853 2b04 	ldr.w	r2, [r3], #4
  401104:	6881      	ldr	r1, [r0, #8]
  401106:	9301      	str	r3, [sp, #4]
  401108:	f000 f97a 	bl	401400 <_vfiprintf_r>
  40110c:	b003      	add	sp, #12
  40110e:	f85d eb04 	ldr.w	lr, [sp], #4
  401112:	b004      	add	sp, #16
  401114:	4770      	bx	lr
  401116:	bf00      	nop
  401118:	20000430 	.word	0x20000430

0040111c <memset>:
  40111c:	b470      	push	{r4, r5, r6}
  40111e:	0784      	lsls	r4, r0, #30
  401120:	d046      	beq.n	4011b0 <memset+0x94>
  401122:	1e54      	subs	r4, r2, #1
  401124:	2a00      	cmp	r2, #0
  401126:	d041      	beq.n	4011ac <memset+0x90>
  401128:	b2cd      	uxtb	r5, r1
  40112a:	4603      	mov	r3, r0
  40112c:	e002      	b.n	401134 <memset+0x18>
  40112e:	1e62      	subs	r2, r4, #1
  401130:	b3e4      	cbz	r4, 4011ac <memset+0x90>
  401132:	4614      	mov	r4, r2
  401134:	f803 5b01 	strb.w	r5, [r3], #1
  401138:	079a      	lsls	r2, r3, #30
  40113a:	d1f8      	bne.n	40112e <memset+0x12>
  40113c:	2c03      	cmp	r4, #3
  40113e:	d92e      	bls.n	40119e <memset+0x82>
  401140:	b2cd      	uxtb	r5, r1
  401142:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401146:	2c0f      	cmp	r4, #15
  401148:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40114c:	d919      	bls.n	401182 <memset+0x66>
  40114e:	f103 0210 	add.w	r2, r3, #16
  401152:	4626      	mov	r6, r4
  401154:	3e10      	subs	r6, #16
  401156:	2e0f      	cmp	r6, #15
  401158:	f842 5c10 	str.w	r5, [r2, #-16]
  40115c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401160:	f842 5c08 	str.w	r5, [r2, #-8]
  401164:	f842 5c04 	str.w	r5, [r2, #-4]
  401168:	f102 0210 	add.w	r2, r2, #16
  40116c:	d8f2      	bhi.n	401154 <memset+0x38>
  40116e:	f1a4 0210 	sub.w	r2, r4, #16
  401172:	f022 020f 	bic.w	r2, r2, #15
  401176:	f004 040f 	and.w	r4, r4, #15
  40117a:	3210      	adds	r2, #16
  40117c:	2c03      	cmp	r4, #3
  40117e:	4413      	add	r3, r2
  401180:	d90d      	bls.n	40119e <memset+0x82>
  401182:	461e      	mov	r6, r3
  401184:	4622      	mov	r2, r4
  401186:	3a04      	subs	r2, #4
  401188:	2a03      	cmp	r2, #3
  40118a:	f846 5b04 	str.w	r5, [r6], #4
  40118e:	d8fa      	bhi.n	401186 <memset+0x6a>
  401190:	1f22      	subs	r2, r4, #4
  401192:	f022 0203 	bic.w	r2, r2, #3
  401196:	3204      	adds	r2, #4
  401198:	4413      	add	r3, r2
  40119a:	f004 0403 	and.w	r4, r4, #3
  40119e:	b12c      	cbz	r4, 4011ac <memset+0x90>
  4011a0:	b2c9      	uxtb	r1, r1
  4011a2:	441c      	add	r4, r3
  4011a4:	f803 1b01 	strb.w	r1, [r3], #1
  4011a8:	42a3      	cmp	r3, r4
  4011aa:	d1fb      	bne.n	4011a4 <memset+0x88>
  4011ac:	bc70      	pop	{r4, r5, r6}
  4011ae:	4770      	bx	lr
  4011b0:	4614      	mov	r4, r2
  4011b2:	4603      	mov	r3, r0
  4011b4:	e7c2      	b.n	40113c <memset+0x20>
  4011b6:	bf00      	nop

004011b8 <_puts_r>:
  4011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011ba:	4604      	mov	r4, r0
  4011bc:	b089      	sub	sp, #36	; 0x24
  4011be:	4608      	mov	r0, r1
  4011c0:	460d      	mov	r5, r1
  4011c2:	f000 f8b3 	bl	40132c <strlen>
  4011c6:	68a3      	ldr	r3, [r4, #8]
  4011c8:	4f11      	ldr	r7, [pc, #68]	; (401210 <_puts_r+0x58>)
  4011ca:	899a      	ldrh	r2, [r3, #12]
  4011cc:	9504      	str	r5, [sp, #16]
  4011ce:	2102      	movs	r1, #2
  4011d0:	f100 0e01 	add.w	lr, r0, #1
  4011d4:	2601      	movs	r6, #1
  4011d6:	ad04      	add	r5, sp, #16
  4011d8:	9102      	str	r1, [sp, #8]
  4011da:	0491      	lsls	r1, r2, #18
  4011dc:	9005      	str	r0, [sp, #20]
  4011de:	f8cd e00c 	str.w	lr, [sp, #12]
  4011e2:	9706      	str	r7, [sp, #24]
  4011e4:	9607      	str	r6, [sp, #28]
  4011e6:	9501      	str	r5, [sp, #4]
  4011e8:	d406      	bmi.n	4011f8 <_puts_r+0x40>
  4011ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
  4011ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4011f0:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4011f4:	819a      	strh	r2, [r3, #12]
  4011f6:	6659      	str	r1, [r3, #100]	; 0x64
  4011f8:	4620      	mov	r0, r4
  4011fa:	4619      	mov	r1, r3
  4011fc:	aa01      	add	r2, sp, #4
  4011fe:	f001 faa3 	bl	402748 <__sfvwrite_r>
  401202:	2800      	cmp	r0, #0
  401204:	bf14      	ite	ne
  401206:	f04f 30ff 	movne.w	r0, #4294967295
  40120a:	200a      	moveq	r0, #10
  40120c:	b009      	add	sp, #36	; 0x24
  40120e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401210:	004041b4 	.word	0x004041b4

00401214 <puts>:
  401214:	4b02      	ldr	r3, [pc, #8]	; (401220 <puts+0xc>)
  401216:	4601      	mov	r1, r0
  401218:	6818      	ldr	r0, [r3, #0]
  40121a:	f7ff bfcd 	b.w	4011b8 <_puts_r>
  40121e:	bf00      	nop
  401220:	20000430 	.word	0x20000430

00401224 <setbuf>:
  401224:	2900      	cmp	r1, #0
  401226:	bf0c      	ite	eq
  401228:	2202      	moveq	r2, #2
  40122a:	2200      	movne	r2, #0
  40122c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401230:	f000 b800 	b.w	401234 <setvbuf>

00401234 <setvbuf>:
  401234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401238:	4c3a      	ldr	r4, [pc, #232]	; (401324 <setvbuf+0xf0>)
  40123a:	6826      	ldr	r6, [r4, #0]
  40123c:	460d      	mov	r5, r1
  40123e:	4604      	mov	r4, r0
  401240:	4690      	mov	r8, r2
  401242:	461f      	mov	r7, r3
  401244:	b116      	cbz	r6, 40124c <setvbuf+0x18>
  401246:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  401248:	2b00      	cmp	r3, #0
  40124a:	d03c      	beq.n	4012c6 <setvbuf+0x92>
  40124c:	f1b8 0f02 	cmp.w	r8, #2
  401250:	d82f      	bhi.n	4012b2 <setvbuf+0x7e>
  401252:	2f00      	cmp	r7, #0
  401254:	db2d      	blt.n	4012b2 <setvbuf+0x7e>
  401256:	4621      	mov	r1, r4
  401258:	4630      	mov	r0, r6
  40125a:	f001 f831 	bl	4022c0 <_fflush_r>
  40125e:	89a1      	ldrh	r1, [r4, #12]
  401260:	2300      	movs	r3, #0
  401262:	6063      	str	r3, [r4, #4]
  401264:	61a3      	str	r3, [r4, #24]
  401266:	060b      	lsls	r3, r1, #24
  401268:	d427      	bmi.n	4012ba <setvbuf+0x86>
  40126a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40126e:	b289      	uxth	r1, r1
  401270:	f1b8 0f02 	cmp.w	r8, #2
  401274:	81a1      	strh	r1, [r4, #12]
  401276:	d02a      	beq.n	4012ce <setvbuf+0x9a>
  401278:	2d00      	cmp	r5, #0
  40127a:	d036      	beq.n	4012ea <setvbuf+0xb6>
  40127c:	f1b8 0f01 	cmp.w	r8, #1
  401280:	d011      	beq.n	4012a6 <setvbuf+0x72>
  401282:	b289      	uxth	r1, r1
  401284:	f001 0008 	and.w	r0, r1, #8
  401288:	4b27      	ldr	r3, [pc, #156]	; (401328 <setvbuf+0xf4>)
  40128a:	63f3      	str	r3, [r6, #60]	; 0x3c
  40128c:	b280      	uxth	r0, r0
  40128e:	6025      	str	r5, [r4, #0]
  401290:	6125      	str	r5, [r4, #16]
  401292:	6167      	str	r7, [r4, #20]
  401294:	b178      	cbz	r0, 4012b6 <setvbuf+0x82>
  401296:	f011 0f03 	tst.w	r1, #3
  40129a:	bf18      	it	ne
  40129c:	2700      	movne	r7, #0
  40129e:	60a7      	str	r7, [r4, #8]
  4012a0:	2000      	movs	r0, #0
  4012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012a6:	f041 0101 	orr.w	r1, r1, #1
  4012aa:	427b      	negs	r3, r7
  4012ac:	81a1      	strh	r1, [r4, #12]
  4012ae:	61a3      	str	r3, [r4, #24]
  4012b0:	e7e7      	b.n	401282 <setvbuf+0x4e>
  4012b2:	f04f 30ff 	mov.w	r0, #4294967295
  4012b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012ba:	6921      	ldr	r1, [r4, #16]
  4012bc:	4630      	mov	r0, r6
  4012be:	f001 f96b 	bl	402598 <_free_r>
  4012c2:	89a1      	ldrh	r1, [r4, #12]
  4012c4:	e7d1      	b.n	40126a <setvbuf+0x36>
  4012c6:	4630      	mov	r0, r6
  4012c8:	f001 f88e 	bl	4023e8 <__sinit>
  4012cc:	e7be      	b.n	40124c <setvbuf+0x18>
  4012ce:	2000      	movs	r0, #0
  4012d0:	f104 0343 	add.w	r3, r4, #67	; 0x43
  4012d4:	f041 0102 	orr.w	r1, r1, #2
  4012d8:	2500      	movs	r5, #0
  4012da:	2201      	movs	r2, #1
  4012dc:	81a1      	strh	r1, [r4, #12]
  4012de:	60a5      	str	r5, [r4, #8]
  4012e0:	6023      	str	r3, [r4, #0]
  4012e2:	6123      	str	r3, [r4, #16]
  4012e4:	6162      	str	r2, [r4, #20]
  4012e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012ea:	2f00      	cmp	r7, #0
  4012ec:	bf08      	it	eq
  4012ee:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4012f2:	4638      	mov	r0, r7
  4012f4:	f001 fc58 	bl	402ba8 <malloc>
  4012f8:	4605      	mov	r5, r0
  4012fa:	b128      	cbz	r0, 401308 <setvbuf+0xd4>
  4012fc:	89a1      	ldrh	r1, [r4, #12]
  4012fe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401302:	b289      	uxth	r1, r1
  401304:	81a1      	strh	r1, [r4, #12]
  401306:	e7b9      	b.n	40127c <setvbuf+0x48>
  401308:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40130c:	f001 fc4c 	bl	402ba8 <malloc>
  401310:	4605      	mov	r5, r0
  401312:	b918      	cbnz	r0, 40131c <setvbuf+0xe8>
  401314:	89a1      	ldrh	r1, [r4, #12]
  401316:	f04f 30ff 	mov.w	r0, #4294967295
  40131a:	e7d9      	b.n	4012d0 <setvbuf+0x9c>
  40131c:	f44f 6780 	mov.w	r7, #1024	; 0x400
  401320:	e7ec      	b.n	4012fc <setvbuf+0xc8>
  401322:	bf00      	nop
  401324:	20000430 	.word	0x20000430
  401328:	004022ed 	.word	0x004022ed

0040132c <strlen>:
  40132c:	f020 0103 	bic.w	r1, r0, #3
  401330:	f010 0003 	ands.w	r0, r0, #3
  401334:	f1c0 0000 	rsb	r0, r0, #0
  401338:	f851 3b04 	ldr.w	r3, [r1], #4
  40133c:	f100 0c04 	add.w	ip, r0, #4
  401340:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  401344:	f06f 0200 	mvn.w	r2, #0
  401348:	bf1c      	itt	ne
  40134a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40134e:	4313      	orrne	r3, r2
  401350:	f04f 0c01 	mov.w	ip, #1
  401354:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  401358:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40135c:	eba3 020c 	sub.w	r2, r3, ip
  401360:	ea22 0203 	bic.w	r2, r2, r3
  401364:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  401368:	bf04      	itt	eq
  40136a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40136e:	3004      	addeq	r0, #4
  401370:	d0f4      	beq.n	40135c <strlen+0x30>
  401372:	f1c2 0100 	rsb	r1, r2, #0
  401376:	ea02 0201 	and.w	r2, r2, r1
  40137a:	fab2 f282 	clz	r2, r2
  40137e:	f1c2 021f 	rsb	r2, r2, #31
  401382:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  401386:	4770      	bx	lr

00401388 <__sprint_r.part.0>:
  401388:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40138a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40138e:	049c      	lsls	r4, r3, #18
  401390:	460f      	mov	r7, r1
  401392:	4692      	mov	sl, r2
  401394:	d52b      	bpl.n	4013ee <__sprint_r.part.0+0x66>
  401396:	6893      	ldr	r3, [r2, #8]
  401398:	6812      	ldr	r2, [r2, #0]
  40139a:	b333      	cbz	r3, 4013ea <__sprint_r.part.0+0x62>
  40139c:	4680      	mov	r8, r0
  40139e:	f102 0908 	add.w	r9, r2, #8
  4013a2:	e919 0060 	ldmdb	r9, {r5, r6}
  4013a6:	08b6      	lsrs	r6, r6, #2
  4013a8:	d017      	beq.n	4013da <__sprint_r.part.0+0x52>
  4013aa:	3d04      	subs	r5, #4
  4013ac:	2400      	movs	r4, #0
  4013ae:	e001      	b.n	4013b4 <__sprint_r.part.0+0x2c>
  4013b0:	42a6      	cmp	r6, r4
  4013b2:	d010      	beq.n	4013d6 <__sprint_r.part.0+0x4e>
  4013b4:	4640      	mov	r0, r8
  4013b6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4013ba:	463a      	mov	r2, r7
  4013bc:	f001 f88c 	bl	4024d8 <_fputwc_r>
  4013c0:	1c43      	adds	r3, r0, #1
  4013c2:	f104 0401 	add.w	r4, r4, #1
  4013c6:	d1f3      	bne.n	4013b0 <__sprint_r.part.0+0x28>
  4013c8:	2300      	movs	r3, #0
  4013ca:	f8ca 3008 	str.w	r3, [sl, #8]
  4013ce:	f8ca 3004 	str.w	r3, [sl, #4]
  4013d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013d6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4013da:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4013de:	f8ca 3008 	str.w	r3, [sl, #8]
  4013e2:	f109 0908 	add.w	r9, r9, #8
  4013e6:	2b00      	cmp	r3, #0
  4013e8:	d1db      	bne.n	4013a2 <__sprint_r.part.0+0x1a>
  4013ea:	2000      	movs	r0, #0
  4013ec:	e7ec      	b.n	4013c8 <__sprint_r.part.0+0x40>
  4013ee:	f001 f9ab 	bl	402748 <__sfvwrite_r>
  4013f2:	2300      	movs	r3, #0
  4013f4:	f8ca 3008 	str.w	r3, [sl, #8]
  4013f8:	f8ca 3004 	str.w	r3, [sl, #4]
  4013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401400 <_vfiprintf_r>:
  401400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401404:	b0ab      	sub	sp, #172	; 0xac
  401406:	461c      	mov	r4, r3
  401408:	9100      	str	r1, [sp, #0]
  40140a:	4693      	mov	fp, r2
  40140c:	9304      	str	r3, [sp, #16]
  40140e:	9001      	str	r0, [sp, #4]
  401410:	b118      	cbz	r0, 40141a <_vfiprintf_r+0x1a>
  401412:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401414:	2b00      	cmp	r3, #0
  401416:	f000 80e3 	beq.w	4015e0 <_vfiprintf_r+0x1e0>
  40141a:	9b00      	ldr	r3, [sp, #0]
  40141c:	8999      	ldrh	r1, [r3, #12]
  40141e:	b28a      	uxth	r2, r1
  401420:	0490      	lsls	r0, r2, #18
  401422:	d408      	bmi.n	401436 <_vfiprintf_r+0x36>
  401424:	4618      	mov	r0, r3
  401426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  401428:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  40142c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401430:	8182      	strh	r2, [r0, #12]
  401432:	6643      	str	r3, [r0, #100]	; 0x64
  401434:	b292      	uxth	r2, r2
  401436:	0711      	lsls	r1, r2, #28
  401438:	f140 80b2 	bpl.w	4015a0 <_vfiprintf_r+0x1a0>
  40143c:	9b00      	ldr	r3, [sp, #0]
  40143e:	691b      	ldr	r3, [r3, #16]
  401440:	2b00      	cmp	r3, #0
  401442:	f000 80ad 	beq.w	4015a0 <_vfiprintf_r+0x1a0>
  401446:	f002 021a 	and.w	r2, r2, #26
  40144a:	2a0a      	cmp	r2, #10
  40144c:	f000 80b4 	beq.w	4015b8 <_vfiprintf_r+0x1b8>
  401450:	2300      	movs	r3, #0
  401452:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  401456:	9309      	str	r3, [sp, #36]	; 0x24
  401458:	930f      	str	r3, [sp, #60]	; 0x3c
  40145a:	930e      	str	r3, [sp, #56]	; 0x38
  40145c:	9302      	str	r3, [sp, #8]
  40145e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  401462:	4654      	mov	r4, sl
  401464:	f89b 3000 	ldrb.w	r3, [fp]
  401468:	2b00      	cmp	r3, #0
  40146a:	f000 84a3 	beq.w	401db4 <_vfiprintf_r+0x9b4>
  40146e:	2b25      	cmp	r3, #37	; 0x25
  401470:	f000 84a0 	beq.w	401db4 <_vfiprintf_r+0x9b4>
  401474:	465a      	mov	r2, fp
  401476:	e001      	b.n	40147c <_vfiprintf_r+0x7c>
  401478:	2b25      	cmp	r3, #37	; 0x25
  40147a:	d003      	beq.n	401484 <_vfiprintf_r+0x84>
  40147c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  401480:	2b00      	cmp	r3, #0
  401482:	d1f9      	bne.n	401478 <_vfiprintf_r+0x78>
  401484:	ebcb 0602 	rsb	r6, fp, r2
  401488:	4615      	mov	r5, r2
  40148a:	b196      	cbz	r6, 4014b2 <_vfiprintf_r+0xb2>
  40148c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40148e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401490:	f8c4 b000 	str.w	fp, [r4]
  401494:	3301      	adds	r3, #1
  401496:	4432      	add	r2, r6
  401498:	2b07      	cmp	r3, #7
  40149a:	6066      	str	r6, [r4, #4]
  40149c:	920f      	str	r2, [sp, #60]	; 0x3c
  40149e:	930e      	str	r3, [sp, #56]	; 0x38
  4014a0:	dd79      	ble.n	401596 <_vfiprintf_r+0x196>
  4014a2:	2a00      	cmp	r2, #0
  4014a4:	f040 84af 	bne.w	401e06 <_vfiprintf_r+0xa06>
  4014a8:	9b02      	ldr	r3, [sp, #8]
  4014aa:	920e      	str	r2, [sp, #56]	; 0x38
  4014ac:	4433      	add	r3, r6
  4014ae:	4654      	mov	r4, sl
  4014b0:	9302      	str	r3, [sp, #8]
  4014b2:	782b      	ldrb	r3, [r5, #0]
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	f000 8360 	beq.w	401b7a <_vfiprintf_r+0x77a>
  4014ba:	2100      	movs	r1, #0
  4014bc:	f04f 0300 	mov.w	r3, #0
  4014c0:	f04f 3cff 	mov.w	ip, #4294967295
  4014c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4014c8:	1c68      	adds	r0, r5, #1
  4014ca:	786b      	ldrb	r3, [r5, #1]
  4014cc:	4688      	mov	r8, r1
  4014ce:	460d      	mov	r5, r1
  4014d0:	4666      	mov	r6, ip
  4014d2:	f100 0b01 	add.w	fp, r0, #1
  4014d6:	f1a3 0220 	sub.w	r2, r3, #32
  4014da:	2a58      	cmp	r2, #88	; 0x58
  4014dc:	f200 82ab 	bhi.w	401a36 <_vfiprintf_r+0x636>
  4014e0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4014e4:	02a9029b 	.word	0x02a9029b
  4014e8:	02a302a9 	.word	0x02a302a9
  4014ec:	02a902a9 	.word	0x02a902a9
  4014f0:	02a902a9 	.word	0x02a902a9
  4014f4:	02a902a9 	.word	0x02a902a9
  4014f8:	02620255 	.word	0x02620255
  4014fc:	010d02a9 	.word	0x010d02a9
  401500:	02a9026e 	.word	0x02a9026e
  401504:	012f0129 	.word	0x012f0129
  401508:	012f012f 	.word	0x012f012f
  40150c:	012f012f 	.word	0x012f012f
  401510:	012f012f 	.word	0x012f012f
  401514:	012f012f 	.word	0x012f012f
  401518:	02a902a9 	.word	0x02a902a9
  40151c:	02a902a9 	.word	0x02a902a9
  401520:	02a902a9 	.word	0x02a902a9
  401524:	02a902a9 	.word	0x02a902a9
  401528:	02a902a9 	.word	0x02a902a9
  40152c:	02a9013d 	.word	0x02a9013d
  401530:	02a902a9 	.word	0x02a902a9
  401534:	02a902a9 	.word	0x02a902a9
  401538:	02a902a9 	.word	0x02a902a9
  40153c:	02a902a9 	.word	0x02a902a9
  401540:	017402a9 	.word	0x017402a9
  401544:	02a902a9 	.word	0x02a902a9
  401548:	02a902a9 	.word	0x02a902a9
  40154c:	018b02a9 	.word	0x018b02a9
  401550:	02a902a9 	.word	0x02a902a9
  401554:	02a901a3 	.word	0x02a901a3
  401558:	02a902a9 	.word	0x02a902a9
  40155c:	02a902a9 	.word	0x02a902a9
  401560:	02a902a9 	.word	0x02a902a9
  401564:	02a902a9 	.word	0x02a902a9
  401568:	01c702a9 	.word	0x01c702a9
  40156c:	02a901da 	.word	0x02a901da
  401570:	02a902a9 	.word	0x02a902a9
  401574:	01da0123 	.word	0x01da0123
  401578:	02a902a9 	.word	0x02a902a9
  40157c:	02a9024c 	.word	0x02a9024c
  401580:	0113028a 	.word	0x0113028a
  401584:	020701f3 	.word	0x020701f3
  401588:	020d02a9 	.word	0x020d02a9
  40158c:	008102a9 	.word	0x008102a9
  401590:	02a902a9 	.word	0x02a902a9
  401594:	0233      	.short	0x0233
  401596:	3408      	adds	r4, #8
  401598:	9b02      	ldr	r3, [sp, #8]
  40159a:	4433      	add	r3, r6
  40159c:	9302      	str	r3, [sp, #8]
  40159e:	e788      	b.n	4014b2 <_vfiprintf_r+0xb2>
  4015a0:	9801      	ldr	r0, [sp, #4]
  4015a2:	9900      	ldr	r1, [sp, #0]
  4015a4:	f000 fd70 	bl	402088 <__swsetup_r>
  4015a8:	b9a8      	cbnz	r0, 4015d6 <_vfiprintf_r+0x1d6>
  4015aa:	9b00      	ldr	r3, [sp, #0]
  4015ac:	899a      	ldrh	r2, [r3, #12]
  4015ae:	f002 021a 	and.w	r2, r2, #26
  4015b2:	2a0a      	cmp	r2, #10
  4015b4:	f47f af4c 	bne.w	401450 <_vfiprintf_r+0x50>
  4015b8:	9b00      	ldr	r3, [sp, #0]
  4015ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  4015be:	2b00      	cmp	r3, #0
  4015c0:	f6ff af46 	blt.w	401450 <_vfiprintf_r+0x50>
  4015c4:	9801      	ldr	r0, [sp, #4]
  4015c6:	9900      	ldr	r1, [sp, #0]
  4015c8:	465a      	mov	r2, fp
  4015ca:	4623      	mov	r3, r4
  4015cc:	f000 fd20 	bl	402010 <__sbprintf>
  4015d0:	b02b      	add	sp, #172	; 0xac
  4015d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015d6:	f04f 30ff 	mov.w	r0, #4294967295
  4015da:	b02b      	add	sp, #172	; 0xac
  4015dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015e0:	f000 ff02 	bl	4023e8 <__sinit>
  4015e4:	e719      	b.n	40141a <_vfiprintf_r+0x1a>
  4015e6:	f018 0f20 	tst.w	r8, #32
  4015ea:	9503      	str	r5, [sp, #12]
  4015ec:	46b4      	mov	ip, r6
  4015ee:	f000 810c 	beq.w	40180a <_vfiprintf_r+0x40a>
  4015f2:	9b04      	ldr	r3, [sp, #16]
  4015f4:	3307      	adds	r3, #7
  4015f6:	f023 0307 	bic.w	r3, r3, #7
  4015fa:	f103 0208 	add.w	r2, r3, #8
  4015fe:	e9d3 6700 	ldrd	r6, r7, [r3]
  401602:	9204      	str	r2, [sp, #16]
  401604:	2301      	movs	r3, #1
  401606:	f04f 0200 	mov.w	r2, #0
  40160a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40160e:	46e1      	mov	r9, ip
  401610:	2500      	movs	r5, #0
  401612:	f1bc 0f00 	cmp.w	ip, #0
  401616:	bfa8      	it	ge
  401618:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40161c:	ea56 0207 	orrs.w	r2, r6, r7
  401620:	f040 80c4 	bne.w	4017ac <_vfiprintf_r+0x3ac>
  401624:	f1bc 0f00 	cmp.w	ip, #0
  401628:	f000 8381 	beq.w	401d2e <_vfiprintf_r+0x92e>
  40162c:	2b01      	cmp	r3, #1
  40162e:	f000 80c5 	beq.w	4017bc <_vfiprintf_r+0x3bc>
  401632:	2b02      	cmp	r3, #2
  401634:	f000 8387 	beq.w	401d46 <_vfiprintf_r+0x946>
  401638:	4651      	mov	r1, sl
  40163a:	08f2      	lsrs	r2, r6, #3
  40163c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401640:	08f8      	lsrs	r0, r7, #3
  401642:	f006 0307 	and.w	r3, r6, #7
  401646:	4607      	mov	r7, r0
  401648:	4616      	mov	r6, r2
  40164a:	3330      	adds	r3, #48	; 0x30
  40164c:	ea56 0207 	orrs.w	r2, r6, r7
  401650:	f801 3d01 	strb.w	r3, [r1, #-1]!
  401654:	d1f1      	bne.n	40163a <_vfiprintf_r+0x23a>
  401656:	f018 0f01 	tst.w	r8, #1
  40165a:	9107      	str	r1, [sp, #28]
  40165c:	f040 83fc 	bne.w	401e58 <_vfiprintf_r+0xa58>
  401660:	ebc1 090a 	rsb	r9, r1, sl
  401664:	45e1      	cmp	r9, ip
  401666:	464e      	mov	r6, r9
  401668:	bfb8      	it	lt
  40166a:	4666      	movlt	r6, ip
  40166c:	b105      	cbz	r5, 401670 <_vfiprintf_r+0x270>
  40166e:	3601      	adds	r6, #1
  401670:	f018 0302 	ands.w	r3, r8, #2
  401674:	9305      	str	r3, [sp, #20]
  401676:	bf18      	it	ne
  401678:	3602      	addne	r6, #2
  40167a:	f018 0384 	ands.w	r3, r8, #132	; 0x84
  40167e:	9306      	str	r3, [sp, #24]
  401680:	f040 81fa 	bne.w	401a78 <_vfiprintf_r+0x678>
  401684:	9b03      	ldr	r3, [sp, #12]
  401686:	1b9d      	subs	r5, r3, r6
  401688:	2d00      	cmp	r5, #0
  40168a:	f340 81f5 	ble.w	401a78 <_vfiprintf_r+0x678>
  40168e:	2d10      	cmp	r5, #16
  401690:	f340 848c 	ble.w	401fac <_vfiprintf_r+0xbac>
  401694:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40169a:	4fc6      	ldr	r7, [pc, #792]	; (4019b4 <_vfiprintf_r+0x5b4>)
  40169c:	4620      	mov	r0, r4
  40169e:	2310      	movs	r3, #16
  4016a0:	4664      	mov	r4, ip
  4016a2:	4671      	mov	r1, lr
  4016a4:	4684      	mov	ip, r0
  4016a6:	e007      	b.n	4016b8 <_vfiprintf_r+0x2b8>
  4016a8:	f101 0e02 	add.w	lr, r1, #2
  4016ac:	f10c 0c08 	add.w	ip, ip, #8
  4016b0:	4601      	mov	r1, r0
  4016b2:	3d10      	subs	r5, #16
  4016b4:	2d10      	cmp	r5, #16
  4016b6:	dd13      	ble.n	4016e0 <_vfiprintf_r+0x2e0>
  4016b8:	1c48      	adds	r0, r1, #1
  4016ba:	3210      	adds	r2, #16
  4016bc:	2807      	cmp	r0, #7
  4016be:	920f      	str	r2, [sp, #60]	; 0x3c
  4016c0:	f8cc 7000 	str.w	r7, [ip]
  4016c4:	f8cc 3004 	str.w	r3, [ip, #4]
  4016c8:	900e      	str	r0, [sp, #56]	; 0x38
  4016ca:	dded      	ble.n	4016a8 <_vfiprintf_r+0x2a8>
  4016cc:	2a00      	cmp	r2, #0
  4016ce:	f040 81c3 	bne.w	401a58 <_vfiprintf_r+0x658>
  4016d2:	3d10      	subs	r5, #16
  4016d4:	2d10      	cmp	r5, #16
  4016d6:	4611      	mov	r1, r2
  4016d8:	f04f 0e01 	mov.w	lr, #1
  4016dc:	46d4      	mov	ip, sl
  4016de:	dceb      	bgt.n	4016b8 <_vfiprintf_r+0x2b8>
  4016e0:	4663      	mov	r3, ip
  4016e2:	4671      	mov	r1, lr
  4016e4:	46a4      	mov	ip, r4
  4016e6:	461c      	mov	r4, r3
  4016e8:	442a      	add	r2, r5
  4016ea:	2907      	cmp	r1, #7
  4016ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4016ee:	6027      	str	r7, [r4, #0]
  4016f0:	6065      	str	r5, [r4, #4]
  4016f2:	910e      	str	r1, [sp, #56]	; 0x38
  4016f4:	f300 8346 	bgt.w	401d84 <_vfiprintf_r+0x984>
  4016f8:	3408      	adds	r4, #8
  4016fa:	1c48      	adds	r0, r1, #1
  4016fc:	e1bf      	b.n	401a7e <_vfiprintf_r+0x67e>
  4016fe:	4658      	mov	r0, fp
  401700:	f048 0804 	orr.w	r8, r8, #4
  401704:	f89b 3000 	ldrb.w	r3, [fp]
  401708:	e6e3      	b.n	4014d2 <_vfiprintf_r+0xd2>
  40170a:	f018 0320 	ands.w	r3, r8, #32
  40170e:	9503      	str	r5, [sp, #12]
  401710:	46b4      	mov	ip, r6
  401712:	d062      	beq.n	4017da <_vfiprintf_r+0x3da>
  401714:	9b04      	ldr	r3, [sp, #16]
  401716:	3307      	adds	r3, #7
  401718:	f023 0307 	bic.w	r3, r3, #7
  40171c:	f103 0208 	add.w	r2, r3, #8
  401720:	e9d3 6700 	ldrd	r6, r7, [r3]
  401724:	9204      	str	r2, [sp, #16]
  401726:	2300      	movs	r3, #0
  401728:	e76d      	b.n	401606 <_vfiprintf_r+0x206>
  40172a:	f048 0840 	orr.w	r8, r8, #64	; 0x40
  40172e:	f89b 3000 	ldrb.w	r3, [fp]
  401732:	4658      	mov	r0, fp
  401734:	e6cd      	b.n	4014d2 <_vfiprintf_r+0xd2>
  401736:	f048 0880 	orr.w	r8, r8, #128	; 0x80
  40173a:	f89b 3000 	ldrb.w	r3, [fp]
  40173e:	4658      	mov	r0, fp
  401740:	e6c7      	b.n	4014d2 <_vfiprintf_r+0xd2>
  401742:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401746:	2500      	movs	r5, #0
  401748:	f81b 3b01 	ldrb.w	r3, [fp], #1
  40174c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401750:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  401754:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  401758:	2a09      	cmp	r2, #9
  40175a:	d9f5      	bls.n	401748 <_vfiprintf_r+0x348>
  40175c:	e6bb      	b.n	4014d6 <_vfiprintf_r+0xd6>
  40175e:	f048 0810 	orr.w	r8, r8, #16
  401762:	f018 0f20 	tst.w	r8, #32
  401766:	9503      	str	r5, [sp, #12]
  401768:	46b4      	mov	ip, r6
  40176a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40176e:	f000 809b 	beq.w	4018a8 <_vfiprintf_r+0x4a8>
  401772:	9904      	ldr	r1, [sp, #16]
  401774:	3107      	adds	r1, #7
  401776:	f021 0107 	bic.w	r1, r1, #7
  40177a:	e9d1 2300 	ldrd	r2, r3, [r1]
  40177e:	3108      	adds	r1, #8
  401780:	9104      	str	r1, [sp, #16]
  401782:	4616      	mov	r6, r2
  401784:	461f      	mov	r7, r3
  401786:	2a00      	cmp	r2, #0
  401788:	f173 0300 	sbcs.w	r3, r3, #0
  40178c:	f2c0 83a6 	blt.w	401edc <_vfiprintf_r+0xadc>
  401790:	f1bc 0f00 	cmp.w	ip, #0
  401794:	bfa8      	it	ge
  401796:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
  40179a:	ea56 0207 	orrs.w	r2, r6, r7
  40179e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  4017a2:	46e1      	mov	r9, ip
  4017a4:	f04f 0301 	mov.w	r3, #1
  4017a8:	f43f af3c 	beq.w	401624 <_vfiprintf_r+0x224>
  4017ac:	2b01      	cmp	r3, #1
  4017ae:	f47f af40 	bne.w	401632 <_vfiprintf_r+0x232>
  4017b2:	2f00      	cmp	r7, #0
  4017b4:	bf08      	it	eq
  4017b6:	2e0a      	cmpeq	r6, #10
  4017b8:	f080 8334 	bcs.w	401e24 <_vfiprintf_r+0xa24>
  4017bc:	ab2a      	add	r3, sp, #168	; 0xa8
  4017be:	3630      	adds	r6, #48	; 0x30
  4017c0:	f803 6d41 	strb.w	r6, [r3, #-65]!
  4017c4:	ebc3 090a 	rsb	r9, r3, sl
  4017c8:	9307      	str	r3, [sp, #28]
  4017ca:	e74b      	b.n	401664 <_vfiprintf_r+0x264>
  4017cc:	f048 0810 	orr.w	r8, r8, #16
  4017d0:	f018 0320 	ands.w	r3, r8, #32
  4017d4:	9503      	str	r5, [sp, #12]
  4017d6:	46b4      	mov	ip, r6
  4017d8:	d19c      	bne.n	401714 <_vfiprintf_r+0x314>
  4017da:	f018 0210 	ands.w	r2, r8, #16
  4017de:	f040 82f7 	bne.w	401dd0 <_vfiprintf_r+0x9d0>
  4017e2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
  4017e6:	f000 82f3 	beq.w	401dd0 <_vfiprintf_r+0x9d0>
  4017ea:	9904      	ldr	r1, [sp, #16]
  4017ec:	4613      	mov	r3, r2
  4017ee:	460a      	mov	r2, r1
  4017f0:	3204      	adds	r2, #4
  4017f2:	880e      	ldrh	r6, [r1, #0]
  4017f4:	9204      	str	r2, [sp, #16]
  4017f6:	2700      	movs	r7, #0
  4017f8:	e705      	b.n	401606 <_vfiprintf_r+0x206>
  4017fa:	f048 0810 	orr.w	r8, r8, #16
  4017fe:	f018 0f20 	tst.w	r8, #32
  401802:	9503      	str	r5, [sp, #12]
  401804:	46b4      	mov	ip, r6
  401806:	f47f aef4 	bne.w	4015f2 <_vfiprintf_r+0x1f2>
  40180a:	9a04      	ldr	r2, [sp, #16]
  40180c:	f018 0f10 	tst.w	r8, #16
  401810:	4613      	mov	r3, r2
  401812:	f040 82e4 	bne.w	401dde <_vfiprintf_r+0x9de>
  401816:	f018 0f40 	tst.w	r8, #64	; 0x40
  40181a:	f000 82e0 	beq.w	401dde <_vfiprintf_r+0x9de>
  40181e:	8816      	ldrh	r6, [r2, #0]
  401820:	3204      	adds	r2, #4
  401822:	2700      	movs	r7, #0
  401824:	2301      	movs	r3, #1
  401826:	9204      	str	r2, [sp, #16]
  401828:	e6ed      	b.n	401606 <_vfiprintf_r+0x206>
  40182a:	4a63      	ldr	r2, [pc, #396]	; (4019b8 <_vfiprintf_r+0x5b8>)
  40182c:	9503      	str	r5, [sp, #12]
  40182e:	f018 0f20 	tst.w	r8, #32
  401832:	46b4      	mov	ip, r6
  401834:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401838:	9209      	str	r2, [sp, #36]	; 0x24
  40183a:	f000 8090 	beq.w	40195e <_vfiprintf_r+0x55e>
  40183e:	9a04      	ldr	r2, [sp, #16]
  401840:	3207      	adds	r2, #7
  401842:	f022 0207 	bic.w	r2, r2, #7
  401846:	e9d2 6700 	ldrd	r6, r7, [r2]
  40184a:	f102 0108 	add.w	r1, r2, #8
  40184e:	9104      	str	r1, [sp, #16]
  401850:	f018 0f01 	tst.w	r8, #1
  401854:	f000 8290 	beq.w	401d78 <_vfiprintf_r+0x978>
  401858:	ea56 0207 	orrs.w	r2, r6, r7
  40185c:	f000 828c 	beq.w	401d78 <_vfiprintf_r+0x978>
  401860:	2230      	movs	r2, #48	; 0x30
  401862:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401866:	f048 0802 	orr.w	r8, r8, #2
  40186a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  40186e:	2302      	movs	r3, #2
  401870:	e6c9      	b.n	401606 <_vfiprintf_r+0x206>
  401872:	9a04      	ldr	r2, [sp, #16]
  401874:	9503      	str	r5, [sp, #12]
  401876:	6813      	ldr	r3, [r2, #0]
  401878:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  40187c:	4613      	mov	r3, r2
  40187e:	3304      	adds	r3, #4
  401880:	2601      	movs	r6, #1
  401882:	f04f 0100 	mov.w	r1, #0
  401886:	9304      	str	r3, [sp, #16]
  401888:	ab10      	add	r3, sp, #64	; 0x40
  40188a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40188e:	46b1      	mov	r9, r6
  401890:	9307      	str	r3, [sp, #28]
  401892:	f04f 0c00 	mov.w	ip, #0
  401896:	e6eb      	b.n	401670 <_vfiprintf_r+0x270>
  401898:	f018 0f20 	tst.w	r8, #32
  40189c:	9503      	str	r5, [sp, #12]
  40189e:	46b4      	mov	ip, r6
  4018a0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  4018a4:	f47f af65 	bne.w	401772 <_vfiprintf_r+0x372>
  4018a8:	f018 0f10 	tst.w	r8, #16
  4018ac:	f040 82a2 	bne.w	401df4 <_vfiprintf_r+0x9f4>
  4018b0:	f018 0f40 	tst.w	r8, #64	; 0x40
  4018b4:	f000 829e 	beq.w	401df4 <_vfiprintf_r+0x9f4>
  4018b8:	9904      	ldr	r1, [sp, #16]
  4018ba:	f9b1 6000 	ldrsh.w	r6, [r1]
  4018be:	3104      	adds	r1, #4
  4018c0:	17f7      	asrs	r7, r6, #31
  4018c2:	4632      	mov	r2, r6
  4018c4:	463b      	mov	r3, r7
  4018c6:	9104      	str	r1, [sp, #16]
  4018c8:	e75d      	b.n	401786 <_vfiprintf_r+0x386>
  4018ca:	9904      	ldr	r1, [sp, #16]
  4018cc:	9503      	str	r5, [sp, #12]
  4018ce:	2330      	movs	r3, #48	; 0x30
  4018d0:	460a      	mov	r2, r1
  4018d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  4018d6:	2378      	movs	r3, #120	; 0x78
  4018d8:	3204      	adds	r2, #4
  4018da:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  4018de:	4b37      	ldr	r3, [pc, #220]	; (4019bc <_vfiprintf_r+0x5bc>)
  4018e0:	9309      	str	r3, [sp, #36]	; 0x24
  4018e2:	46b4      	mov	ip, r6
  4018e4:	f048 0802 	orr.w	r8, r8, #2
  4018e8:	680e      	ldr	r6, [r1, #0]
  4018ea:	9204      	str	r2, [sp, #16]
  4018ec:	2700      	movs	r7, #0
  4018ee:	2302      	movs	r3, #2
  4018f0:	e689      	b.n	401606 <_vfiprintf_r+0x206>
  4018f2:	f048 0820 	orr.w	r8, r8, #32
  4018f6:	f89b 3000 	ldrb.w	r3, [fp]
  4018fa:	4658      	mov	r0, fp
  4018fc:	e5e9      	b.n	4014d2 <_vfiprintf_r+0xd2>
  4018fe:	9a04      	ldr	r2, [sp, #16]
  401900:	9503      	str	r5, [sp, #12]
  401902:	6813      	ldr	r3, [r2, #0]
  401904:	9307      	str	r3, [sp, #28]
  401906:	f04f 0100 	mov.w	r1, #0
  40190a:	46b4      	mov	ip, r6
  40190c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401910:	1d16      	adds	r6, r2, #4
  401912:	2b00      	cmp	r3, #0
  401914:	f000 8350 	beq.w	401fb8 <_vfiprintf_r+0xbb8>
  401918:	f1bc 0f00 	cmp.w	ip, #0
  40191c:	f2c0 832a 	blt.w	401f74 <_vfiprintf_r+0xb74>
  401920:	9d07      	ldr	r5, [sp, #28]
  401922:	f8cd c010 	str.w	ip, [sp, #16]
  401926:	4662      	mov	r2, ip
  401928:	4628      	mov	r0, r5
  40192a:	2100      	movs	r1, #0
  40192c:	f001 fbd6 	bl	4030dc <memchr>
  401930:	f8dd c010 	ldr.w	ip, [sp, #16]
  401934:	2800      	cmp	r0, #0
  401936:	f000 8350 	beq.w	401fda <_vfiprintf_r+0xbda>
  40193a:	ebc5 0900 	rsb	r9, r5, r0
  40193e:	9604      	str	r6, [sp, #16]
  401940:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401944:	f04f 0c00 	mov.w	ip, #0
  401948:	e68c      	b.n	401664 <_vfiprintf_r+0x264>
  40194a:	4a1c      	ldr	r2, [pc, #112]	; (4019bc <_vfiprintf_r+0x5bc>)
  40194c:	9503      	str	r5, [sp, #12]
  40194e:	f018 0f20 	tst.w	r8, #32
  401952:	46b4      	mov	ip, r6
  401954:	9209      	str	r2, [sp, #36]	; 0x24
  401956:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  40195a:	f47f af70 	bne.w	40183e <_vfiprintf_r+0x43e>
  40195e:	9904      	ldr	r1, [sp, #16]
  401960:	f018 0f10 	tst.w	r8, #16
  401964:	460a      	mov	r2, r1
  401966:	f040 8240 	bne.w	401dea <_vfiprintf_r+0x9ea>
  40196a:	f018 0f40 	tst.w	r8, #64	; 0x40
  40196e:	f000 823c 	beq.w	401dea <_vfiprintf_r+0x9ea>
  401972:	3204      	adds	r2, #4
  401974:	880e      	ldrh	r6, [r1, #0]
  401976:	9204      	str	r2, [sp, #16]
  401978:	2700      	movs	r7, #0
  40197a:	e769      	b.n	401850 <_vfiprintf_r+0x450>
  40197c:	f89b 3000 	ldrb.w	r3, [fp]
  401980:	2b6c      	cmp	r3, #108	; 0x6c
  401982:	f000 82ea 	beq.w	401f5a <_vfiprintf_r+0xb5a>
  401986:	f048 0810 	orr.w	r8, r8, #16
  40198a:	4658      	mov	r0, fp
  40198c:	e5a1      	b.n	4014d2 <_vfiprintf_r+0xd2>
  40198e:	9a04      	ldr	r2, [sp, #16]
  401990:	6815      	ldr	r5, [r2, #0]
  401992:	4613      	mov	r3, r2
  401994:	2d00      	cmp	r5, #0
  401996:	f103 0304 	add.w	r3, r3, #4
  40199a:	f2c0 82e6 	blt.w	401f6a <_vfiprintf_r+0xb6a>
  40199e:	9304      	str	r3, [sp, #16]
  4019a0:	f89b 3000 	ldrb.w	r3, [fp]
  4019a4:	4658      	mov	r0, fp
  4019a6:	e594      	b.n	4014d2 <_vfiprintf_r+0xd2>
  4019a8:	f89b 3000 	ldrb.w	r3, [fp]
  4019ac:	4658      	mov	r0, fp
  4019ae:	212b      	movs	r1, #43	; 0x2b
  4019b0:	e58f      	b.n	4014d2 <_vfiprintf_r+0xd2>
  4019b2:	bf00      	nop
  4019b4:	00404230 	.word	0x00404230
  4019b8:	00404200 	.word	0x00404200
  4019bc:	00404214 	.word	0x00404214
  4019c0:	f89b 3000 	ldrb.w	r3, [fp]
  4019c4:	2b2a      	cmp	r3, #42	; 0x2a
  4019c6:	f10b 0001 	add.w	r0, fp, #1
  4019ca:	f000 830f 	beq.w	401fec <_vfiprintf_r+0xbec>
  4019ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019d2:	2a09      	cmp	r2, #9
  4019d4:	4683      	mov	fp, r0
  4019d6:	f04f 0600 	mov.w	r6, #0
  4019da:	f63f ad7c 	bhi.w	4014d6 <_vfiprintf_r+0xd6>
  4019de:	f81b 3b01 	ldrb.w	r3, [fp], #1
  4019e2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4019e6:	eb02 0646 	add.w	r6, r2, r6, lsl #1
  4019ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019ee:	2a09      	cmp	r2, #9
  4019f0:	d9f5      	bls.n	4019de <_vfiprintf_r+0x5de>
  4019f2:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
  4019f6:	e56e      	b.n	4014d6 <_vfiprintf_r+0xd6>
  4019f8:	f018 0f20 	tst.w	r8, #32
  4019fc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401a00:	f000 8283 	beq.w	401f0a <_vfiprintf_r+0xb0a>
  401a04:	9a04      	ldr	r2, [sp, #16]
  401a06:	9902      	ldr	r1, [sp, #8]
  401a08:	6813      	ldr	r3, [r2, #0]
  401a0a:	17cf      	asrs	r7, r1, #31
  401a0c:	4608      	mov	r0, r1
  401a0e:	3204      	adds	r2, #4
  401a10:	4639      	mov	r1, r7
  401a12:	9204      	str	r2, [sp, #16]
  401a14:	e9c3 0100 	strd	r0, r1, [r3]
  401a18:	e524      	b.n	401464 <_vfiprintf_r+0x64>
  401a1a:	4658      	mov	r0, fp
  401a1c:	f89b 3000 	ldrb.w	r3, [fp]
  401a20:	2900      	cmp	r1, #0
  401a22:	f47f ad56 	bne.w	4014d2 <_vfiprintf_r+0xd2>
  401a26:	2120      	movs	r1, #32
  401a28:	e553      	b.n	4014d2 <_vfiprintf_r+0xd2>
  401a2a:	f048 0801 	orr.w	r8, r8, #1
  401a2e:	4658      	mov	r0, fp
  401a30:	f89b 3000 	ldrb.w	r3, [fp]
  401a34:	e54d      	b.n	4014d2 <_vfiprintf_r+0xd2>
  401a36:	9503      	str	r5, [sp, #12]
  401a38:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	f000 809c 	beq.w	401b7a <_vfiprintf_r+0x77a>
  401a42:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401a46:	f04f 0300 	mov.w	r3, #0
  401a4a:	2601      	movs	r6, #1
  401a4c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401a50:	ab10      	add	r3, sp, #64	; 0x40
  401a52:	46b1      	mov	r9, r6
  401a54:	9307      	str	r3, [sp, #28]
  401a56:	e71c      	b.n	401892 <_vfiprintf_r+0x492>
  401a58:	9801      	ldr	r0, [sp, #4]
  401a5a:	9900      	ldr	r1, [sp, #0]
  401a5c:	9308      	str	r3, [sp, #32]
  401a5e:	aa0d      	add	r2, sp, #52	; 0x34
  401a60:	f7ff fc92 	bl	401388 <__sprint_r.part.0>
  401a64:	2800      	cmp	r0, #0
  401a66:	f040 808f 	bne.w	401b88 <_vfiprintf_r+0x788>
  401a6a:	990e      	ldr	r1, [sp, #56]	; 0x38
  401a6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401a6e:	9b08      	ldr	r3, [sp, #32]
  401a70:	f101 0e01 	add.w	lr, r1, #1
  401a74:	46d4      	mov	ip, sl
  401a76:	e61c      	b.n	4016b2 <_vfiprintf_r+0x2b2>
  401a78:	990e      	ldr	r1, [sp, #56]	; 0x38
  401a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401a7c:	1c48      	adds	r0, r1, #1
  401a7e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401a82:	b16b      	cbz	r3, 401aa0 <_vfiprintf_r+0x6a0>
  401a84:	3201      	adds	r2, #1
  401a86:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
  401a8a:	2101      	movs	r1, #1
  401a8c:	2807      	cmp	r0, #7
  401a8e:	920f      	str	r2, [sp, #60]	; 0x3c
  401a90:	900e      	str	r0, [sp, #56]	; 0x38
  401a92:	6023      	str	r3, [r4, #0]
  401a94:	6061      	str	r1, [r4, #4]
  401a96:	f300 8134 	bgt.w	401d02 <_vfiprintf_r+0x902>
  401a9a:	4601      	mov	r1, r0
  401a9c:	3408      	adds	r4, #8
  401a9e:	3001      	adds	r0, #1
  401aa0:	9b05      	ldr	r3, [sp, #20]
  401aa2:	b163      	cbz	r3, 401abe <_vfiprintf_r+0x6be>
  401aa4:	3202      	adds	r2, #2
  401aa6:	a90c      	add	r1, sp, #48	; 0x30
  401aa8:	2302      	movs	r3, #2
  401aaa:	2807      	cmp	r0, #7
  401aac:	920f      	str	r2, [sp, #60]	; 0x3c
  401aae:	900e      	str	r0, [sp, #56]	; 0x38
  401ab0:	e884 000a 	stmia.w	r4, {r1, r3}
  401ab4:	f300 8134 	bgt.w	401d20 <_vfiprintf_r+0x920>
  401ab8:	4601      	mov	r1, r0
  401aba:	3408      	adds	r4, #8
  401abc:	3001      	adds	r0, #1
  401abe:	9b06      	ldr	r3, [sp, #24]
  401ac0:	2b80      	cmp	r3, #128	; 0x80
  401ac2:	f000 80d4 	beq.w	401c6e <_vfiprintf_r+0x86e>
  401ac6:	ebc9 070c 	rsb	r7, r9, ip
  401aca:	2f00      	cmp	r7, #0
  401acc:	dd2b      	ble.n	401b26 <_vfiprintf_r+0x726>
  401ace:	2f10      	cmp	r7, #16
  401ad0:	4daa      	ldr	r5, [pc, #680]	; (401d7c <_vfiprintf_r+0x97c>)
  401ad2:	dd1f      	ble.n	401b14 <_vfiprintf_r+0x714>
  401ad4:	46a6      	mov	lr, r4
  401ad6:	2310      	movs	r3, #16
  401ad8:	9c01      	ldr	r4, [sp, #4]
  401ada:	e007      	b.n	401aec <_vfiprintf_r+0x6ec>
  401adc:	f101 0c02 	add.w	ip, r1, #2
  401ae0:	f10e 0e08 	add.w	lr, lr, #8
  401ae4:	4601      	mov	r1, r0
  401ae6:	3f10      	subs	r7, #16
  401ae8:	2f10      	cmp	r7, #16
  401aea:	dd11      	ble.n	401b10 <_vfiprintf_r+0x710>
  401aec:	1c48      	adds	r0, r1, #1
  401aee:	3210      	adds	r2, #16
  401af0:	2807      	cmp	r0, #7
  401af2:	920f      	str	r2, [sp, #60]	; 0x3c
  401af4:	f8ce 5000 	str.w	r5, [lr]
  401af8:	f8ce 3004 	str.w	r3, [lr, #4]
  401afc:	900e      	str	r0, [sp, #56]	; 0x38
  401afe:	dded      	ble.n	401adc <_vfiprintf_r+0x6dc>
  401b00:	bb6a      	cbnz	r2, 401b5e <_vfiprintf_r+0x75e>
  401b02:	3f10      	subs	r7, #16
  401b04:	2f10      	cmp	r7, #16
  401b06:	f04f 0c01 	mov.w	ip, #1
  401b0a:	4611      	mov	r1, r2
  401b0c:	46d6      	mov	lr, sl
  401b0e:	dced      	bgt.n	401aec <_vfiprintf_r+0x6ec>
  401b10:	4674      	mov	r4, lr
  401b12:	4660      	mov	r0, ip
  401b14:	443a      	add	r2, r7
  401b16:	2807      	cmp	r0, #7
  401b18:	920f      	str	r2, [sp, #60]	; 0x3c
  401b1a:	e884 00a0 	stmia.w	r4, {r5, r7}
  401b1e:	900e      	str	r0, [sp, #56]	; 0x38
  401b20:	dc3b      	bgt.n	401b9a <_vfiprintf_r+0x79a>
  401b22:	3408      	adds	r4, #8
  401b24:	3001      	adds	r0, #1
  401b26:	eb02 0309 	add.w	r3, r2, r9
  401b2a:	9a07      	ldr	r2, [sp, #28]
  401b2c:	930f      	str	r3, [sp, #60]	; 0x3c
  401b2e:	2807      	cmp	r0, #7
  401b30:	e884 0204 	stmia.w	r4, {r2, r9}
  401b34:	900e      	str	r0, [sp, #56]	; 0x38
  401b36:	dd3d      	ble.n	401bb4 <_vfiprintf_r+0x7b4>
  401b38:	2b00      	cmp	r3, #0
  401b3a:	f040 813e 	bne.w	401dba <_vfiprintf_r+0x9ba>
  401b3e:	f018 0f04 	tst.w	r8, #4
  401b42:	930e      	str	r3, [sp, #56]	; 0x38
  401b44:	f040 812f 	bne.w	401da6 <_vfiprintf_r+0x9a6>
  401b48:	9b02      	ldr	r3, [sp, #8]
  401b4a:	9a03      	ldr	r2, [sp, #12]
  401b4c:	4296      	cmp	r6, r2
  401b4e:	bfac      	ite	ge
  401b50:	199b      	addge	r3, r3, r6
  401b52:	189b      	addlt	r3, r3, r2
  401b54:	9302      	str	r3, [sp, #8]
  401b56:	2300      	movs	r3, #0
  401b58:	930e      	str	r3, [sp, #56]	; 0x38
  401b5a:	4654      	mov	r4, sl
  401b5c:	e482      	b.n	401464 <_vfiprintf_r+0x64>
  401b5e:	4620      	mov	r0, r4
  401b60:	9900      	ldr	r1, [sp, #0]
  401b62:	9305      	str	r3, [sp, #20]
  401b64:	aa0d      	add	r2, sp, #52	; 0x34
  401b66:	f7ff fc0f 	bl	401388 <__sprint_r.part.0>
  401b6a:	b968      	cbnz	r0, 401b88 <_vfiprintf_r+0x788>
  401b6c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401b6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401b70:	9b05      	ldr	r3, [sp, #20]
  401b72:	f101 0c01 	add.w	ip, r1, #1
  401b76:	46d6      	mov	lr, sl
  401b78:	e7b5      	b.n	401ae6 <_vfiprintf_r+0x6e6>
  401b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b7c:	b123      	cbz	r3, 401b88 <_vfiprintf_r+0x788>
  401b7e:	9801      	ldr	r0, [sp, #4]
  401b80:	9900      	ldr	r1, [sp, #0]
  401b82:	aa0d      	add	r2, sp, #52	; 0x34
  401b84:	f7ff fc00 	bl	401388 <__sprint_r.part.0>
  401b88:	9b00      	ldr	r3, [sp, #0]
  401b8a:	899b      	ldrh	r3, [r3, #12]
  401b8c:	065b      	lsls	r3, r3, #25
  401b8e:	f53f ad22 	bmi.w	4015d6 <_vfiprintf_r+0x1d6>
  401b92:	9802      	ldr	r0, [sp, #8]
  401b94:	b02b      	add	sp, #172	; 0xac
  401b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b9a:	2a00      	cmp	r2, #0
  401b9c:	f040 8191 	bne.w	401ec2 <_vfiprintf_r+0xac2>
  401ba0:	2201      	movs	r2, #1
  401ba2:	9907      	ldr	r1, [sp, #28]
  401ba4:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  401ba8:	464b      	mov	r3, r9
  401baa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401bae:	911a      	str	r1, [sp, #104]	; 0x68
  401bb0:	920e      	str	r2, [sp, #56]	; 0x38
  401bb2:	4654      	mov	r4, sl
  401bb4:	f104 0208 	add.w	r2, r4, #8
  401bb8:	f018 0f04 	tst.w	r8, #4
  401bbc:	d039      	beq.n	401c32 <_vfiprintf_r+0x832>
  401bbe:	9903      	ldr	r1, [sp, #12]
  401bc0:	1b8d      	subs	r5, r1, r6
  401bc2:	2d00      	cmp	r5, #0
  401bc4:	dd35      	ble.n	401c32 <_vfiprintf_r+0x832>
  401bc6:	2d10      	cmp	r5, #16
  401bc8:	f340 8202 	ble.w	401fd0 <_vfiprintf_r+0xbd0>
  401bcc:	980e      	ldr	r0, [sp, #56]	; 0x38
  401bce:	4f6c      	ldr	r7, [pc, #432]	; (401d80 <_vfiprintf_r+0x980>)
  401bd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
  401bd4:	f8dd 9000 	ldr.w	r9, [sp]
  401bd8:	2410      	movs	r4, #16
  401bda:	e006      	b.n	401bea <_vfiprintf_r+0x7ea>
  401bdc:	f100 0e02 	add.w	lr, r0, #2
  401be0:	3208      	adds	r2, #8
  401be2:	4608      	mov	r0, r1
  401be4:	3d10      	subs	r5, #16
  401be6:	2d10      	cmp	r5, #16
  401be8:	dd10      	ble.n	401c0c <_vfiprintf_r+0x80c>
  401bea:	1c41      	adds	r1, r0, #1
  401bec:	3310      	adds	r3, #16
  401bee:	2907      	cmp	r1, #7
  401bf0:	930f      	str	r3, [sp, #60]	; 0x3c
  401bf2:	6017      	str	r7, [r2, #0]
  401bf4:	6054      	str	r4, [r2, #4]
  401bf6:	910e      	str	r1, [sp, #56]	; 0x38
  401bf8:	ddf0      	ble.n	401bdc <_vfiprintf_r+0x7dc>
  401bfa:	2b00      	cmp	r3, #0
  401bfc:	d12a      	bne.n	401c54 <_vfiprintf_r+0x854>
  401bfe:	3d10      	subs	r5, #16
  401c00:	2d10      	cmp	r5, #16
  401c02:	f04f 0e01 	mov.w	lr, #1
  401c06:	4618      	mov	r0, r3
  401c08:	4652      	mov	r2, sl
  401c0a:	dcee      	bgt.n	401bea <_vfiprintf_r+0x7ea>
  401c0c:	442b      	add	r3, r5
  401c0e:	f1be 0f07 	cmp.w	lr, #7
  401c12:	930f      	str	r3, [sp, #60]	; 0x3c
  401c14:	6017      	str	r7, [r2, #0]
  401c16:	6055      	str	r5, [r2, #4]
  401c18:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401c1c:	dd09      	ble.n	401c32 <_vfiprintf_r+0x832>
  401c1e:	2b00      	cmp	r3, #0
  401c20:	d092      	beq.n	401b48 <_vfiprintf_r+0x748>
  401c22:	9801      	ldr	r0, [sp, #4]
  401c24:	9900      	ldr	r1, [sp, #0]
  401c26:	aa0d      	add	r2, sp, #52	; 0x34
  401c28:	f7ff fbae 	bl	401388 <__sprint_r.part.0>
  401c2c:	2800      	cmp	r0, #0
  401c2e:	d1ab      	bne.n	401b88 <_vfiprintf_r+0x788>
  401c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c32:	9a02      	ldr	r2, [sp, #8]
  401c34:	9903      	ldr	r1, [sp, #12]
  401c36:	428e      	cmp	r6, r1
  401c38:	bfac      	ite	ge
  401c3a:	1992      	addge	r2, r2, r6
  401c3c:	1852      	addlt	r2, r2, r1
  401c3e:	9202      	str	r2, [sp, #8]
  401c40:	2b00      	cmp	r3, #0
  401c42:	d088      	beq.n	401b56 <_vfiprintf_r+0x756>
  401c44:	9801      	ldr	r0, [sp, #4]
  401c46:	9900      	ldr	r1, [sp, #0]
  401c48:	aa0d      	add	r2, sp, #52	; 0x34
  401c4a:	f7ff fb9d 	bl	401388 <__sprint_r.part.0>
  401c4e:	2800      	cmp	r0, #0
  401c50:	d081      	beq.n	401b56 <_vfiprintf_r+0x756>
  401c52:	e799      	b.n	401b88 <_vfiprintf_r+0x788>
  401c54:	4640      	mov	r0, r8
  401c56:	4649      	mov	r1, r9
  401c58:	aa0d      	add	r2, sp, #52	; 0x34
  401c5a:	f7ff fb95 	bl	401388 <__sprint_r.part.0>
  401c5e:	2800      	cmp	r0, #0
  401c60:	d192      	bne.n	401b88 <_vfiprintf_r+0x788>
  401c62:	980e      	ldr	r0, [sp, #56]	; 0x38
  401c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c66:	f100 0e01 	add.w	lr, r0, #1
  401c6a:	4652      	mov	r2, sl
  401c6c:	e7ba      	b.n	401be4 <_vfiprintf_r+0x7e4>
  401c6e:	9b03      	ldr	r3, [sp, #12]
  401c70:	1b9f      	subs	r7, r3, r6
  401c72:	2f00      	cmp	r7, #0
  401c74:	f77f af27 	ble.w	401ac6 <_vfiprintf_r+0x6c6>
  401c78:	2f10      	cmp	r7, #16
  401c7a:	4d40      	ldr	r5, [pc, #256]	; (401d7c <_vfiprintf_r+0x97c>)
  401c7c:	f340 81b4 	ble.w	401fe8 <_vfiprintf_r+0xbe8>
  401c80:	4620      	mov	r0, r4
  401c82:	2310      	movs	r3, #16
  401c84:	4664      	mov	r4, ip
  401c86:	4684      	mov	ip, r0
  401c88:	e007      	b.n	401c9a <_vfiprintf_r+0x89a>
  401c8a:	f101 0e02 	add.w	lr, r1, #2
  401c8e:	f10c 0c08 	add.w	ip, ip, #8
  401c92:	4601      	mov	r1, r0
  401c94:	3f10      	subs	r7, #16
  401c96:	2f10      	cmp	r7, #16
  401c98:	dd11      	ble.n	401cbe <_vfiprintf_r+0x8be>
  401c9a:	1c48      	adds	r0, r1, #1
  401c9c:	3210      	adds	r2, #16
  401c9e:	2807      	cmp	r0, #7
  401ca0:	920f      	str	r2, [sp, #60]	; 0x3c
  401ca2:	f8cc 5000 	str.w	r5, [ip]
  401ca6:	f8cc 3004 	str.w	r3, [ip, #4]
  401caa:	900e      	str	r0, [sp, #56]	; 0x38
  401cac:	dded      	ble.n	401c8a <_vfiprintf_r+0x88a>
  401cae:	b9c2      	cbnz	r2, 401ce2 <_vfiprintf_r+0x8e2>
  401cb0:	3f10      	subs	r7, #16
  401cb2:	2f10      	cmp	r7, #16
  401cb4:	f04f 0e01 	mov.w	lr, #1
  401cb8:	4611      	mov	r1, r2
  401cba:	46d4      	mov	ip, sl
  401cbc:	dced      	bgt.n	401c9a <_vfiprintf_r+0x89a>
  401cbe:	4663      	mov	r3, ip
  401cc0:	46a4      	mov	ip, r4
  401cc2:	461c      	mov	r4, r3
  401cc4:	443a      	add	r2, r7
  401cc6:	f1be 0f07 	cmp.w	lr, #7
  401cca:	920f      	str	r2, [sp, #60]	; 0x3c
  401ccc:	e884 00a0 	stmia.w	r4, {r5, r7}
  401cd0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401cd4:	f300 80ef 	bgt.w	401eb6 <_vfiprintf_r+0xab6>
  401cd8:	3408      	adds	r4, #8
  401cda:	f10e 0001 	add.w	r0, lr, #1
  401cde:	4671      	mov	r1, lr
  401ce0:	e6f1      	b.n	401ac6 <_vfiprintf_r+0x6c6>
  401ce2:	9801      	ldr	r0, [sp, #4]
  401ce4:	9900      	ldr	r1, [sp, #0]
  401ce6:	9305      	str	r3, [sp, #20]
  401ce8:	aa0d      	add	r2, sp, #52	; 0x34
  401cea:	f7ff fb4d 	bl	401388 <__sprint_r.part.0>
  401cee:	2800      	cmp	r0, #0
  401cf0:	f47f af4a 	bne.w	401b88 <_vfiprintf_r+0x788>
  401cf4:	990e      	ldr	r1, [sp, #56]	; 0x38
  401cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401cf8:	9b05      	ldr	r3, [sp, #20]
  401cfa:	f101 0e01 	add.w	lr, r1, #1
  401cfe:	46d4      	mov	ip, sl
  401d00:	e7c8      	b.n	401c94 <_vfiprintf_r+0x894>
  401d02:	2a00      	cmp	r2, #0
  401d04:	f040 80c6 	bne.w	401e94 <_vfiprintf_r+0xa94>
  401d08:	9b05      	ldr	r3, [sp, #20]
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	f000 8086 	beq.w	401e1c <_vfiprintf_r+0xa1c>
  401d10:	aa0c      	add	r2, sp, #48	; 0x30
  401d12:	2302      	movs	r3, #2
  401d14:	921a      	str	r2, [sp, #104]	; 0x68
  401d16:	4608      	mov	r0, r1
  401d18:	931b      	str	r3, [sp, #108]	; 0x6c
  401d1a:	461a      	mov	r2, r3
  401d1c:	4654      	mov	r4, sl
  401d1e:	e6cb      	b.n	401ab8 <_vfiprintf_r+0x6b8>
  401d20:	2a00      	cmp	r2, #0
  401d22:	f040 80a6 	bne.w	401e72 <_vfiprintf_r+0xa72>
  401d26:	2001      	movs	r0, #1
  401d28:	4611      	mov	r1, r2
  401d2a:	4654      	mov	r4, sl
  401d2c:	e6c7      	b.n	401abe <_vfiprintf_r+0x6be>
  401d2e:	bb03      	cbnz	r3, 401d72 <_vfiprintf_r+0x972>
  401d30:	f018 0f01 	tst.w	r8, #1
  401d34:	d01d      	beq.n	401d72 <_vfiprintf_r+0x972>
  401d36:	ab2a      	add	r3, sp, #168	; 0xa8
  401d38:	2230      	movs	r2, #48	; 0x30
  401d3a:	f803 2d41 	strb.w	r2, [r3, #-65]!
  401d3e:	ebc3 090a 	rsb	r9, r3, sl
  401d42:	9307      	str	r3, [sp, #28]
  401d44:	e48e      	b.n	401664 <_vfiprintf_r+0x264>
  401d46:	9809      	ldr	r0, [sp, #36]	; 0x24
  401d48:	46d1      	mov	r9, sl
  401d4a:	0933      	lsrs	r3, r6, #4
  401d4c:	f006 010f 	and.w	r1, r6, #15
  401d50:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  401d54:	093a      	lsrs	r2, r7, #4
  401d56:	461e      	mov	r6, r3
  401d58:	4617      	mov	r7, r2
  401d5a:	5c43      	ldrb	r3, [r0, r1]
  401d5c:	f809 3d01 	strb.w	r3, [r9, #-1]!
  401d60:	ea56 0307 	orrs.w	r3, r6, r7
  401d64:	d1f1      	bne.n	401d4a <_vfiprintf_r+0x94a>
  401d66:	464b      	mov	r3, r9
  401d68:	f8cd 901c 	str.w	r9, [sp, #28]
  401d6c:	ebc3 090a 	rsb	r9, r3, sl
  401d70:	e478      	b.n	401664 <_vfiprintf_r+0x264>
  401d72:	f8cd a01c 	str.w	sl, [sp, #28]
  401d76:	e475      	b.n	401664 <_vfiprintf_r+0x264>
  401d78:	2302      	movs	r3, #2
  401d7a:	e444      	b.n	401606 <_vfiprintf_r+0x206>
  401d7c:	004041f0 	.word	0x004041f0
  401d80:	00404230 	.word	0x00404230
  401d84:	2a00      	cmp	r2, #0
  401d86:	f040 80d7 	bne.w	401f38 <_vfiprintf_r+0xb38>
  401d8a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401d8e:	2b00      	cmp	r3, #0
  401d90:	f000 80ae 	beq.w	401ef0 <_vfiprintf_r+0xaf0>
  401d94:	2301      	movs	r3, #1
  401d96:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401d9a:	4618      	mov	r0, r3
  401d9c:	931b      	str	r3, [sp, #108]	; 0x6c
  401d9e:	461a      	mov	r2, r3
  401da0:	911a      	str	r1, [sp, #104]	; 0x68
  401da2:	4654      	mov	r4, sl
  401da4:	e679      	b.n	401a9a <_vfiprintf_r+0x69a>
  401da6:	9a03      	ldr	r2, [sp, #12]
  401da8:	1b95      	subs	r5, r2, r6
  401daa:	2d00      	cmp	r5, #0
  401dac:	4652      	mov	r2, sl
  401dae:	f73f af0a 	bgt.w	401bc6 <_vfiprintf_r+0x7c6>
  401db2:	e6c9      	b.n	401b48 <_vfiprintf_r+0x748>
  401db4:	465d      	mov	r5, fp
  401db6:	f7ff bb7c 	b.w	4014b2 <_vfiprintf_r+0xb2>
  401dba:	9801      	ldr	r0, [sp, #4]
  401dbc:	9900      	ldr	r1, [sp, #0]
  401dbe:	aa0d      	add	r2, sp, #52	; 0x34
  401dc0:	f7ff fae2 	bl	401388 <__sprint_r.part.0>
  401dc4:	2800      	cmp	r0, #0
  401dc6:	f47f aedf 	bne.w	401b88 <_vfiprintf_r+0x788>
  401dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401dcc:	4652      	mov	r2, sl
  401dce:	e6f3      	b.n	401bb8 <_vfiprintf_r+0x7b8>
  401dd0:	9904      	ldr	r1, [sp, #16]
  401dd2:	460a      	mov	r2, r1
  401dd4:	3204      	adds	r2, #4
  401dd6:	680e      	ldr	r6, [r1, #0]
  401dd8:	9204      	str	r2, [sp, #16]
  401dda:	2700      	movs	r7, #0
  401ddc:	e413      	b.n	401606 <_vfiprintf_r+0x206>
  401dde:	3204      	adds	r2, #4
  401de0:	681e      	ldr	r6, [r3, #0]
  401de2:	9204      	str	r2, [sp, #16]
  401de4:	2301      	movs	r3, #1
  401de6:	2700      	movs	r7, #0
  401de8:	e40d      	b.n	401606 <_vfiprintf_r+0x206>
  401dea:	6816      	ldr	r6, [r2, #0]
  401dec:	3204      	adds	r2, #4
  401dee:	9204      	str	r2, [sp, #16]
  401df0:	2700      	movs	r7, #0
  401df2:	e52d      	b.n	401850 <_vfiprintf_r+0x450>
  401df4:	9a04      	ldr	r2, [sp, #16]
  401df6:	6816      	ldr	r6, [r2, #0]
  401df8:	4613      	mov	r3, r2
  401dfa:	3304      	adds	r3, #4
  401dfc:	17f7      	asrs	r7, r6, #31
  401dfe:	9304      	str	r3, [sp, #16]
  401e00:	4632      	mov	r2, r6
  401e02:	463b      	mov	r3, r7
  401e04:	e4bf      	b.n	401786 <_vfiprintf_r+0x386>
  401e06:	9801      	ldr	r0, [sp, #4]
  401e08:	9900      	ldr	r1, [sp, #0]
  401e0a:	aa0d      	add	r2, sp, #52	; 0x34
  401e0c:	f7ff fabc 	bl	401388 <__sprint_r.part.0>
  401e10:	2800      	cmp	r0, #0
  401e12:	f47f aeb9 	bne.w	401b88 <_vfiprintf_r+0x788>
  401e16:	4654      	mov	r4, sl
  401e18:	f7ff bbbe 	b.w	401598 <_vfiprintf_r+0x198>
  401e1c:	4608      	mov	r0, r1
  401e1e:	4654      	mov	r4, sl
  401e20:	4611      	mov	r1, r2
  401e22:	e64c      	b.n	401abe <_vfiprintf_r+0x6be>
  401e24:	46d1      	mov	r9, sl
  401e26:	f8cd c014 	str.w	ip, [sp, #20]
  401e2a:	4630      	mov	r0, r6
  401e2c:	4639      	mov	r1, r7
  401e2e:	220a      	movs	r2, #10
  401e30:	2300      	movs	r3, #0
  401e32:	f001 fe7d 	bl	403b30 <__aeabi_uldivmod>
  401e36:	3230      	adds	r2, #48	; 0x30
  401e38:	4630      	mov	r0, r6
  401e3a:	4639      	mov	r1, r7
  401e3c:	f809 2d01 	strb.w	r2, [r9, #-1]!
  401e40:	2300      	movs	r3, #0
  401e42:	220a      	movs	r2, #10
  401e44:	f001 fe74 	bl	403b30 <__aeabi_uldivmod>
  401e48:	4606      	mov	r6, r0
  401e4a:	460f      	mov	r7, r1
  401e4c:	ea56 0307 	orrs.w	r3, r6, r7
  401e50:	d1eb      	bne.n	401e2a <_vfiprintf_r+0xa2a>
  401e52:	f8dd c014 	ldr.w	ip, [sp, #20]
  401e56:	e786      	b.n	401d66 <_vfiprintf_r+0x966>
  401e58:	2b30      	cmp	r3, #48	; 0x30
  401e5a:	9b07      	ldr	r3, [sp, #28]
  401e5c:	d086      	beq.n	401d6c <_vfiprintf_r+0x96c>
  401e5e:	3b01      	subs	r3, #1
  401e60:	461a      	mov	r2, r3
  401e62:	9307      	str	r3, [sp, #28]
  401e64:	2330      	movs	r3, #48	; 0x30
  401e66:	ebc2 090a 	rsb	r9, r2, sl
  401e6a:	f801 3c01 	strb.w	r3, [r1, #-1]
  401e6e:	f7ff bbf9 	b.w	401664 <_vfiprintf_r+0x264>
  401e72:	9801      	ldr	r0, [sp, #4]
  401e74:	9900      	ldr	r1, [sp, #0]
  401e76:	f8cd c014 	str.w	ip, [sp, #20]
  401e7a:	aa0d      	add	r2, sp, #52	; 0x34
  401e7c:	f7ff fa84 	bl	401388 <__sprint_r.part.0>
  401e80:	2800      	cmp	r0, #0
  401e82:	f47f ae81 	bne.w	401b88 <_vfiprintf_r+0x788>
  401e86:	990e      	ldr	r1, [sp, #56]	; 0x38
  401e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e8a:	f8dd c014 	ldr.w	ip, [sp, #20]
  401e8e:	1c48      	adds	r0, r1, #1
  401e90:	4654      	mov	r4, sl
  401e92:	e614      	b.n	401abe <_vfiprintf_r+0x6be>
  401e94:	9801      	ldr	r0, [sp, #4]
  401e96:	9900      	ldr	r1, [sp, #0]
  401e98:	f8cd c020 	str.w	ip, [sp, #32]
  401e9c:	aa0d      	add	r2, sp, #52	; 0x34
  401e9e:	f7ff fa73 	bl	401388 <__sprint_r.part.0>
  401ea2:	2800      	cmp	r0, #0
  401ea4:	f47f ae70 	bne.w	401b88 <_vfiprintf_r+0x788>
  401ea8:	990e      	ldr	r1, [sp, #56]	; 0x38
  401eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401eac:	f8dd c020 	ldr.w	ip, [sp, #32]
  401eb0:	1c48      	adds	r0, r1, #1
  401eb2:	4654      	mov	r4, sl
  401eb4:	e5f4      	b.n	401aa0 <_vfiprintf_r+0x6a0>
  401eb6:	2a00      	cmp	r2, #0
  401eb8:	d167      	bne.n	401f8a <_vfiprintf_r+0xb8a>
  401eba:	2001      	movs	r0, #1
  401ebc:	4611      	mov	r1, r2
  401ebe:	4654      	mov	r4, sl
  401ec0:	e601      	b.n	401ac6 <_vfiprintf_r+0x6c6>
  401ec2:	9801      	ldr	r0, [sp, #4]
  401ec4:	9900      	ldr	r1, [sp, #0]
  401ec6:	aa0d      	add	r2, sp, #52	; 0x34
  401ec8:	f7ff fa5e 	bl	401388 <__sprint_r.part.0>
  401ecc:	2800      	cmp	r0, #0
  401ece:	f47f ae5b 	bne.w	401b88 <_vfiprintf_r+0x788>
  401ed2:	980e      	ldr	r0, [sp, #56]	; 0x38
  401ed4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401ed6:	3001      	adds	r0, #1
  401ed8:	4654      	mov	r4, sl
  401eda:	e624      	b.n	401b26 <_vfiprintf_r+0x726>
  401edc:	252d      	movs	r5, #45	; 0x2d
  401ede:	4276      	negs	r6, r6
  401ee0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401ee4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  401ee8:	46e1      	mov	r9, ip
  401eea:	2301      	movs	r3, #1
  401eec:	f7ff bb91 	b.w	401612 <_vfiprintf_r+0x212>
  401ef0:	9b05      	ldr	r3, [sp, #20]
  401ef2:	4611      	mov	r1, r2
  401ef4:	2001      	movs	r0, #1
  401ef6:	4654      	mov	r4, sl
  401ef8:	2b00      	cmp	r3, #0
  401efa:	f43f ade4 	beq.w	401ac6 <_vfiprintf_r+0x6c6>
  401efe:	aa0c      	add	r2, sp, #48	; 0x30
  401f00:	2302      	movs	r3, #2
  401f02:	e88a 000c 	stmia.w	sl, {r2, r3}
  401f06:	461a      	mov	r2, r3
  401f08:	e5d6      	b.n	401ab8 <_vfiprintf_r+0x6b8>
  401f0a:	f018 0f10 	tst.w	r8, #16
  401f0e:	d10b      	bne.n	401f28 <_vfiprintf_r+0xb28>
  401f10:	f018 0f40 	tst.w	r8, #64	; 0x40
  401f14:	d008      	beq.n	401f28 <_vfiprintf_r+0xb28>
  401f16:	9a04      	ldr	r2, [sp, #16]
  401f18:	6813      	ldr	r3, [r2, #0]
  401f1a:	3204      	adds	r2, #4
  401f1c:	9204      	str	r2, [sp, #16]
  401f1e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  401f22:	801a      	strh	r2, [r3, #0]
  401f24:	f7ff ba9e 	b.w	401464 <_vfiprintf_r+0x64>
  401f28:	9a04      	ldr	r2, [sp, #16]
  401f2a:	6813      	ldr	r3, [r2, #0]
  401f2c:	3204      	adds	r2, #4
  401f2e:	9204      	str	r2, [sp, #16]
  401f30:	9a02      	ldr	r2, [sp, #8]
  401f32:	601a      	str	r2, [r3, #0]
  401f34:	f7ff ba96 	b.w	401464 <_vfiprintf_r+0x64>
  401f38:	9801      	ldr	r0, [sp, #4]
  401f3a:	9900      	ldr	r1, [sp, #0]
  401f3c:	f8cd c020 	str.w	ip, [sp, #32]
  401f40:	aa0d      	add	r2, sp, #52	; 0x34
  401f42:	f7ff fa21 	bl	401388 <__sprint_r.part.0>
  401f46:	2800      	cmp	r0, #0
  401f48:	f47f ae1e 	bne.w	401b88 <_vfiprintf_r+0x788>
  401f4c:	990e      	ldr	r1, [sp, #56]	; 0x38
  401f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f50:	f8dd c020 	ldr.w	ip, [sp, #32]
  401f54:	1c48      	adds	r0, r1, #1
  401f56:	4654      	mov	r4, sl
  401f58:	e591      	b.n	401a7e <_vfiprintf_r+0x67e>
  401f5a:	f048 0820 	orr.w	r8, r8, #32
  401f5e:	f10b 0001 	add.w	r0, fp, #1
  401f62:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401f66:	f7ff bab4 	b.w	4014d2 <_vfiprintf_r+0xd2>
  401f6a:	426d      	negs	r5, r5
  401f6c:	9304      	str	r3, [sp, #16]
  401f6e:	4658      	mov	r0, fp
  401f70:	f7ff bbc6 	b.w	401700 <_vfiprintf_r+0x300>
  401f74:	9807      	ldr	r0, [sp, #28]
  401f76:	9604      	str	r6, [sp, #16]
  401f78:	f7ff f9d8 	bl	40132c <strlen>
  401f7c:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401f80:	4681      	mov	r9, r0
  401f82:	f04f 0c00 	mov.w	ip, #0
  401f86:	f7ff bb6d 	b.w	401664 <_vfiprintf_r+0x264>
  401f8a:	9801      	ldr	r0, [sp, #4]
  401f8c:	9900      	ldr	r1, [sp, #0]
  401f8e:	f8cd c014 	str.w	ip, [sp, #20]
  401f92:	aa0d      	add	r2, sp, #52	; 0x34
  401f94:	f7ff f9f8 	bl	401388 <__sprint_r.part.0>
  401f98:	2800      	cmp	r0, #0
  401f9a:	f47f adf5 	bne.w	401b88 <_vfiprintf_r+0x788>
  401f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
  401fa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401fa2:	f8dd c014 	ldr.w	ip, [sp, #20]
  401fa6:	1c48      	adds	r0, r1, #1
  401fa8:	4654      	mov	r4, sl
  401faa:	e58c      	b.n	401ac6 <_vfiprintf_r+0x6c6>
  401fac:	990e      	ldr	r1, [sp, #56]	; 0x38
  401fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401fb0:	4f15      	ldr	r7, [pc, #84]	; (402008 <_vfiprintf_r+0xc08>)
  401fb2:	3101      	adds	r1, #1
  401fb4:	f7ff bb98 	b.w	4016e8 <_vfiprintf_r+0x2e8>
  401fb8:	f1bc 0f06 	cmp.w	ip, #6
  401fbc:	bf28      	it	cs
  401fbe:	f04f 0c06 	movcs.w	ip, #6
  401fc2:	4b12      	ldr	r3, [pc, #72]	; (40200c <_vfiprintf_r+0xc0c>)
  401fc4:	9604      	str	r6, [sp, #16]
  401fc6:	46e1      	mov	r9, ip
  401fc8:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
  401fcc:	9307      	str	r3, [sp, #28]
  401fce:	e460      	b.n	401892 <_vfiprintf_r+0x492>
  401fd0:	990e      	ldr	r1, [sp, #56]	; 0x38
  401fd2:	4f0d      	ldr	r7, [pc, #52]	; (402008 <_vfiprintf_r+0xc08>)
  401fd4:	f101 0e01 	add.w	lr, r1, #1
  401fd8:	e618      	b.n	401c0c <_vfiprintf_r+0x80c>
  401fda:	46e1      	mov	r9, ip
  401fdc:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
  401fe0:	9604      	str	r6, [sp, #16]
  401fe2:	4684      	mov	ip, r0
  401fe4:	f7ff bb3e 	b.w	401664 <_vfiprintf_r+0x264>
  401fe8:	4686      	mov	lr, r0
  401fea:	e66b      	b.n	401cc4 <_vfiprintf_r+0x8c4>
  401fec:	9a04      	ldr	r2, [sp, #16]
  401fee:	f89b 3001 	ldrb.w	r3, [fp, #1]
  401ff2:	6816      	ldr	r6, [r2, #0]
  401ff4:	3204      	adds	r2, #4
  401ff6:	2e00      	cmp	r6, #0
  401ff8:	9204      	str	r2, [sp, #16]
  401ffa:	f6bf aa6a 	bge.w	4014d2 <_vfiprintf_r+0xd2>
  401ffe:	f04f 36ff 	mov.w	r6, #4294967295
  402002:	f7ff ba66 	b.w	4014d2 <_vfiprintf_r+0xd2>
  402006:	bf00      	nop
  402008:	00404230 	.word	0x00404230
  40200c:	00404228 	.word	0x00404228

00402010 <__sbprintf>:
  402010:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  402014:	460c      	mov	r4, r1
  402016:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40201a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  40201e:	69e7      	ldr	r7, [r4, #28]
  402020:	6e49      	ldr	r1, [r1, #100]	; 0x64
  402022:	f8b4 900e 	ldrh.w	r9, [r4, #14]
  402026:	9119      	str	r1, [sp, #100]	; 0x64
  402028:	ad1a      	add	r5, sp, #104	; 0x68
  40202a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40202e:	f02e 0e02 	bic.w	lr, lr, #2
  402032:	f04f 0c00 	mov.w	ip, #0
  402036:	9707      	str	r7, [sp, #28]
  402038:	4669      	mov	r1, sp
  40203a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40203c:	9500      	str	r5, [sp, #0]
  40203e:	9504      	str	r5, [sp, #16]
  402040:	9602      	str	r6, [sp, #8]
  402042:	9605      	str	r6, [sp, #20]
  402044:	f8ad e00c 	strh.w	lr, [sp, #12]
  402048:	f8ad 900e 	strh.w	r9, [sp, #14]
  40204c:	9709      	str	r7, [sp, #36]	; 0x24
  40204e:	f8cd c018 	str.w	ip, [sp, #24]
  402052:	4606      	mov	r6, r0
  402054:	f7ff f9d4 	bl	401400 <_vfiprintf_r>
  402058:	1e05      	subs	r5, r0, #0
  40205a:	db07      	blt.n	40206c <__sbprintf+0x5c>
  40205c:	4630      	mov	r0, r6
  40205e:	4669      	mov	r1, sp
  402060:	f000 f92e 	bl	4022c0 <_fflush_r>
  402064:	2800      	cmp	r0, #0
  402066:	bf18      	it	ne
  402068:	f04f 35ff 	movne.w	r5, #4294967295
  40206c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402070:	065b      	lsls	r3, r3, #25
  402072:	d503      	bpl.n	40207c <__sbprintf+0x6c>
  402074:	89a3      	ldrh	r3, [r4, #12]
  402076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40207a:	81a3      	strh	r3, [r4, #12]
  40207c:	4628      	mov	r0, r5
  40207e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  402082:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  402086:	bf00      	nop

00402088 <__swsetup_r>:
  402088:	b538      	push	{r3, r4, r5, lr}
  40208a:	4b2f      	ldr	r3, [pc, #188]	; (402148 <__swsetup_r+0xc0>)
  40208c:	681b      	ldr	r3, [r3, #0]
  40208e:	4605      	mov	r5, r0
  402090:	460c      	mov	r4, r1
  402092:	b113      	cbz	r3, 40209a <__swsetup_r+0x12>
  402094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402096:	2a00      	cmp	r2, #0
  402098:	d036      	beq.n	402108 <__swsetup_r+0x80>
  40209a:	89a2      	ldrh	r2, [r4, #12]
  40209c:	b293      	uxth	r3, r2
  40209e:	0718      	lsls	r0, r3, #28
  4020a0:	d50c      	bpl.n	4020bc <__swsetup_r+0x34>
  4020a2:	6920      	ldr	r0, [r4, #16]
  4020a4:	b1a8      	cbz	r0, 4020d2 <__swsetup_r+0x4a>
  4020a6:	f013 0201 	ands.w	r2, r3, #1
  4020aa:	d01e      	beq.n	4020ea <__swsetup_r+0x62>
  4020ac:	6963      	ldr	r3, [r4, #20]
  4020ae:	2200      	movs	r2, #0
  4020b0:	425b      	negs	r3, r3
  4020b2:	61a3      	str	r3, [r4, #24]
  4020b4:	60a2      	str	r2, [r4, #8]
  4020b6:	b1f0      	cbz	r0, 4020f6 <__swsetup_r+0x6e>
  4020b8:	2000      	movs	r0, #0
  4020ba:	bd38      	pop	{r3, r4, r5, pc}
  4020bc:	06d9      	lsls	r1, r3, #27
  4020be:	d53b      	bpl.n	402138 <__swsetup_r+0xb0>
  4020c0:	0758      	lsls	r0, r3, #29
  4020c2:	d425      	bmi.n	402110 <__swsetup_r+0x88>
  4020c4:	6920      	ldr	r0, [r4, #16]
  4020c6:	f042 0308 	orr.w	r3, r2, #8
  4020ca:	81a3      	strh	r3, [r4, #12]
  4020cc:	b29b      	uxth	r3, r3
  4020ce:	2800      	cmp	r0, #0
  4020d0:	d1e9      	bne.n	4020a6 <__swsetup_r+0x1e>
  4020d2:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4020d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4020da:	d0e4      	beq.n	4020a6 <__swsetup_r+0x1e>
  4020dc:	4628      	mov	r0, r5
  4020de:	4621      	mov	r1, r4
  4020e0:	f000 fcf2 	bl	402ac8 <__smakebuf_r>
  4020e4:	89a3      	ldrh	r3, [r4, #12]
  4020e6:	6920      	ldr	r0, [r4, #16]
  4020e8:	e7dd      	b.n	4020a6 <__swsetup_r+0x1e>
  4020ea:	0799      	lsls	r1, r3, #30
  4020ec:	bf58      	it	pl
  4020ee:	6962      	ldrpl	r2, [r4, #20]
  4020f0:	60a2      	str	r2, [r4, #8]
  4020f2:	2800      	cmp	r0, #0
  4020f4:	d1e0      	bne.n	4020b8 <__swsetup_r+0x30>
  4020f6:	89a3      	ldrh	r3, [r4, #12]
  4020f8:	061a      	lsls	r2, r3, #24
  4020fa:	d5de      	bpl.n	4020ba <__swsetup_r+0x32>
  4020fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402100:	81a3      	strh	r3, [r4, #12]
  402102:	f04f 30ff 	mov.w	r0, #4294967295
  402106:	bd38      	pop	{r3, r4, r5, pc}
  402108:	4618      	mov	r0, r3
  40210a:	f000 f96d 	bl	4023e8 <__sinit>
  40210e:	e7c4      	b.n	40209a <__swsetup_r+0x12>
  402110:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402112:	b149      	cbz	r1, 402128 <__swsetup_r+0xa0>
  402114:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402118:	4299      	cmp	r1, r3
  40211a:	d003      	beq.n	402124 <__swsetup_r+0x9c>
  40211c:	4628      	mov	r0, r5
  40211e:	f000 fa3b 	bl	402598 <_free_r>
  402122:	89a2      	ldrh	r2, [r4, #12]
  402124:	2300      	movs	r3, #0
  402126:	6323      	str	r3, [r4, #48]	; 0x30
  402128:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40212c:	2300      	movs	r3, #0
  40212e:	6920      	ldr	r0, [r4, #16]
  402130:	6063      	str	r3, [r4, #4]
  402132:	b292      	uxth	r2, r2
  402134:	6020      	str	r0, [r4, #0]
  402136:	e7c6      	b.n	4020c6 <__swsetup_r+0x3e>
  402138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40213c:	2309      	movs	r3, #9
  40213e:	602b      	str	r3, [r5, #0]
  402140:	f04f 30ff 	mov.w	r0, #4294967295
  402144:	81a2      	strh	r2, [r4, #12]
  402146:	bd38      	pop	{r3, r4, r5, pc}
  402148:	20000430 	.word	0x20000430

0040214c <register_fini>:
  40214c:	4b02      	ldr	r3, [pc, #8]	; (402158 <register_fini+0xc>)
  40214e:	b113      	cbz	r3, 402156 <register_fini+0xa>
  402150:	4802      	ldr	r0, [pc, #8]	; (40215c <register_fini+0x10>)
  402152:	f000 b805 	b.w	402160 <atexit>
  402156:	4770      	bx	lr
  402158:	00000000 	.word	0x00000000
  40215c:	004023fd 	.word	0x004023fd

00402160 <atexit>:
  402160:	4601      	mov	r1, r0
  402162:	2000      	movs	r0, #0
  402164:	4602      	mov	r2, r0
  402166:	4603      	mov	r3, r0
  402168:	f001 bbee 	b.w	403948 <__register_exitproc>

0040216c <__sflush_r>:
  40216c:	898b      	ldrh	r3, [r1, #12]
  40216e:	b29a      	uxth	r2, r3
  402170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402174:	460d      	mov	r5, r1
  402176:	0711      	lsls	r1, r2, #28
  402178:	4680      	mov	r8, r0
  40217a:	d43c      	bmi.n	4021f6 <__sflush_r+0x8a>
  40217c:	686a      	ldr	r2, [r5, #4]
  40217e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402182:	2a00      	cmp	r2, #0
  402184:	81ab      	strh	r3, [r5, #12]
  402186:	dd65      	ble.n	402254 <__sflush_r+0xe8>
  402188:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40218a:	2e00      	cmp	r6, #0
  40218c:	d04b      	beq.n	402226 <__sflush_r+0xba>
  40218e:	b29b      	uxth	r3, r3
  402190:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  402194:	2100      	movs	r1, #0
  402196:	b292      	uxth	r2, r2
  402198:	f8d8 4000 	ldr.w	r4, [r8]
  40219c:	f8c8 1000 	str.w	r1, [r8]
  4021a0:	2a00      	cmp	r2, #0
  4021a2:	d05b      	beq.n	40225c <__sflush_r+0xf0>
  4021a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4021a6:	075f      	lsls	r7, r3, #29
  4021a8:	d505      	bpl.n	4021b6 <__sflush_r+0x4a>
  4021aa:	6869      	ldr	r1, [r5, #4]
  4021ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4021ae:	1a52      	subs	r2, r2, r1
  4021b0:	b10b      	cbz	r3, 4021b6 <__sflush_r+0x4a>
  4021b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4021b4:	1ad2      	subs	r2, r2, r3
  4021b6:	4640      	mov	r0, r8
  4021b8:	69e9      	ldr	r1, [r5, #28]
  4021ba:	2300      	movs	r3, #0
  4021bc:	47b0      	blx	r6
  4021be:	1c46      	adds	r6, r0, #1
  4021c0:	d056      	beq.n	402270 <__sflush_r+0x104>
  4021c2:	89ab      	ldrh	r3, [r5, #12]
  4021c4:	692a      	ldr	r2, [r5, #16]
  4021c6:	602a      	str	r2, [r5, #0]
  4021c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4021cc:	b29b      	uxth	r3, r3
  4021ce:	2200      	movs	r2, #0
  4021d0:	606a      	str	r2, [r5, #4]
  4021d2:	04da      	lsls	r2, r3, #19
  4021d4:	81ab      	strh	r3, [r5, #12]
  4021d6:	d43b      	bmi.n	402250 <__sflush_r+0xe4>
  4021d8:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4021da:	f8c8 4000 	str.w	r4, [r8]
  4021de:	b311      	cbz	r1, 402226 <__sflush_r+0xba>
  4021e0:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4021e4:	4299      	cmp	r1, r3
  4021e6:	d002      	beq.n	4021ee <__sflush_r+0x82>
  4021e8:	4640      	mov	r0, r8
  4021ea:	f000 f9d5 	bl	402598 <_free_r>
  4021ee:	2000      	movs	r0, #0
  4021f0:	6328      	str	r0, [r5, #48]	; 0x30
  4021f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021f6:	692e      	ldr	r6, [r5, #16]
  4021f8:	b1ae      	cbz	r6, 402226 <__sflush_r+0xba>
  4021fa:	682c      	ldr	r4, [r5, #0]
  4021fc:	602e      	str	r6, [r5, #0]
  4021fe:	0791      	lsls	r1, r2, #30
  402200:	bf0c      	ite	eq
  402202:	696b      	ldreq	r3, [r5, #20]
  402204:	2300      	movne	r3, #0
  402206:	1ba4      	subs	r4, r4, r6
  402208:	60ab      	str	r3, [r5, #8]
  40220a:	e00a      	b.n	402222 <__sflush_r+0xb6>
  40220c:	4632      	mov	r2, r6
  40220e:	4623      	mov	r3, r4
  402210:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  402212:	69e9      	ldr	r1, [r5, #28]
  402214:	4640      	mov	r0, r8
  402216:	47b8      	blx	r7
  402218:	2800      	cmp	r0, #0
  40221a:	eba4 0400 	sub.w	r4, r4, r0
  40221e:	4406      	add	r6, r0
  402220:	dd04      	ble.n	40222c <__sflush_r+0xc0>
  402222:	2c00      	cmp	r4, #0
  402224:	dcf2      	bgt.n	40220c <__sflush_r+0xa0>
  402226:	2000      	movs	r0, #0
  402228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40222c:	89ab      	ldrh	r3, [r5, #12]
  40222e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402232:	81ab      	strh	r3, [r5, #12]
  402234:	f04f 30ff 	mov.w	r0, #4294967295
  402238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40223c:	89ab      	ldrh	r3, [r5, #12]
  40223e:	692a      	ldr	r2, [r5, #16]
  402240:	6069      	str	r1, [r5, #4]
  402242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402246:	b29b      	uxth	r3, r3
  402248:	81ab      	strh	r3, [r5, #12]
  40224a:	04db      	lsls	r3, r3, #19
  40224c:	602a      	str	r2, [r5, #0]
  40224e:	d5c3      	bpl.n	4021d8 <__sflush_r+0x6c>
  402250:	6528      	str	r0, [r5, #80]	; 0x50
  402252:	e7c1      	b.n	4021d8 <__sflush_r+0x6c>
  402254:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402256:	2a00      	cmp	r2, #0
  402258:	dc96      	bgt.n	402188 <__sflush_r+0x1c>
  40225a:	e7e4      	b.n	402226 <__sflush_r+0xba>
  40225c:	2301      	movs	r3, #1
  40225e:	4640      	mov	r0, r8
  402260:	69e9      	ldr	r1, [r5, #28]
  402262:	47b0      	blx	r6
  402264:	1c43      	adds	r3, r0, #1
  402266:	4602      	mov	r2, r0
  402268:	d019      	beq.n	40229e <__sflush_r+0x132>
  40226a:	89ab      	ldrh	r3, [r5, #12]
  40226c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40226e:	e79a      	b.n	4021a6 <__sflush_r+0x3a>
  402270:	f8d8 1000 	ldr.w	r1, [r8]
  402274:	2900      	cmp	r1, #0
  402276:	d0e1      	beq.n	40223c <__sflush_r+0xd0>
  402278:	291d      	cmp	r1, #29
  40227a:	d007      	beq.n	40228c <__sflush_r+0x120>
  40227c:	2916      	cmp	r1, #22
  40227e:	d005      	beq.n	40228c <__sflush_r+0x120>
  402280:	89ab      	ldrh	r3, [r5, #12]
  402282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402286:	81ab      	strh	r3, [r5, #12]
  402288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40228c:	89ab      	ldrh	r3, [r5, #12]
  40228e:	692a      	ldr	r2, [r5, #16]
  402290:	602a      	str	r2, [r5, #0]
  402292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402296:	2200      	movs	r2, #0
  402298:	81ab      	strh	r3, [r5, #12]
  40229a:	606a      	str	r2, [r5, #4]
  40229c:	e79c      	b.n	4021d8 <__sflush_r+0x6c>
  40229e:	f8d8 3000 	ldr.w	r3, [r8]
  4022a2:	2b00      	cmp	r3, #0
  4022a4:	d0e1      	beq.n	40226a <__sflush_r+0xfe>
  4022a6:	2b1d      	cmp	r3, #29
  4022a8:	d007      	beq.n	4022ba <__sflush_r+0x14e>
  4022aa:	2b16      	cmp	r3, #22
  4022ac:	d005      	beq.n	4022ba <__sflush_r+0x14e>
  4022ae:	89ab      	ldrh	r3, [r5, #12]
  4022b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4022b4:	81ab      	strh	r3, [r5, #12]
  4022b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022ba:	f8c8 4000 	str.w	r4, [r8]
  4022be:	e7b2      	b.n	402226 <__sflush_r+0xba>

004022c0 <_fflush_r>:
  4022c0:	b510      	push	{r4, lr}
  4022c2:	4604      	mov	r4, r0
  4022c4:	b082      	sub	sp, #8
  4022c6:	b108      	cbz	r0, 4022cc <_fflush_r+0xc>
  4022c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4022ca:	b153      	cbz	r3, 4022e2 <_fflush_r+0x22>
  4022cc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4022d0:	b908      	cbnz	r0, 4022d6 <_fflush_r+0x16>
  4022d2:	b002      	add	sp, #8
  4022d4:	bd10      	pop	{r4, pc}
  4022d6:	4620      	mov	r0, r4
  4022d8:	b002      	add	sp, #8
  4022da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4022de:	f7ff bf45 	b.w	40216c <__sflush_r>
  4022e2:	9101      	str	r1, [sp, #4]
  4022e4:	f000 f880 	bl	4023e8 <__sinit>
  4022e8:	9901      	ldr	r1, [sp, #4]
  4022ea:	e7ef      	b.n	4022cc <_fflush_r+0xc>

004022ec <_cleanup_r>:
  4022ec:	4901      	ldr	r1, [pc, #4]	; (4022f4 <_cleanup_r+0x8>)
  4022ee:	f000 bbb7 	b.w	402a60 <_fwalk_reent>
  4022f2:	bf00      	nop
  4022f4:	00403a11 	.word	0x00403a11

004022f8 <__sinit.part.1>:
  4022f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022fc:	4b35      	ldr	r3, [pc, #212]	; (4023d4 <__sinit.part.1+0xdc>)
  4022fe:	6845      	ldr	r5, [r0, #4]
  402300:	63c3      	str	r3, [r0, #60]	; 0x3c
  402302:	2400      	movs	r4, #0
  402304:	4607      	mov	r7, r0
  402306:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40230a:	2304      	movs	r3, #4
  40230c:	2103      	movs	r1, #3
  40230e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  402312:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402316:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  40231a:	b083      	sub	sp, #12
  40231c:	602c      	str	r4, [r5, #0]
  40231e:	606c      	str	r4, [r5, #4]
  402320:	60ac      	str	r4, [r5, #8]
  402322:	666c      	str	r4, [r5, #100]	; 0x64
  402324:	81ec      	strh	r4, [r5, #14]
  402326:	612c      	str	r4, [r5, #16]
  402328:	616c      	str	r4, [r5, #20]
  40232a:	61ac      	str	r4, [r5, #24]
  40232c:	81ab      	strh	r3, [r5, #12]
  40232e:	4621      	mov	r1, r4
  402330:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402334:	2208      	movs	r2, #8
  402336:	f7fe fef1 	bl	40111c <memset>
  40233a:	68be      	ldr	r6, [r7, #8]
  40233c:	f8df b098 	ldr.w	fp, [pc, #152]	; 4023d8 <__sinit.part.1+0xe0>
  402340:	f8df a098 	ldr.w	sl, [pc, #152]	; 4023dc <__sinit.part.1+0xe4>
  402344:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4023e0 <__sinit.part.1+0xe8>
  402348:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4023e4 <__sinit.part.1+0xec>
  40234c:	f8c5 b020 	str.w	fp, [r5, #32]
  402350:	2301      	movs	r3, #1
  402352:	2209      	movs	r2, #9
  402354:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402358:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40235c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  402360:	61ed      	str	r5, [r5, #28]
  402362:	4621      	mov	r1, r4
  402364:	81f3      	strh	r3, [r6, #14]
  402366:	81b2      	strh	r2, [r6, #12]
  402368:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40236c:	6034      	str	r4, [r6, #0]
  40236e:	6074      	str	r4, [r6, #4]
  402370:	60b4      	str	r4, [r6, #8]
  402372:	6674      	str	r4, [r6, #100]	; 0x64
  402374:	6134      	str	r4, [r6, #16]
  402376:	6174      	str	r4, [r6, #20]
  402378:	61b4      	str	r4, [r6, #24]
  40237a:	2208      	movs	r2, #8
  40237c:	9301      	str	r3, [sp, #4]
  40237e:	f7fe fecd 	bl	40111c <memset>
  402382:	68fd      	ldr	r5, [r7, #12]
  402384:	61f6      	str	r6, [r6, #28]
  402386:	2012      	movs	r0, #18
  402388:	2202      	movs	r2, #2
  40238a:	f8c6 b020 	str.w	fp, [r6, #32]
  40238e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  402392:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402396:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40239a:	4621      	mov	r1, r4
  40239c:	81a8      	strh	r0, [r5, #12]
  40239e:	81ea      	strh	r2, [r5, #14]
  4023a0:	602c      	str	r4, [r5, #0]
  4023a2:	606c      	str	r4, [r5, #4]
  4023a4:	60ac      	str	r4, [r5, #8]
  4023a6:	666c      	str	r4, [r5, #100]	; 0x64
  4023a8:	612c      	str	r4, [r5, #16]
  4023aa:	616c      	str	r4, [r5, #20]
  4023ac:	61ac      	str	r4, [r5, #24]
  4023ae:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4023b2:	2208      	movs	r2, #8
  4023b4:	f7fe feb2 	bl	40111c <memset>
  4023b8:	9b01      	ldr	r3, [sp, #4]
  4023ba:	61ed      	str	r5, [r5, #28]
  4023bc:	f8c5 b020 	str.w	fp, [r5, #32]
  4023c0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4023c4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4023c8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4023cc:	63bb      	str	r3, [r7, #56]	; 0x38
  4023ce:	b003      	add	sp, #12
  4023d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023d4:	004022ed 	.word	0x004022ed
  4023d8:	00403785 	.word	0x00403785
  4023dc:	004037a9 	.word	0x004037a9
  4023e0:	004037e1 	.word	0x004037e1
  4023e4:	00403801 	.word	0x00403801

004023e8 <__sinit>:
  4023e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4023ea:	b103      	cbz	r3, 4023ee <__sinit+0x6>
  4023ec:	4770      	bx	lr
  4023ee:	f7ff bf83 	b.w	4022f8 <__sinit.part.1>
  4023f2:	bf00      	nop

004023f4 <__sfp_lock_acquire>:
  4023f4:	4770      	bx	lr
  4023f6:	bf00      	nop

004023f8 <__sfp_lock_release>:
  4023f8:	4770      	bx	lr
  4023fa:	bf00      	nop

004023fc <__libc_fini_array>:
  4023fc:	b538      	push	{r3, r4, r5, lr}
  4023fe:	4b08      	ldr	r3, [pc, #32]	; (402420 <__libc_fini_array+0x24>)
  402400:	4d08      	ldr	r5, [pc, #32]	; (402424 <__libc_fini_array+0x28>)
  402402:	1aed      	subs	r5, r5, r3
  402404:	10ac      	asrs	r4, r5, #2
  402406:	bf18      	it	ne
  402408:	18ed      	addne	r5, r5, r3
  40240a:	d005      	beq.n	402418 <__libc_fini_array+0x1c>
  40240c:	3c01      	subs	r4, #1
  40240e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402412:	4798      	blx	r3
  402414:	2c00      	cmp	r4, #0
  402416:	d1f9      	bne.n	40240c <__libc_fini_array+0x10>
  402418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40241c:	f001 bf1a 	b.w	404254 <_fini>
  402420:	00404260 	.word	0x00404260
  402424:	00404264 	.word	0x00404264

00402428 <__fputwc>:
  402428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40242c:	b082      	sub	sp, #8
  40242e:	4607      	mov	r7, r0
  402430:	460e      	mov	r6, r1
  402432:	4614      	mov	r4, r2
  402434:	f000 fb42 	bl	402abc <__locale_mb_cur_max>
  402438:	2801      	cmp	r0, #1
  40243a:	d041      	beq.n	4024c0 <__fputwc+0x98>
  40243c:	4638      	mov	r0, r7
  40243e:	a901      	add	r1, sp, #4
  402440:	4632      	mov	r2, r6
  402442:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402446:	f001 fa33 	bl	4038b0 <_wcrtomb_r>
  40244a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40244e:	4680      	mov	r8, r0
  402450:	d02f      	beq.n	4024b2 <__fputwc+0x8a>
  402452:	2800      	cmp	r0, #0
  402454:	d03c      	beq.n	4024d0 <__fputwc+0xa8>
  402456:	f89d 1004 	ldrb.w	r1, [sp, #4]
  40245a:	2500      	movs	r5, #0
  40245c:	e009      	b.n	402472 <__fputwc+0x4a>
  40245e:	6823      	ldr	r3, [r4, #0]
  402460:	7019      	strb	r1, [r3, #0]
  402462:	6823      	ldr	r3, [r4, #0]
  402464:	3301      	adds	r3, #1
  402466:	6023      	str	r3, [r4, #0]
  402468:	3501      	adds	r5, #1
  40246a:	45a8      	cmp	r8, r5
  40246c:	d930      	bls.n	4024d0 <__fputwc+0xa8>
  40246e:	ab01      	add	r3, sp, #4
  402470:	5d59      	ldrb	r1, [r3, r5]
  402472:	68a3      	ldr	r3, [r4, #8]
  402474:	3b01      	subs	r3, #1
  402476:	2b00      	cmp	r3, #0
  402478:	60a3      	str	r3, [r4, #8]
  40247a:	daf0      	bge.n	40245e <__fputwc+0x36>
  40247c:	69a2      	ldr	r2, [r4, #24]
  40247e:	4293      	cmp	r3, r2
  402480:	db07      	blt.n	402492 <__fputwc+0x6a>
  402482:	6823      	ldr	r3, [r4, #0]
  402484:	7019      	strb	r1, [r3, #0]
  402486:	6823      	ldr	r3, [r4, #0]
  402488:	7819      	ldrb	r1, [r3, #0]
  40248a:	290a      	cmp	r1, #10
  40248c:	f103 0301 	add.w	r3, r3, #1
  402490:	d1e9      	bne.n	402466 <__fputwc+0x3e>
  402492:	4638      	mov	r0, r7
  402494:	4622      	mov	r2, r4
  402496:	f001 f9b7 	bl	403808 <__swbuf_r>
  40249a:	f1a0 30ff 	sub.w	r0, r0, #4294967295
  40249e:	fab0 f080 	clz	r0, r0
  4024a2:	0940      	lsrs	r0, r0, #5
  4024a4:	2800      	cmp	r0, #0
  4024a6:	d0df      	beq.n	402468 <__fputwc+0x40>
  4024a8:	f04f 30ff 	mov.w	r0, #4294967295
  4024ac:	b002      	add	sp, #8
  4024ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024b2:	89a3      	ldrh	r3, [r4, #12]
  4024b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024b8:	81a3      	strh	r3, [r4, #12]
  4024ba:	b002      	add	sp, #8
  4024bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024c0:	1e73      	subs	r3, r6, #1
  4024c2:	2bfe      	cmp	r3, #254	; 0xfe
  4024c4:	d8ba      	bhi.n	40243c <__fputwc+0x14>
  4024c6:	b2f1      	uxtb	r1, r6
  4024c8:	4680      	mov	r8, r0
  4024ca:	f88d 1004 	strb.w	r1, [sp, #4]
  4024ce:	e7c4      	b.n	40245a <__fputwc+0x32>
  4024d0:	4630      	mov	r0, r6
  4024d2:	b002      	add	sp, #8
  4024d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004024d8 <_fputwc_r>:
  4024d8:	8993      	ldrh	r3, [r2, #12]
  4024da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4024de:	d10b      	bne.n	4024f8 <_fputwc_r+0x20>
  4024e0:	b410      	push	{r4}
  4024e2:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4024e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4024e8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4024ec:	6654      	str	r4, [r2, #100]	; 0x64
  4024ee:	8193      	strh	r3, [r2, #12]
  4024f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4024f4:	f7ff bf98 	b.w	402428 <__fputwc>
  4024f8:	f7ff bf96 	b.w	402428 <__fputwc>

004024fc <_malloc_trim_r>:
  4024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024fe:	4f23      	ldr	r7, [pc, #140]	; (40258c <_malloc_trim_r+0x90>)
  402500:	460c      	mov	r4, r1
  402502:	4606      	mov	r6, r0
  402504:	f000 ff32 	bl	40336c <__malloc_lock>
  402508:	68bb      	ldr	r3, [r7, #8]
  40250a:	685d      	ldr	r5, [r3, #4]
  40250c:	f025 0503 	bic.w	r5, r5, #3
  402510:	1b29      	subs	r1, r5, r4
  402512:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  402516:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40251a:	f021 010f 	bic.w	r1, r1, #15
  40251e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  402522:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402526:	db07      	blt.n	402538 <_malloc_trim_r+0x3c>
  402528:	4630      	mov	r0, r6
  40252a:	2100      	movs	r1, #0
  40252c:	f001 f918 	bl	403760 <_sbrk_r>
  402530:	68bb      	ldr	r3, [r7, #8]
  402532:	442b      	add	r3, r5
  402534:	4298      	cmp	r0, r3
  402536:	d004      	beq.n	402542 <_malloc_trim_r+0x46>
  402538:	4630      	mov	r0, r6
  40253a:	f000 ff19 	bl	403370 <__malloc_unlock>
  40253e:	2000      	movs	r0, #0
  402540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402542:	4630      	mov	r0, r6
  402544:	4261      	negs	r1, r4
  402546:	f001 f90b 	bl	403760 <_sbrk_r>
  40254a:	3001      	adds	r0, #1
  40254c:	d00d      	beq.n	40256a <_malloc_trim_r+0x6e>
  40254e:	4b10      	ldr	r3, [pc, #64]	; (402590 <_malloc_trim_r+0x94>)
  402550:	68ba      	ldr	r2, [r7, #8]
  402552:	6819      	ldr	r1, [r3, #0]
  402554:	1b2d      	subs	r5, r5, r4
  402556:	f045 0501 	orr.w	r5, r5, #1
  40255a:	4630      	mov	r0, r6
  40255c:	1b09      	subs	r1, r1, r4
  40255e:	6055      	str	r5, [r2, #4]
  402560:	6019      	str	r1, [r3, #0]
  402562:	f000 ff05 	bl	403370 <__malloc_unlock>
  402566:	2001      	movs	r0, #1
  402568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40256a:	4630      	mov	r0, r6
  40256c:	2100      	movs	r1, #0
  40256e:	f001 f8f7 	bl	403760 <_sbrk_r>
  402572:	68ba      	ldr	r2, [r7, #8]
  402574:	1a83      	subs	r3, r0, r2
  402576:	2b0f      	cmp	r3, #15
  402578:	ddde      	ble.n	402538 <_malloc_trim_r+0x3c>
  40257a:	4c06      	ldr	r4, [pc, #24]	; (402594 <_malloc_trim_r+0x98>)
  40257c:	4904      	ldr	r1, [pc, #16]	; (402590 <_malloc_trim_r+0x94>)
  40257e:	6824      	ldr	r4, [r4, #0]
  402580:	f043 0301 	orr.w	r3, r3, #1
  402584:	1b00      	subs	r0, r0, r4
  402586:	6053      	str	r3, [r2, #4]
  402588:	6008      	str	r0, [r1, #0]
  40258a:	e7d5      	b.n	402538 <_malloc_trim_r+0x3c>
  40258c:	20000458 	.word	0x20000458
  402590:	20000914 	.word	0x20000914
  402594:	20000864 	.word	0x20000864

00402598 <_free_r>:
  402598:	2900      	cmp	r1, #0
  40259a:	d04e      	beq.n	40263a <_free_r+0xa2>
  40259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025a0:	460c      	mov	r4, r1
  4025a2:	4680      	mov	r8, r0
  4025a4:	f000 fee2 	bl	40336c <__malloc_lock>
  4025a8:	f854 7c04 	ldr.w	r7, [r4, #-4]
  4025ac:	4962      	ldr	r1, [pc, #392]	; (402738 <_free_r+0x1a0>)
  4025ae:	f027 0201 	bic.w	r2, r7, #1
  4025b2:	f1a4 0508 	sub.w	r5, r4, #8
  4025b6:	18ab      	adds	r3, r5, r2
  4025b8:	688e      	ldr	r6, [r1, #8]
  4025ba:	6858      	ldr	r0, [r3, #4]
  4025bc:	429e      	cmp	r6, r3
  4025be:	f020 0003 	bic.w	r0, r0, #3
  4025c2:	d05a      	beq.n	40267a <_free_r+0xe2>
  4025c4:	07fe      	lsls	r6, r7, #31
  4025c6:	6058      	str	r0, [r3, #4]
  4025c8:	d40b      	bmi.n	4025e2 <_free_r+0x4a>
  4025ca:	f854 7c08 	ldr.w	r7, [r4, #-8]
  4025ce:	1bed      	subs	r5, r5, r7
  4025d0:	f101 0e08 	add.w	lr, r1, #8
  4025d4:	68ac      	ldr	r4, [r5, #8]
  4025d6:	4574      	cmp	r4, lr
  4025d8:	443a      	add	r2, r7
  4025da:	d067      	beq.n	4026ac <_free_r+0x114>
  4025dc:	68ef      	ldr	r7, [r5, #12]
  4025de:	60e7      	str	r7, [r4, #12]
  4025e0:	60bc      	str	r4, [r7, #8]
  4025e2:	181c      	adds	r4, r3, r0
  4025e4:	6864      	ldr	r4, [r4, #4]
  4025e6:	07e4      	lsls	r4, r4, #31
  4025e8:	d40c      	bmi.n	402604 <_free_r+0x6c>
  4025ea:	4f54      	ldr	r7, [pc, #336]	; (40273c <_free_r+0x1a4>)
  4025ec:	689c      	ldr	r4, [r3, #8]
  4025ee:	42bc      	cmp	r4, r7
  4025f0:	4402      	add	r2, r0
  4025f2:	d07c      	beq.n	4026ee <_free_r+0x156>
  4025f4:	68d8      	ldr	r0, [r3, #12]
  4025f6:	60e0      	str	r0, [r4, #12]
  4025f8:	f042 0301 	orr.w	r3, r2, #1
  4025fc:	6084      	str	r4, [r0, #8]
  4025fe:	606b      	str	r3, [r5, #4]
  402600:	50aa      	str	r2, [r5, r2]
  402602:	e003      	b.n	40260c <_free_r+0x74>
  402604:	f042 0301 	orr.w	r3, r2, #1
  402608:	606b      	str	r3, [r5, #4]
  40260a:	50aa      	str	r2, [r5, r2]
  40260c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402610:	d214      	bcs.n	40263c <_free_r+0xa4>
  402612:	08d2      	lsrs	r2, r2, #3
  402614:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  402618:	6848      	ldr	r0, [r1, #4]
  40261a:	689f      	ldr	r7, [r3, #8]
  40261c:	60af      	str	r7, [r5, #8]
  40261e:	1092      	asrs	r2, r2, #2
  402620:	2401      	movs	r4, #1
  402622:	fa04 f202 	lsl.w	r2, r4, r2
  402626:	4310      	orrs	r0, r2
  402628:	60eb      	str	r3, [r5, #12]
  40262a:	6048      	str	r0, [r1, #4]
  40262c:	609d      	str	r5, [r3, #8]
  40262e:	60fd      	str	r5, [r7, #12]
  402630:	4640      	mov	r0, r8
  402632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402636:	f000 be9b 	b.w	403370 <__malloc_unlock>
  40263a:	4770      	bx	lr
  40263c:	0a53      	lsrs	r3, r2, #9
  40263e:	2b04      	cmp	r3, #4
  402640:	d847      	bhi.n	4026d2 <_free_r+0x13a>
  402642:	0993      	lsrs	r3, r2, #6
  402644:	f103 0438 	add.w	r4, r3, #56	; 0x38
  402648:	0060      	lsls	r0, r4, #1
  40264a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  40264e:	493a      	ldr	r1, [pc, #232]	; (402738 <_free_r+0x1a0>)
  402650:	6883      	ldr	r3, [r0, #8]
  402652:	4283      	cmp	r3, r0
  402654:	d043      	beq.n	4026de <_free_r+0x146>
  402656:	6859      	ldr	r1, [r3, #4]
  402658:	f021 0103 	bic.w	r1, r1, #3
  40265c:	4291      	cmp	r1, r2
  40265e:	d902      	bls.n	402666 <_free_r+0xce>
  402660:	689b      	ldr	r3, [r3, #8]
  402662:	4298      	cmp	r0, r3
  402664:	d1f7      	bne.n	402656 <_free_r+0xbe>
  402666:	68da      	ldr	r2, [r3, #12]
  402668:	60ea      	str	r2, [r5, #12]
  40266a:	60ab      	str	r3, [r5, #8]
  40266c:	4640      	mov	r0, r8
  40266e:	6095      	str	r5, [r2, #8]
  402670:	60dd      	str	r5, [r3, #12]
  402672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402676:	f000 be7b 	b.w	403370 <__malloc_unlock>
  40267a:	07ff      	lsls	r7, r7, #31
  40267c:	4402      	add	r2, r0
  40267e:	d407      	bmi.n	402690 <_free_r+0xf8>
  402680:	f854 3c08 	ldr.w	r3, [r4, #-8]
  402684:	1aed      	subs	r5, r5, r3
  402686:	441a      	add	r2, r3
  402688:	68a8      	ldr	r0, [r5, #8]
  40268a:	68eb      	ldr	r3, [r5, #12]
  40268c:	60c3      	str	r3, [r0, #12]
  40268e:	6098      	str	r0, [r3, #8]
  402690:	4b2b      	ldr	r3, [pc, #172]	; (402740 <_free_r+0x1a8>)
  402692:	681b      	ldr	r3, [r3, #0]
  402694:	f042 0001 	orr.w	r0, r2, #1
  402698:	429a      	cmp	r2, r3
  40269a:	6068      	str	r0, [r5, #4]
  40269c:	608d      	str	r5, [r1, #8]
  40269e:	d3c7      	bcc.n	402630 <_free_r+0x98>
  4026a0:	4b28      	ldr	r3, [pc, #160]	; (402744 <_free_r+0x1ac>)
  4026a2:	4640      	mov	r0, r8
  4026a4:	6819      	ldr	r1, [r3, #0]
  4026a6:	f7ff ff29 	bl	4024fc <_malloc_trim_r>
  4026aa:	e7c1      	b.n	402630 <_free_r+0x98>
  4026ac:	1819      	adds	r1, r3, r0
  4026ae:	6849      	ldr	r1, [r1, #4]
  4026b0:	07c9      	lsls	r1, r1, #31
  4026b2:	d409      	bmi.n	4026c8 <_free_r+0x130>
  4026b4:	68d9      	ldr	r1, [r3, #12]
  4026b6:	689b      	ldr	r3, [r3, #8]
  4026b8:	4402      	add	r2, r0
  4026ba:	f042 0001 	orr.w	r0, r2, #1
  4026be:	60d9      	str	r1, [r3, #12]
  4026c0:	608b      	str	r3, [r1, #8]
  4026c2:	6068      	str	r0, [r5, #4]
  4026c4:	50aa      	str	r2, [r5, r2]
  4026c6:	e7b3      	b.n	402630 <_free_r+0x98>
  4026c8:	f042 0301 	orr.w	r3, r2, #1
  4026cc:	606b      	str	r3, [r5, #4]
  4026ce:	50aa      	str	r2, [r5, r2]
  4026d0:	e7ae      	b.n	402630 <_free_r+0x98>
  4026d2:	2b14      	cmp	r3, #20
  4026d4:	d814      	bhi.n	402700 <_free_r+0x168>
  4026d6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  4026da:	0060      	lsls	r0, r4, #1
  4026dc:	e7b5      	b.n	40264a <_free_r+0xb2>
  4026de:	684a      	ldr	r2, [r1, #4]
  4026e0:	10a4      	asrs	r4, r4, #2
  4026e2:	2001      	movs	r0, #1
  4026e4:	40a0      	lsls	r0, r4
  4026e6:	4302      	orrs	r2, r0
  4026e8:	604a      	str	r2, [r1, #4]
  4026ea:	461a      	mov	r2, r3
  4026ec:	e7bc      	b.n	402668 <_free_r+0xd0>
  4026ee:	f042 0301 	orr.w	r3, r2, #1
  4026f2:	614d      	str	r5, [r1, #20]
  4026f4:	610d      	str	r5, [r1, #16]
  4026f6:	60ec      	str	r4, [r5, #12]
  4026f8:	60ac      	str	r4, [r5, #8]
  4026fa:	606b      	str	r3, [r5, #4]
  4026fc:	50aa      	str	r2, [r5, r2]
  4026fe:	e797      	b.n	402630 <_free_r+0x98>
  402700:	2b54      	cmp	r3, #84	; 0x54
  402702:	d804      	bhi.n	40270e <_free_r+0x176>
  402704:	0b13      	lsrs	r3, r2, #12
  402706:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  40270a:	0060      	lsls	r0, r4, #1
  40270c:	e79d      	b.n	40264a <_free_r+0xb2>
  40270e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402712:	d804      	bhi.n	40271e <_free_r+0x186>
  402714:	0bd3      	lsrs	r3, r2, #15
  402716:	f103 0477 	add.w	r4, r3, #119	; 0x77
  40271a:	0060      	lsls	r0, r4, #1
  40271c:	e795      	b.n	40264a <_free_r+0xb2>
  40271e:	f240 5054 	movw	r0, #1364	; 0x554
  402722:	4283      	cmp	r3, r0
  402724:	d804      	bhi.n	402730 <_free_r+0x198>
  402726:	0c93      	lsrs	r3, r2, #18
  402728:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  40272c:	0060      	lsls	r0, r4, #1
  40272e:	e78c      	b.n	40264a <_free_r+0xb2>
  402730:	20fc      	movs	r0, #252	; 0xfc
  402732:	247e      	movs	r4, #126	; 0x7e
  402734:	e789      	b.n	40264a <_free_r+0xb2>
  402736:	bf00      	nop
  402738:	20000458 	.word	0x20000458
  40273c:	20000460 	.word	0x20000460
  402740:	20000860 	.word	0x20000860
  402744:	20000910 	.word	0x20000910

00402748 <__sfvwrite_r>:
  402748:	6893      	ldr	r3, [r2, #8]
  40274a:	2b00      	cmp	r3, #0
  40274c:	d07a      	beq.n	402844 <__sfvwrite_r+0xfc>
  40274e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402752:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
  402756:	f01e 0f08 	tst.w	lr, #8
  40275a:	b083      	sub	sp, #12
  40275c:	460c      	mov	r4, r1
  40275e:	4681      	mov	r9, r0
  402760:	4616      	mov	r6, r2
  402762:	d026      	beq.n	4027b2 <__sfvwrite_r+0x6a>
  402764:	690b      	ldr	r3, [r1, #16]
  402766:	b323      	cbz	r3, 4027b2 <__sfvwrite_r+0x6a>
  402768:	f00e 0802 	and.w	r8, lr, #2
  40276c:	fa1f f088 	uxth.w	r0, r8
  402770:	6835      	ldr	r5, [r6, #0]
  402772:	b370      	cbz	r0, 4027d2 <__sfvwrite_r+0x8a>
  402774:	f04f 0a00 	mov.w	sl, #0
  402778:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 402a5c <__sfvwrite_r+0x314>
  40277c:	46d0      	mov	r8, sl
  40277e:	45d8      	cmp	r8, fp
  402780:	4643      	mov	r3, r8
  402782:	4652      	mov	r2, sl
  402784:	bf28      	it	cs
  402786:	465b      	movcs	r3, fp
  402788:	4648      	mov	r0, r9
  40278a:	f1b8 0f00 	cmp.w	r8, #0
  40278e:	d053      	beq.n	402838 <__sfvwrite_r+0xf0>
  402790:	69e1      	ldr	r1, [r4, #28]
  402792:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402794:	47b8      	blx	r7
  402796:	2800      	cmp	r0, #0
  402798:	dd73      	ble.n	402882 <__sfvwrite_r+0x13a>
  40279a:	68b3      	ldr	r3, [r6, #8]
  40279c:	1a1b      	subs	r3, r3, r0
  40279e:	4482      	add	sl, r0
  4027a0:	ebc0 0808 	rsb	r8, r0, r8
  4027a4:	60b3      	str	r3, [r6, #8]
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	d1e9      	bne.n	40277e <__sfvwrite_r+0x36>
  4027aa:	2000      	movs	r0, #0
  4027ac:	b003      	add	sp, #12
  4027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027b2:	4648      	mov	r0, r9
  4027b4:	4621      	mov	r1, r4
  4027b6:	f7ff fc67 	bl	402088 <__swsetup_r>
  4027ba:	2800      	cmp	r0, #0
  4027bc:	f040 8145 	bne.w	402a4a <__sfvwrite_r+0x302>
  4027c0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  4027c4:	6835      	ldr	r5, [r6, #0]
  4027c6:	f00e 0802 	and.w	r8, lr, #2
  4027ca:	fa1f f088 	uxth.w	r0, r8
  4027ce:	2800      	cmp	r0, #0
  4027d0:	d1d0      	bne.n	402774 <__sfvwrite_r+0x2c>
  4027d2:	f01e 0b01 	ands.w	fp, lr, #1
  4027d6:	d15d      	bne.n	402894 <__sfvwrite_r+0x14c>
  4027d8:	46d8      	mov	r8, fp
  4027da:	f1b8 0f00 	cmp.w	r8, #0
  4027de:	d025      	beq.n	40282c <__sfvwrite_r+0xe4>
  4027e0:	f41e 7f00 	tst.w	lr, #512	; 0x200
  4027e4:	68a7      	ldr	r7, [r4, #8]
  4027e6:	d02f      	beq.n	402848 <__sfvwrite_r+0x100>
  4027e8:	45b8      	cmp	r8, r7
  4027ea:	46ba      	mov	sl, r7
  4027ec:	f0c0 80a9 	bcc.w	402942 <__sfvwrite_r+0x1fa>
  4027f0:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  4027f4:	f040 80b6 	bne.w	402964 <__sfvwrite_r+0x21c>
  4027f8:	6820      	ldr	r0, [r4, #0]
  4027fa:	4652      	mov	r2, sl
  4027fc:	4659      	mov	r1, fp
  4027fe:	f000 fd51 	bl	4032a4 <memmove>
  402802:	68a0      	ldr	r0, [r4, #8]
  402804:	6822      	ldr	r2, [r4, #0]
  402806:	1bc0      	subs	r0, r0, r7
  402808:	eb02 030a 	add.w	r3, r2, sl
  40280c:	60a0      	str	r0, [r4, #8]
  40280e:	6023      	str	r3, [r4, #0]
  402810:	4640      	mov	r0, r8
  402812:	68b3      	ldr	r3, [r6, #8]
  402814:	1a1b      	subs	r3, r3, r0
  402816:	4483      	add	fp, r0
  402818:	ebc0 0808 	rsb	r8, r0, r8
  40281c:	60b3      	str	r3, [r6, #8]
  40281e:	2b00      	cmp	r3, #0
  402820:	d0c3      	beq.n	4027aa <__sfvwrite_r+0x62>
  402822:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
  402826:	f1b8 0f00 	cmp.w	r8, #0
  40282a:	d1d9      	bne.n	4027e0 <__sfvwrite_r+0x98>
  40282c:	f8d5 b000 	ldr.w	fp, [r5]
  402830:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402834:	3508      	adds	r5, #8
  402836:	e7d0      	b.n	4027da <__sfvwrite_r+0x92>
  402838:	f8d5 a000 	ldr.w	sl, [r5]
  40283c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402840:	3508      	adds	r5, #8
  402842:	e79c      	b.n	40277e <__sfvwrite_r+0x36>
  402844:	2000      	movs	r0, #0
  402846:	4770      	bx	lr
  402848:	6820      	ldr	r0, [r4, #0]
  40284a:	6923      	ldr	r3, [r4, #16]
  40284c:	4298      	cmp	r0, r3
  40284e:	d803      	bhi.n	402858 <__sfvwrite_r+0x110>
  402850:	6962      	ldr	r2, [r4, #20]
  402852:	4590      	cmp	r8, r2
  402854:	f080 80b9 	bcs.w	4029ca <__sfvwrite_r+0x282>
  402858:	4547      	cmp	r7, r8
  40285a:	bf28      	it	cs
  40285c:	4647      	movcs	r7, r8
  40285e:	463a      	mov	r2, r7
  402860:	4659      	mov	r1, fp
  402862:	f000 fd1f 	bl	4032a4 <memmove>
  402866:	68a3      	ldr	r3, [r4, #8]
  402868:	6822      	ldr	r2, [r4, #0]
  40286a:	1bdb      	subs	r3, r3, r7
  40286c:	443a      	add	r2, r7
  40286e:	60a3      	str	r3, [r4, #8]
  402870:	6022      	str	r2, [r4, #0]
  402872:	2b00      	cmp	r3, #0
  402874:	d14a      	bne.n	40290c <__sfvwrite_r+0x1c4>
  402876:	4648      	mov	r0, r9
  402878:	4621      	mov	r1, r4
  40287a:	f7ff fd21 	bl	4022c0 <_fflush_r>
  40287e:	2800      	cmp	r0, #0
  402880:	d044      	beq.n	40290c <__sfvwrite_r+0x1c4>
  402882:	89a3      	ldrh	r3, [r4, #12]
  402884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402888:	f04f 30ff 	mov.w	r0, #4294967295
  40288c:	81a3      	strh	r3, [r4, #12]
  40288e:	b003      	add	sp, #12
  402890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402894:	4680      	mov	r8, r0
  402896:	9000      	str	r0, [sp, #0]
  402898:	4683      	mov	fp, r0
  40289a:	4682      	mov	sl, r0
  40289c:	f1ba 0f00 	cmp.w	sl, #0
  4028a0:	d02c      	beq.n	4028fc <__sfvwrite_r+0x1b4>
  4028a2:	9b00      	ldr	r3, [sp, #0]
  4028a4:	2b00      	cmp	r3, #0
  4028a6:	d050      	beq.n	40294a <__sfvwrite_r+0x202>
  4028a8:	6820      	ldr	r0, [r4, #0]
  4028aa:	6921      	ldr	r1, [r4, #16]
  4028ac:	f8d4 e008 	ldr.w	lr, [r4, #8]
  4028b0:	6962      	ldr	r2, [r4, #20]
  4028b2:	45d0      	cmp	r8, sl
  4028b4:	4643      	mov	r3, r8
  4028b6:	bf28      	it	cs
  4028b8:	4653      	movcs	r3, sl
  4028ba:	4288      	cmp	r0, r1
  4028bc:	461f      	mov	r7, r3
  4028be:	d904      	bls.n	4028ca <__sfvwrite_r+0x182>
  4028c0:	eb0e 0c02 	add.w	ip, lr, r2
  4028c4:	4563      	cmp	r3, ip
  4028c6:	f300 8092 	bgt.w	4029ee <__sfvwrite_r+0x2a6>
  4028ca:	4293      	cmp	r3, r2
  4028cc:	db20      	blt.n	402910 <__sfvwrite_r+0x1c8>
  4028ce:	4613      	mov	r3, r2
  4028d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4028d2:	69e1      	ldr	r1, [r4, #28]
  4028d4:	4648      	mov	r0, r9
  4028d6:	465a      	mov	r2, fp
  4028d8:	47b8      	blx	r7
  4028da:	1e07      	subs	r7, r0, #0
  4028dc:	ddd1      	ble.n	402882 <__sfvwrite_r+0x13a>
  4028de:	ebb8 0807 	subs.w	r8, r8, r7
  4028e2:	d025      	beq.n	402930 <__sfvwrite_r+0x1e8>
  4028e4:	68b3      	ldr	r3, [r6, #8]
  4028e6:	1bdb      	subs	r3, r3, r7
  4028e8:	44bb      	add	fp, r7
  4028ea:	ebc7 0a0a 	rsb	sl, r7, sl
  4028ee:	60b3      	str	r3, [r6, #8]
  4028f0:	2b00      	cmp	r3, #0
  4028f2:	f43f af5a 	beq.w	4027aa <__sfvwrite_r+0x62>
  4028f6:	f1ba 0f00 	cmp.w	sl, #0
  4028fa:	d1d2      	bne.n	4028a2 <__sfvwrite_r+0x15a>
  4028fc:	2300      	movs	r3, #0
  4028fe:	f8d5 b000 	ldr.w	fp, [r5]
  402902:	f8d5 a004 	ldr.w	sl, [r5, #4]
  402906:	9300      	str	r3, [sp, #0]
  402908:	3508      	adds	r5, #8
  40290a:	e7c7      	b.n	40289c <__sfvwrite_r+0x154>
  40290c:	4638      	mov	r0, r7
  40290e:	e780      	b.n	402812 <__sfvwrite_r+0xca>
  402910:	461a      	mov	r2, r3
  402912:	4659      	mov	r1, fp
  402914:	9301      	str	r3, [sp, #4]
  402916:	f000 fcc5 	bl	4032a4 <memmove>
  40291a:	68a2      	ldr	r2, [r4, #8]
  40291c:	6821      	ldr	r1, [r4, #0]
  40291e:	9b01      	ldr	r3, [sp, #4]
  402920:	ebb8 0807 	subs.w	r8, r8, r7
  402924:	eba2 0203 	sub.w	r2, r2, r3
  402928:	440b      	add	r3, r1
  40292a:	60a2      	str	r2, [r4, #8]
  40292c:	6023      	str	r3, [r4, #0]
  40292e:	d1d9      	bne.n	4028e4 <__sfvwrite_r+0x19c>
  402930:	4648      	mov	r0, r9
  402932:	4621      	mov	r1, r4
  402934:	f7ff fcc4 	bl	4022c0 <_fflush_r>
  402938:	2800      	cmp	r0, #0
  40293a:	d1a2      	bne.n	402882 <__sfvwrite_r+0x13a>
  40293c:	f8cd 8000 	str.w	r8, [sp]
  402940:	e7d0      	b.n	4028e4 <__sfvwrite_r+0x19c>
  402942:	6820      	ldr	r0, [r4, #0]
  402944:	4647      	mov	r7, r8
  402946:	46c2      	mov	sl, r8
  402948:	e757      	b.n	4027fa <__sfvwrite_r+0xb2>
  40294a:	4658      	mov	r0, fp
  40294c:	210a      	movs	r1, #10
  40294e:	4652      	mov	r2, sl
  402950:	f000 fbc4 	bl	4030dc <memchr>
  402954:	2800      	cmp	r0, #0
  402956:	d073      	beq.n	402a40 <__sfvwrite_r+0x2f8>
  402958:	3001      	adds	r0, #1
  40295a:	2301      	movs	r3, #1
  40295c:	ebcb 0800 	rsb	r8, fp, r0
  402960:	9300      	str	r3, [sp, #0]
  402962:	e7a1      	b.n	4028a8 <__sfvwrite_r+0x160>
  402964:	6967      	ldr	r7, [r4, #20]
  402966:	6921      	ldr	r1, [r4, #16]
  402968:	6823      	ldr	r3, [r4, #0]
  40296a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40296e:	1a5b      	subs	r3, r3, r1
  402970:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  402974:	1c58      	adds	r0, r3, #1
  402976:	107f      	asrs	r7, r7, #1
  402978:	4440      	add	r0, r8
  40297a:	4287      	cmp	r7, r0
  40297c:	463a      	mov	r2, r7
  40297e:	bf3c      	itt	cc
  402980:	4607      	movcc	r7, r0
  402982:	463a      	movcc	r2, r7
  402984:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  402988:	9300      	str	r3, [sp, #0]
  40298a:	d046      	beq.n	402a1a <__sfvwrite_r+0x2d2>
  40298c:	4611      	mov	r1, r2
  40298e:	4648      	mov	r0, r9
  402990:	f000 f912 	bl	402bb8 <_malloc_r>
  402994:	9b00      	ldr	r3, [sp, #0]
  402996:	4682      	mov	sl, r0
  402998:	2800      	cmp	r0, #0
  40299a:	d059      	beq.n	402a50 <__sfvwrite_r+0x308>
  40299c:	461a      	mov	r2, r3
  40299e:	6921      	ldr	r1, [r4, #16]
  4029a0:	9300      	str	r3, [sp, #0]
  4029a2:	f000 fbe5 	bl	403170 <memcpy>
  4029a6:	89a2      	ldrh	r2, [r4, #12]
  4029a8:	9b00      	ldr	r3, [sp, #0]
  4029aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4029ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4029b2:	81a2      	strh	r2, [r4, #12]
  4029b4:	eb0a 0003 	add.w	r0, sl, r3
  4029b8:	1afb      	subs	r3, r7, r3
  4029ba:	f8c4 a010 	str.w	sl, [r4, #16]
  4029be:	6167      	str	r7, [r4, #20]
  4029c0:	6020      	str	r0, [r4, #0]
  4029c2:	60a3      	str	r3, [r4, #8]
  4029c4:	4647      	mov	r7, r8
  4029c6:	46c2      	mov	sl, r8
  4029c8:	e717      	b.n	4027fa <__sfvwrite_r+0xb2>
  4029ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4029ce:	4543      	cmp	r3, r8
  4029d0:	bf28      	it	cs
  4029d2:	4643      	movcs	r3, r8
  4029d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4029d6:	fb93 f3f2 	sdiv	r3, r3, r2
  4029da:	4648      	mov	r0, r9
  4029dc:	fb03 f302 	mul.w	r3, r3, r2
  4029e0:	69e1      	ldr	r1, [r4, #28]
  4029e2:	465a      	mov	r2, fp
  4029e4:	47b8      	blx	r7
  4029e6:	2800      	cmp	r0, #0
  4029e8:	f73f af13 	bgt.w	402812 <__sfvwrite_r+0xca>
  4029ec:	e749      	b.n	402882 <__sfvwrite_r+0x13a>
  4029ee:	4662      	mov	r2, ip
  4029f0:	4659      	mov	r1, fp
  4029f2:	f8cd c004 	str.w	ip, [sp, #4]
  4029f6:	f000 fc55 	bl	4032a4 <memmove>
  4029fa:	6823      	ldr	r3, [r4, #0]
  4029fc:	f8dd c004 	ldr.w	ip, [sp, #4]
  402a00:	4463      	add	r3, ip
  402a02:	6023      	str	r3, [r4, #0]
  402a04:	4648      	mov	r0, r9
  402a06:	4621      	mov	r1, r4
  402a08:	f7ff fc5a 	bl	4022c0 <_fflush_r>
  402a0c:	f8dd c004 	ldr.w	ip, [sp, #4]
  402a10:	2800      	cmp	r0, #0
  402a12:	f47f af36 	bne.w	402882 <__sfvwrite_r+0x13a>
  402a16:	4667      	mov	r7, ip
  402a18:	e761      	b.n	4028de <__sfvwrite_r+0x196>
  402a1a:	4648      	mov	r0, r9
  402a1c:	f000 fcaa 	bl	403374 <_realloc_r>
  402a20:	9b00      	ldr	r3, [sp, #0]
  402a22:	4682      	mov	sl, r0
  402a24:	2800      	cmp	r0, #0
  402a26:	d1c5      	bne.n	4029b4 <__sfvwrite_r+0x26c>
  402a28:	4648      	mov	r0, r9
  402a2a:	6921      	ldr	r1, [r4, #16]
  402a2c:	f7ff fdb4 	bl	402598 <_free_r>
  402a30:	89a3      	ldrh	r3, [r4, #12]
  402a32:	220c      	movs	r2, #12
  402a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402a38:	b29b      	uxth	r3, r3
  402a3a:	f8c9 2000 	str.w	r2, [r9]
  402a3e:	e721      	b.n	402884 <__sfvwrite_r+0x13c>
  402a40:	2301      	movs	r3, #1
  402a42:	f10a 0801 	add.w	r8, sl, #1
  402a46:	9300      	str	r3, [sp, #0]
  402a48:	e72e      	b.n	4028a8 <__sfvwrite_r+0x160>
  402a4a:	f04f 30ff 	mov.w	r0, #4294967295
  402a4e:	e6ad      	b.n	4027ac <__sfvwrite_r+0x64>
  402a50:	230c      	movs	r3, #12
  402a52:	f8c9 3000 	str.w	r3, [r9]
  402a56:	89a3      	ldrh	r3, [r4, #12]
  402a58:	e714      	b.n	402884 <__sfvwrite_r+0x13c>
  402a5a:	bf00      	nop
  402a5c:	7ffffc00 	.word	0x7ffffc00

00402a60 <_fwalk_reent>:
  402a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a64:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402a68:	d01f      	beq.n	402aaa <_fwalk_reent+0x4a>
  402a6a:	4688      	mov	r8, r1
  402a6c:	4606      	mov	r6, r0
  402a6e:	f04f 0900 	mov.w	r9, #0
  402a72:	687d      	ldr	r5, [r7, #4]
  402a74:	68bc      	ldr	r4, [r7, #8]
  402a76:	3d01      	subs	r5, #1
  402a78:	d411      	bmi.n	402a9e <_fwalk_reent+0x3e>
  402a7a:	89a3      	ldrh	r3, [r4, #12]
  402a7c:	2b01      	cmp	r3, #1
  402a7e:	f105 35ff 	add.w	r5, r5, #4294967295
  402a82:	d908      	bls.n	402a96 <_fwalk_reent+0x36>
  402a84:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402a88:	3301      	adds	r3, #1
  402a8a:	4621      	mov	r1, r4
  402a8c:	4630      	mov	r0, r6
  402a8e:	d002      	beq.n	402a96 <_fwalk_reent+0x36>
  402a90:	47c0      	blx	r8
  402a92:	ea49 0900 	orr.w	r9, r9, r0
  402a96:	1c6b      	adds	r3, r5, #1
  402a98:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402a9c:	d1ed      	bne.n	402a7a <_fwalk_reent+0x1a>
  402a9e:	683f      	ldr	r7, [r7, #0]
  402aa0:	2f00      	cmp	r7, #0
  402aa2:	d1e6      	bne.n	402a72 <_fwalk_reent+0x12>
  402aa4:	4648      	mov	r0, r9
  402aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402aaa:	46b9      	mov	r9, r7
  402aac:	4648      	mov	r0, r9
  402aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402ab2:	bf00      	nop

00402ab4 <__locale_charset>:
  402ab4:	4800      	ldr	r0, [pc, #0]	; (402ab8 <__locale_charset+0x4>)
  402ab6:	4770      	bx	lr
  402ab8:	20000434 	.word	0x20000434

00402abc <__locale_mb_cur_max>:
  402abc:	4b01      	ldr	r3, [pc, #4]	; (402ac4 <__locale_mb_cur_max+0x8>)
  402abe:	6818      	ldr	r0, [r3, #0]
  402ac0:	4770      	bx	lr
  402ac2:	bf00      	nop
  402ac4:	20000454 	.word	0x20000454

00402ac8 <__smakebuf_r>:
  402ac8:	898b      	ldrh	r3, [r1, #12]
  402aca:	b29a      	uxth	r2, r3
  402acc:	f012 0f02 	tst.w	r2, #2
  402ad0:	d13c      	bne.n	402b4c <__smakebuf_r+0x84>
  402ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ad4:	460c      	mov	r4, r1
  402ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ada:	2900      	cmp	r1, #0
  402adc:	b091      	sub	sp, #68	; 0x44
  402ade:	4605      	mov	r5, r0
  402ae0:	db19      	blt.n	402b16 <__smakebuf_r+0x4e>
  402ae2:	aa01      	add	r2, sp, #4
  402ae4:	f000 ffd6 	bl	403a94 <_fstat_r>
  402ae8:	2800      	cmp	r0, #0
  402aea:	db12      	blt.n	402b12 <__smakebuf_r+0x4a>
  402aec:	9b02      	ldr	r3, [sp, #8]
  402aee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  402af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402af6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
  402afa:	fab7 f787 	clz	r7, r7
  402afe:	ea4f 1757 	mov.w	r7, r7, lsr #5
  402b02:	d02a      	beq.n	402b5a <__smakebuf_r+0x92>
  402b04:	89a3      	ldrh	r3, [r4, #12]
  402b06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402b0a:	81a3      	strh	r3, [r4, #12]
  402b0c:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402b10:	e00b      	b.n	402b2a <__smakebuf_r+0x62>
  402b12:	89a3      	ldrh	r3, [r4, #12]
  402b14:	b29a      	uxth	r2, r3
  402b16:	f012 0f80 	tst.w	r2, #128	; 0x80
  402b1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402b1e:	81a3      	strh	r3, [r4, #12]
  402b20:	bf0c      	ite	eq
  402b22:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402b26:	2640      	movne	r6, #64	; 0x40
  402b28:	2700      	movs	r7, #0
  402b2a:	4628      	mov	r0, r5
  402b2c:	4631      	mov	r1, r6
  402b2e:	f000 f843 	bl	402bb8 <_malloc_r>
  402b32:	89a3      	ldrh	r3, [r4, #12]
  402b34:	b340      	cbz	r0, 402b88 <__smakebuf_r+0xc0>
  402b36:	4a1a      	ldr	r2, [pc, #104]	; (402ba0 <__smakebuf_r+0xd8>)
  402b38:	63ea      	str	r2, [r5, #60]	; 0x3c
  402b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b3e:	81a3      	strh	r3, [r4, #12]
  402b40:	6020      	str	r0, [r4, #0]
  402b42:	6120      	str	r0, [r4, #16]
  402b44:	6166      	str	r6, [r4, #20]
  402b46:	b99f      	cbnz	r7, 402b70 <__smakebuf_r+0xa8>
  402b48:	b011      	add	sp, #68	; 0x44
  402b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b4c:	f101 0343 	add.w	r3, r1, #67	; 0x43
  402b50:	2201      	movs	r2, #1
  402b52:	600b      	str	r3, [r1, #0]
  402b54:	610b      	str	r3, [r1, #16]
  402b56:	614a      	str	r2, [r1, #20]
  402b58:	4770      	bx	lr
  402b5a:	4b12      	ldr	r3, [pc, #72]	; (402ba4 <__smakebuf_r+0xdc>)
  402b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  402b5e:	429a      	cmp	r2, r3
  402b60:	d1d0      	bne.n	402b04 <__smakebuf_r+0x3c>
  402b62:	89a3      	ldrh	r3, [r4, #12]
  402b64:	f44f 6680 	mov.w	r6, #1024	; 0x400
  402b68:	4333      	orrs	r3, r6
  402b6a:	81a3      	strh	r3, [r4, #12]
  402b6c:	64e6      	str	r6, [r4, #76]	; 0x4c
  402b6e:	e7dc      	b.n	402b2a <__smakebuf_r+0x62>
  402b70:	4628      	mov	r0, r5
  402b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402b76:	f000 ffa1 	bl	403abc <_isatty_r>
  402b7a:	2800      	cmp	r0, #0
  402b7c:	d0e4      	beq.n	402b48 <__smakebuf_r+0x80>
  402b7e:	89a3      	ldrh	r3, [r4, #12]
  402b80:	f043 0301 	orr.w	r3, r3, #1
  402b84:	81a3      	strh	r3, [r4, #12]
  402b86:	e7df      	b.n	402b48 <__smakebuf_r+0x80>
  402b88:	059a      	lsls	r2, r3, #22
  402b8a:	d4dd      	bmi.n	402b48 <__smakebuf_r+0x80>
  402b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b90:	f043 0302 	orr.w	r3, r3, #2
  402b94:	2101      	movs	r1, #1
  402b96:	81a3      	strh	r3, [r4, #12]
  402b98:	6022      	str	r2, [r4, #0]
  402b9a:	6122      	str	r2, [r4, #16]
  402b9c:	6161      	str	r1, [r4, #20]
  402b9e:	e7d3      	b.n	402b48 <__smakebuf_r+0x80>
  402ba0:	004022ed 	.word	0x004022ed
  402ba4:	004037e1 	.word	0x004037e1

00402ba8 <malloc>:
  402ba8:	4b02      	ldr	r3, [pc, #8]	; (402bb4 <malloc+0xc>)
  402baa:	4601      	mov	r1, r0
  402bac:	6818      	ldr	r0, [r3, #0]
  402bae:	f000 b803 	b.w	402bb8 <_malloc_r>
  402bb2:	bf00      	nop
  402bb4:	20000430 	.word	0x20000430

00402bb8 <_malloc_r>:
  402bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bbc:	f101 050b 	add.w	r5, r1, #11
  402bc0:	2d16      	cmp	r5, #22
  402bc2:	b083      	sub	sp, #12
  402bc4:	4606      	mov	r6, r0
  402bc6:	d927      	bls.n	402c18 <_malloc_r+0x60>
  402bc8:	f035 0507 	bics.w	r5, r5, #7
  402bcc:	f100 80b6 	bmi.w	402d3c <_malloc_r+0x184>
  402bd0:	42a9      	cmp	r1, r5
  402bd2:	f200 80b3 	bhi.w	402d3c <_malloc_r+0x184>
  402bd6:	f000 fbc9 	bl	40336c <__malloc_lock>
  402bda:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402bde:	d222      	bcs.n	402c26 <_malloc_r+0x6e>
  402be0:	4fc2      	ldr	r7, [pc, #776]	; (402eec <_malloc_r+0x334>)
  402be2:	08e8      	lsrs	r0, r5, #3
  402be4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  402be8:	68dc      	ldr	r4, [r3, #12]
  402bea:	429c      	cmp	r4, r3
  402bec:	f000 81c8 	beq.w	402f80 <_malloc_r+0x3c8>
  402bf0:	6863      	ldr	r3, [r4, #4]
  402bf2:	68e1      	ldr	r1, [r4, #12]
  402bf4:	68a5      	ldr	r5, [r4, #8]
  402bf6:	f023 0303 	bic.w	r3, r3, #3
  402bfa:	4423      	add	r3, r4
  402bfc:	4630      	mov	r0, r6
  402bfe:	685a      	ldr	r2, [r3, #4]
  402c00:	60e9      	str	r1, [r5, #12]
  402c02:	f042 0201 	orr.w	r2, r2, #1
  402c06:	608d      	str	r5, [r1, #8]
  402c08:	605a      	str	r2, [r3, #4]
  402c0a:	f000 fbb1 	bl	403370 <__malloc_unlock>
  402c0e:	3408      	adds	r4, #8
  402c10:	4620      	mov	r0, r4
  402c12:	b003      	add	sp, #12
  402c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c18:	2910      	cmp	r1, #16
  402c1a:	f200 808f 	bhi.w	402d3c <_malloc_r+0x184>
  402c1e:	f000 fba5 	bl	40336c <__malloc_lock>
  402c22:	2510      	movs	r5, #16
  402c24:	e7dc      	b.n	402be0 <_malloc_r+0x28>
  402c26:	0a68      	lsrs	r0, r5, #9
  402c28:	f000 808f 	beq.w	402d4a <_malloc_r+0x192>
  402c2c:	2804      	cmp	r0, #4
  402c2e:	f200 8154 	bhi.w	402eda <_malloc_r+0x322>
  402c32:	09a8      	lsrs	r0, r5, #6
  402c34:	3038      	adds	r0, #56	; 0x38
  402c36:	0041      	lsls	r1, r0, #1
  402c38:	4fac      	ldr	r7, [pc, #688]	; (402eec <_malloc_r+0x334>)
  402c3a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  402c3e:	68cc      	ldr	r4, [r1, #12]
  402c40:	42a1      	cmp	r1, r4
  402c42:	d106      	bne.n	402c52 <_malloc_r+0x9a>
  402c44:	e00c      	b.n	402c60 <_malloc_r+0xa8>
  402c46:	2a00      	cmp	r2, #0
  402c48:	f280 8082 	bge.w	402d50 <_malloc_r+0x198>
  402c4c:	68e4      	ldr	r4, [r4, #12]
  402c4e:	42a1      	cmp	r1, r4
  402c50:	d006      	beq.n	402c60 <_malloc_r+0xa8>
  402c52:	6863      	ldr	r3, [r4, #4]
  402c54:	f023 0303 	bic.w	r3, r3, #3
  402c58:	1b5a      	subs	r2, r3, r5
  402c5a:	2a0f      	cmp	r2, #15
  402c5c:	ddf3      	ble.n	402c46 <_malloc_r+0x8e>
  402c5e:	3801      	subs	r0, #1
  402c60:	3001      	adds	r0, #1
  402c62:	49a2      	ldr	r1, [pc, #648]	; (402eec <_malloc_r+0x334>)
  402c64:	693c      	ldr	r4, [r7, #16]
  402c66:	f101 0e08 	add.w	lr, r1, #8
  402c6a:	4574      	cmp	r4, lr
  402c6c:	f000 817d 	beq.w	402f6a <_malloc_r+0x3b2>
  402c70:	6863      	ldr	r3, [r4, #4]
  402c72:	f023 0303 	bic.w	r3, r3, #3
  402c76:	1b5a      	subs	r2, r3, r5
  402c78:	2a0f      	cmp	r2, #15
  402c7a:	f300 8163 	bgt.w	402f44 <_malloc_r+0x38c>
  402c7e:	2a00      	cmp	r2, #0
  402c80:	f8c1 e014 	str.w	lr, [r1, #20]
  402c84:	f8c1 e010 	str.w	lr, [r1, #16]
  402c88:	da73      	bge.n	402d72 <_malloc_r+0x1ba>
  402c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c8e:	f080 8139 	bcs.w	402f04 <_malloc_r+0x34c>
  402c92:	08db      	lsrs	r3, r3, #3
  402c94:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  402c98:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  402c9c:	684a      	ldr	r2, [r1, #4]
  402c9e:	f8d8 9008 	ldr.w	r9, [r8, #8]
  402ca2:	f8c4 9008 	str.w	r9, [r4, #8]
  402ca6:	2301      	movs	r3, #1
  402ca8:	fa03 f30c 	lsl.w	r3, r3, ip
  402cac:	4313      	orrs	r3, r2
  402cae:	f8c4 800c 	str.w	r8, [r4, #12]
  402cb2:	604b      	str	r3, [r1, #4]
  402cb4:	f8c8 4008 	str.w	r4, [r8, #8]
  402cb8:	f8c9 400c 	str.w	r4, [r9, #12]
  402cbc:	1082      	asrs	r2, r0, #2
  402cbe:	2401      	movs	r4, #1
  402cc0:	4094      	lsls	r4, r2
  402cc2:	429c      	cmp	r4, r3
  402cc4:	d862      	bhi.n	402d8c <_malloc_r+0x1d4>
  402cc6:	4223      	tst	r3, r4
  402cc8:	d106      	bne.n	402cd8 <_malloc_r+0x120>
  402cca:	f020 0003 	bic.w	r0, r0, #3
  402cce:	0064      	lsls	r4, r4, #1
  402cd0:	4223      	tst	r3, r4
  402cd2:	f100 0004 	add.w	r0, r0, #4
  402cd6:	d0fa      	beq.n	402cce <_malloc_r+0x116>
  402cd8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  402cdc:	46c4      	mov	ip, r8
  402cde:	4681      	mov	r9, r0
  402ce0:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402ce4:	459c      	cmp	ip, r3
  402ce6:	d107      	bne.n	402cf8 <_malloc_r+0x140>
  402ce8:	e141      	b.n	402f6e <_malloc_r+0x3b6>
  402cea:	2900      	cmp	r1, #0
  402cec:	f280 8151 	bge.w	402f92 <_malloc_r+0x3da>
  402cf0:	68db      	ldr	r3, [r3, #12]
  402cf2:	459c      	cmp	ip, r3
  402cf4:	f000 813b 	beq.w	402f6e <_malloc_r+0x3b6>
  402cf8:	685a      	ldr	r2, [r3, #4]
  402cfa:	f022 0203 	bic.w	r2, r2, #3
  402cfe:	1b51      	subs	r1, r2, r5
  402d00:	290f      	cmp	r1, #15
  402d02:	ddf2      	ble.n	402cea <_malloc_r+0x132>
  402d04:	461c      	mov	r4, r3
  402d06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402d0a:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402d0e:	195a      	adds	r2, r3, r5
  402d10:	f045 0901 	orr.w	r9, r5, #1
  402d14:	f041 0501 	orr.w	r5, r1, #1
  402d18:	f8c3 9004 	str.w	r9, [r3, #4]
  402d1c:	4630      	mov	r0, r6
  402d1e:	f8c8 c00c 	str.w	ip, [r8, #12]
  402d22:	f8cc 8008 	str.w	r8, [ip, #8]
  402d26:	617a      	str	r2, [r7, #20]
  402d28:	613a      	str	r2, [r7, #16]
  402d2a:	f8c2 e00c 	str.w	lr, [r2, #12]
  402d2e:	f8c2 e008 	str.w	lr, [r2, #8]
  402d32:	6055      	str	r5, [r2, #4]
  402d34:	5051      	str	r1, [r2, r1]
  402d36:	f000 fb1b 	bl	403370 <__malloc_unlock>
  402d3a:	e769      	b.n	402c10 <_malloc_r+0x58>
  402d3c:	2400      	movs	r4, #0
  402d3e:	230c      	movs	r3, #12
  402d40:	4620      	mov	r0, r4
  402d42:	6033      	str	r3, [r6, #0]
  402d44:	b003      	add	sp, #12
  402d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d4a:	217e      	movs	r1, #126	; 0x7e
  402d4c:	203f      	movs	r0, #63	; 0x3f
  402d4e:	e773      	b.n	402c38 <_malloc_r+0x80>
  402d50:	4423      	add	r3, r4
  402d52:	68e1      	ldr	r1, [r4, #12]
  402d54:	685a      	ldr	r2, [r3, #4]
  402d56:	68a5      	ldr	r5, [r4, #8]
  402d58:	f042 0201 	orr.w	r2, r2, #1
  402d5c:	60e9      	str	r1, [r5, #12]
  402d5e:	4630      	mov	r0, r6
  402d60:	608d      	str	r5, [r1, #8]
  402d62:	605a      	str	r2, [r3, #4]
  402d64:	f000 fb04 	bl	403370 <__malloc_unlock>
  402d68:	3408      	adds	r4, #8
  402d6a:	4620      	mov	r0, r4
  402d6c:	b003      	add	sp, #12
  402d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d72:	4423      	add	r3, r4
  402d74:	4630      	mov	r0, r6
  402d76:	685a      	ldr	r2, [r3, #4]
  402d78:	f042 0201 	orr.w	r2, r2, #1
  402d7c:	605a      	str	r2, [r3, #4]
  402d7e:	f000 faf7 	bl	403370 <__malloc_unlock>
  402d82:	3408      	adds	r4, #8
  402d84:	4620      	mov	r0, r4
  402d86:	b003      	add	sp, #12
  402d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d8c:	68bc      	ldr	r4, [r7, #8]
  402d8e:	6863      	ldr	r3, [r4, #4]
  402d90:	f023 0803 	bic.w	r8, r3, #3
  402d94:	4545      	cmp	r5, r8
  402d96:	d804      	bhi.n	402da2 <_malloc_r+0x1ea>
  402d98:	ebc5 0308 	rsb	r3, r5, r8
  402d9c:	2b0f      	cmp	r3, #15
  402d9e:	f300 808c 	bgt.w	402eba <_malloc_r+0x302>
  402da2:	4b53      	ldr	r3, [pc, #332]	; (402ef0 <_malloc_r+0x338>)
  402da4:	f8df a158 	ldr.w	sl, [pc, #344]	; 402f00 <_malloc_r+0x348>
  402da8:	681a      	ldr	r2, [r3, #0]
  402daa:	f8da 3000 	ldr.w	r3, [sl]
  402dae:	3301      	adds	r3, #1
  402db0:	442a      	add	r2, r5
  402db2:	eb04 0b08 	add.w	fp, r4, r8
  402db6:	f000 8150 	beq.w	40305a <_malloc_r+0x4a2>
  402dba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402dbe:	320f      	adds	r2, #15
  402dc0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402dc4:	f022 020f 	bic.w	r2, r2, #15
  402dc8:	4611      	mov	r1, r2
  402dca:	4630      	mov	r0, r6
  402dcc:	9201      	str	r2, [sp, #4]
  402dce:	f000 fcc7 	bl	403760 <_sbrk_r>
  402dd2:	f1b0 3fff 	cmp.w	r0, #4294967295
  402dd6:	4681      	mov	r9, r0
  402dd8:	9a01      	ldr	r2, [sp, #4]
  402dda:	f000 8147 	beq.w	40306c <_malloc_r+0x4b4>
  402dde:	4583      	cmp	fp, r0
  402de0:	f200 80ee 	bhi.w	402fc0 <_malloc_r+0x408>
  402de4:	4b43      	ldr	r3, [pc, #268]	; (402ef4 <_malloc_r+0x33c>)
  402de6:	6819      	ldr	r1, [r3, #0]
  402de8:	45cb      	cmp	fp, r9
  402dea:	4411      	add	r1, r2
  402dec:	6019      	str	r1, [r3, #0]
  402dee:	f000 8142 	beq.w	403076 <_malloc_r+0x4be>
  402df2:	f8da 0000 	ldr.w	r0, [sl]
  402df6:	f8df e108 	ldr.w	lr, [pc, #264]	; 402f00 <_malloc_r+0x348>
  402dfa:	3001      	adds	r0, #1
  402dfc:	bf1b      	ittet	ne
  402dfe:	ebcb 0b09 	rsbne	fp, fp, r9
  402e02:	4459      	addne	r1, fp
  402e04:	f8ce 9000 	streq.w	r9, [lr]
  402e08:	6019      	strne	r1, [r3, #0]
  402e0a:	f019 0107 	ands.w	r1, r9, #7
  402e0e:	f000 8107 	beq.w	403020 <_malloc_r+0x468>
  402e12:	f1c1 0008 	rsb	r0, r1, #8
  402e16:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402e1a:	4481      	add	r9, r0
  402e1c:	3108      	adds	r1, #8
  402e1e:	444a      	add	r2, r9
  402e20:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402e24:	ebc2 0a01 	rsb	sl, r2, r1
  402e28:	4651      	mov	r1, sl
  402e2a:	4630      	mov	r0, r6
  402e2c:	9301      	str	r3, [sp, #4]
  402e2e:	f000 fc97 	bl	403760 <_sbrk_r>
  402e32:	1c43      	adds	r3, r0, #1
  402e34:	9b01      	ldr	r3, [sp, #4]
  402e36:	f000 812c 	beq.w	403092 <_malloc_r+0x4da>
  402e3a:	ebc9 0200 	rsb	r2, r9, r0
  402e3e:	4452      	add	r2, sl
  402e40:	f042 0201 	orr.w	r2, r2, #1
  402e44:	6819      	ldr	r1, [r3, #0]
  402e46:	f8c7 9008 	str.w	r9, [r7, #8]
  402e4a:	4451      	add	r1, sl
  402e4c:	42bc      	cmp	r4, r7
  402e4e:	f8c9 2004 	str.w	r2, [r9, #4]
  402e52:	6019      	str	r1, [r3, #0]
  402e54:	f8df a09c 	ldr.w	sl, [pc, #156]	; 402ef4 <_malloc_r+0x33c>
  402e58:	d016      	beq.n	402e88 <_malloc_r+0x2d0>
  402e5a:	f1b8 0f0f 	cmp.w	r8, #15
  402e5e:	f240 80ee 	bls.w	40303e <_malloc_r+0x486>
  402e62:	6862      	ldr	r2, [r4, #4]
  402e64:	f1a8 030c 	sub.w	r3, r8, #12
  402e68:	f023 0307 	bic.w	r3, r3, #7
  402e6c:	18e0      	adds	r0, r4, r3
  402e6e:	f002 0201 	and.w	r2, r2, #1
  402e72:	f04f 0e05 	mov.w	lr, #5
  402e76:	431a      	orrs	r2, r3
  402e78:	2b0f      	cmp	r3, #15
  402e7a:	6062      	str	r2, [r4, #4]
  402e7c:	f8c0 e004 	str.w	lr, [r0, #4]
  402e80:	f8c0 e008 	str.w	lr, [r0, #8]
  402e84:	f200 8109 	bhi.w	40309a <_malloc_r+0x4e2>
  402e88:	4b1b      	ldr	r3, [pc, #108]	; (402ef8 <_malloc_r+0x340>)
  402e8a:	68bc      	ldr	r4, [r7, #8]
  402e8c:	681a      	ldr	r2, [r3, #0]
  402e8e:	4291      	cmp	r1, r2
  402e90:	bf88      	it	hi
  402e92:	6019      	strhi	r1, [r3, #0]
  402e94:	4b19      	ldr	r3, [pc, #100]	; (402efc <_malloc_r+0x344>)
  402e96:	681a      	ldr	r2, [r3, #0]
  402e98:	4291      	cmp	r1, r2
  402e9a:	6862      	ldr	r2, [r4, #4]
  402e9c:	bf88      	it	hi
  402e9e:	6019      	strhi	r1, [r3, #0]
  402ea0:	f022 0203 	bic.w	r2, r2, #3
  402ea4:	4295      	cmp	r5, r2
  402ea6:	eba2 0305 	sub.w	r3, r2, r5
  402eaa:	d801      	bhi.n	402eb0 <_malloc_r+0x2f8>
  402eac:	2b0f      	cmp	r3, #15
  402eae:	dc04      	bgt.n	402eba <_malloc_r+0x302>
  402eb0:	4630      	mov	r0, r6
  402eb2:	f000 fa5d 	bl	403370 <__malloc_unlock>
  402eb6:	2400      	movs	r4, #0
  402eb8:	e6aa      	b.n	402c10 <_malloc_r+0x58>
  402eba:	1962      	adds	r2, r4, r5
  402ebc:	f043 0301 	orr.w	r3, r3, #1
  402ec0:	f045 0501 	orr.w	r5, r5, #1
  402ec4:	6065      	str	r5, [r4, #4]
  402ec6:	4630      	mov	r0, r6
  402ec8:	60ba      	str	r2, [r7, #8]
  402eca:	6053      	str	r3, [r2, #4]
  402ecc:	f000 fa50 	bl	403370 <__malloc_unlock>
  402ed0:	3408      	adds	r4, #8
  402ed2:	4620      	mov	r0, r4
  402ed4:	b003      	add	sp, #12
  402ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402eda:	2814      	cmp	r0, #20
  402edc:	d968      	bls.n	402fb0 <_malloc_r+0x3f8>
  402ede:	2854      	cmp	r0, #84	; 0x54
  402ee0:	f200 8097 	bhi.w	403012 <_malloc_r+0x45a>
  402ee4:	0b28      	lsrs	r0, r5, #12
  402ee6:	306e      	adds	r0, #110	; 0x6e
  402ee8:	0041      	lsls	r1, r0, #1
  402eea:	e6a5      	b.n	402c38 <_malloc_r+0x80>
  402eec:	20000458 	.word	0x20000458
  402ef0:	20000910 	.word	0x20000910
  402ef4:	20000914 	.word	0x20000914
  402ef8:	2000090c 	.word	0x2000090c
  402efc:	20000908 	.word	0x20000908
  402f00:	20000864 	.word	0x20000864
  402f04:	0a5a      	lsrs	r2, r3, #9
  402f06:	2a04      	cmp	r2, #4
  402f08:	d955      	bls.n	402fb6 <_malloc_r+0x3fe>
  402f0a:	2a14      	cmp	r2, #20
  402f0c:	f200 80a7 	bhi.w	40305e <_malloc_r+0x4a6>
  402f10:	325b      	adds	r2, #91	; 0x5b
  402f12:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402f16:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  402f1a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4030d8 <_malloc_r+0x520>
  402f1e:	f8dc 1008 	ldr.w	r1, [ip, #8]
  402f22:	4561      	cmp	r1, ip
  402f24:	d07f      	beq.n	403026 <_malloc_r+0x46e>
  402f26:	684a      	ldr	r2, [r1, #4]
  402f28:	f022 0203 	bic.w	r2, r2, #3
  402f2c:	4293      	cmp	r3, r2
  402f2e:	d202      	bcs.n	402f36 <_malloc_r+0x37e>
  402f30:	6889      	ldr	r1, [r1, #8]
  402f32:	458c      	cmp	ip, r1
  402f34:	d1f7      	bne.n	402f26 <_malloc_r+0x36e>
  402f36:	68ca      	ldr	r2, [r1, #12]
  402f38:	687b      	ldr	r3, [r7, #4]
  402f3a:	60e2      	str	r2, [r4, #12]
  402f3c:	60a1      	str	r1, [r4, #8]
  402f3e:	6094      	str	r4, [r2, #8]
  402f40:	60cc      	str	r4, [r1, #12]
  402f42:	e6bb      	b.n	402cbc <_malloc_r+0x104>
  402f44:	1963      	adds	r3, r4, r5
  402f46:	f042 0701 	orr.w	r7, r2, #1
  402f4a:	f045 0501 	orr.w	r5, r5, #1
  402f4e:	6065      	str	r5, [r4, #4]
  402f50:	4630      	mov	r0, r6
  402f52:	614b      	str	r3, [r1, #20]
  402f54:	610b      	str	r3, [r1, #16]
  402f56:	f8c3 e00c 	str.w	lr, [r3, #12]
  402f5a:	f8c3 e008 	str.w	lr, [r3, #8]
  402f5e:	605f      	str	r7, [r3, #4]
  402f60:	509a      	str	r2, [r3, r2]
  402f62:	3408      	adds	r4, #8
  402f64:	f000 fa04 	bl	403370 <__malloc_unlock>
  402f68:	e652      	b.n	402c10 <_malloc_r+0x58>
  402f6a:	684b      	ldr	r3, [r1, #4]
  402f6c:	e6a6      	b.n	402cbc <_malloc_r+0x104>
  402f6e:	f109 0901 	add.w	r9, r9, #1
  402f72:	f019 0f03 	tst.w	r9, #3
  402f76:	f10c 0c08 	add.w	ip, ip, #8
  402f7a:	f47f aeb1 	bne.w	402ce0 <_malloc_r+0x128>
  402f7e:	e02c      	b.n	402fda <_malloc_r+0x422>
  402f80:	f104 0308 	add.w	r3, r4, #8
  402f84:	6964      	ldr	r4, [r4, #20]
  402f86:	42a3      	cmp	r3, r4
  402f88:	bf08      	it	eq
  402f8a:	3002      	addeq	r0, #2
  402f8c:	f43f ae69 	beq.w	402c62 <_malloc_r+0xaa>
  402f90:	e62e      	b.n	402bf0 <_malloc_r+0x38>
  402f92:	441a      	add	r2, r3
  402f94:	461c      	mov	r4, r3
  402f96:	6851      	ldr	r1, [r2, #4]
  402f98:	68db      	ldr	r3, [r3, #12]
  402f9a:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402f9e:	f041 0101 	orr.w	r1, r1, #1
  402fa2:	6051      	str	r1, [r2, #4]
  402fa4:	4630      	mov	r0, r6
  402fa6:	60eb      	str	r3, [r5, #12]
  402fa8:	609d      	str	r5, [r3, #8]
  402faa:	f000 f9e1 	bl	403370 <__malloc_unlock>
  402fae:	e62f      	b.n	402c10 <_malloc_r+0x58>
  402fb0:	305b      	adds	r0, #91	; 0x5b
  402fb2:	0041      	lsls	r1, r0, #1
  402fb4:	e640      	b.n	402c38 <_malloc_r+0x80>
  402fb6:	099a      	lsrs	r2, r3, #6
  402fb8:	3238      	adds	r2, #56	; 0x38
  402fba:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402fbe:	e7aa      	b.n	402f16 <_malloc_r+0x35e>
  402fc0:	42bc      	cmp	r4, r7
  402fc2:	4b45      	ldr	r3, [pc, #276]	; (4030d8 <_malloc_r+0x520>)
  402fc4:	f43f af0e 	beq.w	402de4 <_malloc_r+0x22c>
  402fc8:	689c      	ldr	r4, [r3, #8]
  402fca:	6862      	ldr	r2, [r4, #4]
  402fcc:	f022 0203 	bic.w	r2, r2, #3
  402fd0:	e768      	b.n	402ea4 <_malloc_r+0x2ec>
  402fd2:	f8d8 8000 	ldr.w	r8, [r8]
  402fd6:	4598      	cmp	r8, r3
  402fd8:	d17c      	bne.n	4030d4 <_malloc_r+0x51c>
  402fda:	f010 0f03 	tst.w	r0, #3
  402fde:	f1a8 0308 	sub.w	r3, r8, #8
  402fe2:	f100 30ff 	add.w	r0, r0, #4294967295
  402fe6:	d1f4      	bne.n	402fd2 <_malloc_r+0x41a>
  402fe8:	687b      	ldr	r3, [r7, #4]
  402fea:	ea23 0304 	bic.w	r3, r3, r4
  402fee:	607b      	str	r3, [r7, #4]
  402ff0:	0064      	lsls	r4, r4, #1
  402ff2:	429c      	cmp	r4, r3
  402ff4:	f63f aeca 	bhi.w	402d8c <_malloc_r+0x1d4>
  402ff8:	2c00      	cmp	r4, #0
  402ffa:	f43f aec7 	beq.w	402d8c <_malloc_r+0x1d4>
  402ffe:	4223      	tst	r3, r4
  403000:	4648      	mov	r0, r9
  403002:	f47f ae69 	bne.w	402cd8 <_malloc_r+0x120>
  403006:	0064      	lsls	r4, r4, #1
  403008:	4223      	tst	r3, r4
  40300a:	f100 0004 	add.w	r0, r0, #4
  40300e:	d0fa      	beq.n	403006 <_malloc_r+0x44e>
  403010:	e662      	b.n	402cd8 <_malloc_r+0x120>
  403012:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  403016:	d818      	bhi.n	40304a <_malloc_r+0x492>
  403018:	0be8      	lsrs	r0, r5, #15
  40301a:	3077      	adds	r0, #119	; 0x77
  40301c:	0041      	lsls	r1, r0, #1
  40301e:	e60b      	b.n	402c38 <_malloc_r+0x80>
  403020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403024:	e6fb      	b.n	402e1e <_malloc_r+0x266>
  403026:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40302a:	1092      	asrs	r2, r2, #2
  40302c:	f04f 0c01 	mov.w	ip, #1
  403030:	fa0c f202 	lsl.w	r2, ip, r2
  403034:	4313      	orrs	r3, r2
  403036:	f8c8 3004 	str.w	r3, [r8, #4]
  40303a:	460a      	mov	r2, r1
  40303c:	e77d      	b.n	402f3a <_malloc_r+0x382>
  40303e:	2301      	movs	r3, #1
  403040:	f8c9 3004 	str.w	r3, [r9, #4]
  403044:	464c      	mov	r4, r9
  403046:	2200      	movs	r2, #0
  403048:	e72c      	b.n	402ea4 <_malloc_r+0x2ec>
  40304a:	f240 5354 	movw	r3, #1364	; 0x554
  40304e:	4298      	cmp	r0, r3
  403050:	d81c      	bhi.n	40308c <_malloc_r+0x4d4>
  403052:	0ca8      	lsrs	r0, r5, #18
  403054:	307c      	adds	r0, #124	; 0x7c
  403056:	0041      	lsls	r1, r0, #1
  403058:	e5ee      	b.n	402c38 <_malloc_r+0x80>
  40305a:	3210      	adds	r2, #16
  40305c:	e6b4      	b.n	402dc8 <_malloc_r+0x210>
  40305e:	2a54      	cmp	r2, #84	; 0x54
  403060:	d823      	bhi.n	4030aa <_malloc_r+0x4f2>
  403062:	0b1a      	lsrs	r2, r3, #12
  403064:	326e      	adds	r2, #110	; 0x6e
  403066:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40306a:	e754      	b.n	402f16 <_malloc_r+0x35e>
  40306c:	68bc      	ldr	r4, [r7, #8]
  40306e:	6862      	ldr	r2, [r4, #4]
  403070:	f022 0203 	bic.w	r2, r2, #3
  403074:	e716      	b.n	402ea4 <_malloc_r+0x2ec>
  403076:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40307a:	2800      	cmp	r0, #0
  40307c:	f47f aeb9 	bne.w	402df2 <_malloc_r+0x23a>
  403080:	4442      	add	r2, r8
  403082:	68bb      	ldr	r3, [r7, #8]
  403084:	f042 0201 	orr.w	r2, r2, #1
  403088:	605a      	str	r2, [r3, #4]
  40308a:	e6fd      	b.n	402e88 <_malloc_r+0x2d0>
  40308c:	21fc      	movs	r1, #252	; 0xfc
  40308e:	207e      	movs	r0, #126	; 0x7e
  403090:	e5d2      	b.n	402c38 <_malloc_r+0x80>
  403092:	2201      	movs	r2, #1
  403094:	f04f 0a00 	mov.w	sl, #0
  403098:	e6d4      	b.n	402e44 <_malloc_r+0x28c>
  40309a:	f104 0108 	add.w	r1, r4, #8
  40309e:	4630      	mov	r0, r6
  4030a0:	f7ff fa7a 	bl	402598 <_free_r>
  4030a4:	f8da 1000 	ldr.w	r1, [sl]
  4030a8:	e6ee      	b.n	402e88 <_malloc_r+0x2d0>
  4030aa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4030ae:	d804      	bhi.n	4030ba <_malloc_r+0x502>
  4030b0:	0bda      	lsrs	r2, r3, #15
  4030b2:	3277      	adds	r2, #119	; 0x77
  4030b4:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4030b8:	e72d      	b.n	402f16 <_malloc_r+0x35e>
  4030ba:	f240 5154 	movw	r1, #1364	; 0x554
  4030be:	428a      	cmp	r2, r1
  4030c0:	d804      	bhi.n	4030cc <_malloc_r+0x514>
  4030c2:	0c9a      	lsrs	r2, r3, #18
  4030c4:	327c      	adds	r2, #124	; 0x7c
  4030c6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4030ca:	e724      	b.n	402f16 <_malloc_r+0x35e>
  4030cc:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4030d0:	227e      	movs	r2, #126	; 0x7e
  4030d2:	e720      	b.n	402f16 <_malloc_r+0x35e>
  4030d4:	687b      	ldr	r3, [r7, #4]
  4030d6:	e78b      	b.n	402ff0 <_malloc_r+0x438>
  4030d8:	20000458 	.word	0x20000458

004030dc <memchr>:
  4030dc:	0783      	lsls	r3, r0, #30
  4030de:	b470      	push	{r4, r5, r6}
  4030e0:	b2c9      	uxtb	r1, r1
  4030e2:	d040      	beq.n	403166 <memchr+0x8a>
  4030e4:	1e54      	subs	r4, r2, #1
  4030e6:	2a00      	cmp	r2, #0
  4030e8:	d03f      	beq.n	40316a <memchr+0x8e>
  4030ea:	7803      	ldrb	r3, [r0, #0]
  4030ec:	428b      	cmp	r3, r1
  4030ee:	bf18      	it	ne
  4030f0:	1c43      	addne	r3, r0, #1
  4030f2:	d106      	bne.n	403102 <memchr+0x26>
  4030f4:	e01d      	b.n	403132 <memchr+0x56>
  4030f6:	b1f4      	cbz	r4, 403136 <memchr+0x5a>
  4030f8:	7802      	ldrb	r2, [r0, #0]
  4030fa:	428a      	cmp	r2, r1
  4030fc:	f104 34ff 	add.w	r4, r4, #4294967295
  403100:	d017      	beq.n	403132 <memchr+0x56>
  403102:	f013 0f03 	tst.w	r3, #3
  403106:	4618      	mov	r0, r3
  403108:	f103 0301 	add.w	r3, r3, #1
  40310c:	d1f3      	bne.n	4030f6 <memchr+0x1a>
  40310e:	2c03      	cmp	r4, #3
  403110:	d814      	bhi.n	40313c <memchr+0x60>
  403112:	b184      	cbz	r4, 403136 <memchr+0x5a>
  403114:	7803      	ldrb	r3, [r0, #0]
  403116:	428b      	cmp	r3, r1
  403118:	d00b      	beq.n	403132 <memchr+0x56>
  40311a:	1905      	adds	r5, r0, r4
  40311c:	1c43      	adds	r3, r0, #1
  40311e:	e002      	b.n	403126 <memchr+0x4a>
  403120:	7802      	ldrb	r2, [r0, #0]
  403122:	428a      	cmp	r2, r1
  403124:	d005      	beq.n	403132 <memchr+0x56>
  403126:	42ab      	cmp	r3, r5
  403128:	4618      	mov	r0, r3
  40312a:	f103 0301 	add.w	r3, r3, #1
  40312e:	d1f7      	bne.n	403120 <memchr+0x44>
  403130:	2000      	movs	r0, #0
  403132:	bc70      	pop	{r4, r5, r6}
  403134:	4770      	bx	lr
  403136:	4620      	mov	r0, r4
  403138:	bc70      	pop	{r4, r5, r6}
  40313a:	4770      	bx	lr
  40313c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  403140:	4602      	mov	r2, r0
  403142:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  403146:	4610      	mov	r0, r2
  403148:	3204      	adds	r2, #4
  40314a:	6803      	ldr	r3, [r0, #0]
  40314c:	4073      	eors	r3, r6
  40314e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  403152:	ea25 0303 	bic.w	r3, r5, r3
  403156:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40315a:	d1da      	bne.n	403112 <memchr+0x36>
  40315c:	3c04      	subs	r4, #4
  40315e:	2c03      	cmp	r4, #3
  403160:	4610      	mov	r0, r2
  403162:	d8f0      	bhi.n	403146 <memchr+0x6a>
  403164:	e7d5      	b.n	403112 <memchr+0x36>
  403166:	4614      	mov	r4, r2
  403168:	e7d1      	b.n	40310e <memchr+0x32>
  40316a:	4610      	mov	r0, r2
  40316c:	e7e1      	b.n	403132 <memchr+0x56>
  40316e:	bf00      	nop

00403170 <memcpy>:
  403170:	4684      	mov	ip, r0
  403172:	ea41 0300 	orr.w	r3, r1, r0
  403176:	f013 0303 	ands.w	r3, r3, #3
  40317a:	d16d      	bne.n	403258 <memcpy+0xe8>
  40317c:	3a40      	subs	r2, #64	; 0x40
  40317e:	d341      	bcc.n	403204 <memcpy+0x94>
  403180:	f851 3b04 	ldr.w	r3, [r1], #4
  403184:	f840 3b04 	str.w	r3, [r0], #4
  403188:	f851 3b04 	ldr.w	r3, [r1], #4
  40318c:	f840 3b04 	str.w	r3, [r0], #4
  403190:	f851 3b04 	ldr.w	r3, [r1], #4
  403194:	f840 3b04 	str.w	r3, [r0], #4
  403198:	f851 3b04 	ldr.w	r3, [r1], #4
  40319c:	f840 3b04 	str.w	r3, [r0], #4
  4031a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031a4:	f840 3b04 	str.w	r3, [r0], #4
  4031a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ac:	f840 3b04 	str.w	r3, [r0], #4
  4031b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031b4:	f840 3b04 	str.w	r3, [r0], #4
  4031b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031bc:	f840 3b04 	str.w	r3, [r0], #4
  4031c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031c4:	f840 3b04 	str.w	r3, [r0], #4
  4031c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031cc:	f840 3b04 	str.w	r3, [r0], #4
  4031d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031d4:	f840 3b04 	str.w	r3, [r0], #4
  4031d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031dc:	f840 3b04 	str.w	r3, [r0], #4
  4031e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031e4:	f840 3b04 	str.w	r3, [r0], #4
  4031e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ec:	f840 3b04 	str.w	r3, [r0], #4
  4031f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031f4:	f840 3b04 	str.w	r3, [r0], #4
  4031f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031fc:	f840 3b04 	str.w	r3, [r0], #4
  403200:	3a40      	subs	r2, #64	; 0x40
  403202:	d2bd      	bcs.n	403180 <memcpy+0x10>
  403204:	3230      	adds	r2, #48	; 0x30
  403206:	d311      	bcc.n	40322c <memcpy+0xbc>
  403208:	f851 3b04 	ldr.w	r3, [r1], #4
  40320c:	f840 3b04 	str.w	r3, [r0], #4
  403210:	f851 3b04 	ldr.w	r3, [r1], #4
  403214:	f840 3b04 	str.w	r3, [r0], #4
  403218:	f851 3b04 	ldr.w	r3, [r1], #4
  40321c:	f840 3b04 	str.w	r3, [r0], #4
  403220:	f851 3b04 	ldr.w	r3, [r1], #4
  403224:	f840 3b04 	str.w	r3, [r0], #4
  403228:	3a10      	subs	r2, #16
  40322a:	d2ed      	bcs.n	403208 <memcpy+0x98>
  40322c:	320c      	adds	r2, #12
  40322e:	d305      	bcc.n	40323c <memcpy+0xcc>
  403230:	f851 3b04 	ldr.w	r3, [r1], #4
  403234:	f840 3b04 	str.w	r3, [r0], #4
  403238:	3a04      	subs	r2, #4
  40323a:	d2f9      	bcs.n	403230 <memcpy+0xc0>
  40323c:	3204      	adds	r2, #4
  40323e:	d008      	beq.n	403252 <memcpy+0xe2>
  403240:	07d2      	lsls	r2, r2, #31
  403242:	bf1c      	itt	ne
  403244:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403248:	f800 3b01 	strbne.w	r3, [r0], #1
  40324c:	d301      	bcc.n	403252 <memcpy+0xe2>
  40324e:	880b      	ldrh	r3, [r1, #0]
  403250:	8003      	strh	r3, [r0, #0]
  403252:	4660      	mov	r0, ip
  403254:	4770      	bx	lr
  403256:	bf00      	nop
  403258:	2a08      	cmp	r2, #8
  40325a:	d313      	bcc.n	403284 <memcpy+0x114>
  40325c:	078b      	lsls	r3, r1, #30
  40325e:	d08d      	beq.n	40317c <memcpy+0xc>
  403260:	f010 0303 	ands.w	r3, r0, #3
  403264:	d08a      	beq.n	40317c <memcpy+0xc>
  403266:	f1c3 0304 	rsb	r3, r3, #4
  40326a:	1ad2      	subs	r2, r2, r3
  40326c:	07db      	lsls	r3, r3, #31
  40326e:	bf1c      	itt	ne
  403270:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403274:	f800 3b01 	strbne.w	r3, [r0], #1
  403278:	d380      	bcc.n	40317c <memcpy+0xc>
  40327a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40327e:	f820 3b02 	strh.w	r3, [r0], #2
  403282:	e77b      	b.n	40317c <memcpy+0xc>
  403284:	3a04      	subs	r2, #4
  403286:	d3d9      	bcc.n	40323c <memcpy+0xcc>
  403288:	3a01      	subs	r2, #1
  40328a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40328e:	f800 3b01 	strb.w	r3, [r0], #1
  403292:	d2f9      	bcs.n	403288 <memcpy+0x118>
  403294:	780b      	ldrb	r3, [r1, #0]
  403296:	7003      	strb	r3, [r0, #0]
  403298:	784b      	ldrb	r3, [r1, #1]
  40329a:	7043      	strb	r3, [r0, #1]
  40329c:	788b      	ldrb	r3, [r1, #2]
  40329e:	7083      	strb	r3, [r0, #2]
  4032a0:	4660      	mov	r0, ip
  4032a2:	4770      	bx	lr

004032a4 <memmove>:
  4032a4:	4288      	cmp	r0, r1
  4032a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032a8:	d90d      	bls.n	4032c6 <memmove+0x22>
  4032aa:	188b      	adds	r3, r1, r2
  4032ac:	4298      	cmp	r0, r3
  4032ae:	d20a      	bcs.n	4032c6 <memmove+0x22>
  4032b0:	1881      	adds	r1, r0, r2
  4032b2:	2a00      	cmp	r2, #0
  4032b4:	d054      	beq.n	403360 <memmove+0xbc>
  4032b6:	1a9a      	subs	r2, r3, r2
  4032b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4032bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
  4032c0:	4293      	cmp	r3, r2
  4032c2:	d1f9      	bne.n	4032b8 <memmove+0x14>
  4032c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4032c6:	2a0f      	cmp	r2, #15
  4032c8:	d948      	bls.n	40335c <memmove+0xb8>
  4032ca:	ea40 0301 	orr.w	r3, r0, r1
  4032ce:	079b      	lsls	r3, r3, #30
  4032d0:	d147      	bne.n	403362 <memmove+0xbe>
  4032d2:	f100 0410 	add.w	r4, r0, #16
  4032d6:	f101 0310 	add.w	r3, r1, #16
  4032da:	4615      	mov	r5, r2
  4032dc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4032e0:	f844 6c10 	str.w	r6, [r4, #-16]
  4032e4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4032e8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4032ec:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4032f0:	f844 6c08 	str.w	r6, [r4, #-8]
  4032f4:	3d10      	subs	r5, #16
  4032f6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4032fa:	f844 6c04 	str.w	r6, [r4, #-4]
  4032fe:	2d0f      	cmp	r5, #15
  403300:	f103 0310 	add.w	r3, r3, #16
  403304:	f104 0410 	add.w	r4, r4, #16
  403308:	d8e8      	bhi.n	4032dc <memmove+0x38>
  40330a:	f1a2 0310 	sub.w	r3, r2, #16
  40330e:	f023 030f 	bic.w	r3, r3, #15
  403312:	f002 0e0f 	and.w	lr, r2, #15
  403316:	3310      	adds	r3, #16
  403318:	f1be 0f03 	cmp.w	lr, #3
  40331c:	4419      	add	r1, r3
  40331e:	4403      	add	r3, r0
  403320:	d921      	bls.n	403366 <memmove+0xc2>
  403322:	1f1e      	subs	r6, r3, #4
  403324:	460d      	mov	r5, r1
  403326:	4674      	mov	r4, lr
  403328:	3c04      	subs	r4, #4
  40332a:	f855 7b04 	ldr.w	r7, [r5], #4
  40332e:	f846 7f04 	str.w	r7, [r6, #4]!
  403332:	2c03      	cmp	r4, #3
  403334:	d8f8      	bhi.n	403328 <memmove+0x84>
  403336:	f1ae 0404 	sub.w	r4, lr, #4
  40333a:	f024 0403 	bic.w	r4, r4, #3
  40333e:	3404      	adds	r4, #4
  403340:	4423      	add	r3, r4
  403342:	4421      	add	r1, r4
  403344:	f002 0203 	and.w	r2, r2, #3
  403348:	b152      	cbz	r2, 403360 <memmove+0xbc>
  40334a:	3b01      	subs	r3, #1
  40334c:	440a      	add	r2, r1
  40334e:	f811 4b01 	ldrb.w	r4, [r1], #1
  403352:	f803 4f01 	strb.w	r4, [r3, #1]!
  403356:	4291      	cmp	r1, r2
  403358:	d1f9      	bne.n	40334e <memmove+0xaa>
  40335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40335c:	4603      	mov	r3, r0
  40335e:	e7f3      	b.n	403348 <memmove+0xa4>
  403360:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403362:	4603      	mov	r3, r0
  403364:	e7f1      	b.n	40334a <memmove+0xa6>
  403366:	4672      	mov	r2, lr
  403368:	e7ee      	b.n	403348 <memmove+0xa4>
  40336a:	bf00      	nop

0040336c <__malloc_lock>:
  40336c:	4770      	bx	lr
  40336e:	bf00      	nop

00403370 <__malloc_unlock>:
  403370:	4770      	bx	lr
  403372:	bf00      	nop

00403374 <_realloc_r>:
  403374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403378:	4617      	mov	r7, r2
  40337a:	b083      	sub	sp, #12
  40337c:	460e      	mov	r6, r1
  40337e:	2900      	cmp	r1, #0
  403380:	f000 80e7 	beq.w	403552 <_realloc_r+0x1de>
  403384:	4681      	mov	r9, r0
  403386:	f107 050b 	add.w	r5, r7, #11
  40338a:	f7ff ffef 	bl	40336c <__malloc_lock>
  40338e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403392:	2d16      	cmp	r5, #22
  403394:	f023 0403 	bic.w	r4, r3, #3
  403398:	f1a6 0808 	sub.w	r8, r6, #8
  40339c:	d84c      	bhi.n	403438 <_realloc_r+0xc4>
  40339e:	2210      	movs	r2, #16
  4033a0:	4615      	mov	r5, r2
  4033a2:	42af      	cmp	r7, r5
  4033a4:	d84d      	bhi.n	403442 <_realloc_r+0xce>
  4033a6:	4294      	cmp	r4, r2
  4033a8:	f280 8084 	bge.w	4034b4 <_realloc_r+0x140>
  4033ac:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 40375c <_realloc_r+0x3e8>
  4033b0:	f8db 0008 	ldr.w	r0, [fp, #8]
  4033b4:	eb08 0104 	add.w	r1, r8, r4
  4033b8:	4288      	cmp	r0, r1
  4033ba:	f000 80d6 	beq.w	40356a <_realloc_r+0x1f6>
  4033be:	6848      	ldr	r0, [r1, #4]
  4033c0:	f020 0e01 	bic.w	lr, r0, #1
  4033c4:	448e      	add	lr, r1
  4033c6:	f8de e004 	ldr.w	lr, [lr, #4]
  4033ca:	f01e 0f01 	tst.w	lr, #1
  4033ce:	d13f      	bne.n	403450 <_realloc_r+0xdc>
  4033d0:	f020 0003 	bic.w	r0, r0, #3
  4033d4:	4420      	add	r0, r4
  4033d6:	4290      	cmp	r0, r2
  4033d8:	f280 80c1 	bge.w	40355e <_realloc_r+0x1ea>
  4033dc:	07db      	lsls	r3, r3, #31
  4033de:	f100 808f 	bmi.w	403500 <_realloc_r+0x18c>
  4033e2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4033e6:	ebc3 0a08 	rsb	sl, r3, r8
  4033ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4033ee:	f023 0303 	bic.w	r3, r3, #3
  4033f2:	eb00 0e03 	add.w	lr, r0, r3
  4033f6:	4596      	cmp	lr, r2
  4033f8:	db34      	blt.n	403464 <_realloc_r+0xf0>
  4033fa:	68cb      	ldr	r3, [r1, #12]
  4033fc:	688a      	ldr	r2, [r1, #8]
  4033fe:	4657      	mov	r7, sl
  403400:	60d3      	str	r3, [r2, #12]
  403402:	609a      	str	r2, [r3, #8]
  403404:	f857 1f08 	ldr.w	r1, [r7, #8]!
  403408:	f8da 300c 	ldr.w	r3, [sl, #12]
  40340c:	60cb      	str	r3, [r1, #12]
  40340e:	1f22      	subs	r2, r4, #4
  403410:	2a24      	cmp	r2, #36	; 0x24
  403412:	6099      	str	r1, [r3, #8]
  403414:	f200 8136 	bhi.w	403684 <_realloc_r+0x310>
  403418:	2a13      	cmp	r2, #19
  40341a:	f240 80fd 	bls.w	403618 <_realloc_r+0x2a4>
  40341e:	6833      	ldr	r3, [r6, #0]
  403420:	f8ca 3008 	str.w	r3, [sl, #8]
  403424:	6873      	ldr	r3, [r6, #4]
  403426:	f8ca 300c 	str.w	r3, [sl, #12]
  40342a:	2a1b      	cmp	r2, #27
  40342c:	f200 8140 	bhi.w	4036b0 <_realloc_r+0x33c>
  403430:	3608      	adds	r6, #8
  403432:	f10a 0310 	add.w	r3, sl, #16
  403436:	e0f0      	b.n	40361a <_realloc_r+0x2a6>
  403438:	f025 0507 	bic.w	r5, r5, #7
  40343c:	2d00      	cmp	r5, #0
  40343e:	462a      	mov	r2, r5
  403440:	daaf      	bge.n	4033a2 <_realloc_r+0x2e>
  403442:	230c      	movs	r3, #12
  403444:	2000      	movs	r0, #0
  403446:	f8c9 3000 	str.w	r3, [r9]
  40344a:	b003      	add	sp, #12
  40344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403450:	07d9      	lsls	r1, r3, #31
  403452:	d455      	bmi.n	403500 <_realloc_r+0x18c>
  403454:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403458:	ebc3 0a08 	rsb	sl, r3, r8
  40345c:	f8da 3004 	ldr.w	r3, [sl, #4]
  403460:	f023 0303 	bic.w	r3, r3, #3
  403464:	4423      	add	r3, r4
  403466:	4293      	cmp	r3, r2
  403468:	db4a      	blt.n	403500 <_realloc_r+0x18c>
  40346a:	4657      	mov	r7, sl
  40346c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403470:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403474:	1f22      	subs	r2, r4, #4
  403476:	2a24      	cmp	r2, #36	; 0x24
  403478:	60c1      	str	r1, [r0, #12]
  40347a:	6088      	str	r0, [r1, #8]
  40347c:	f200 810e 	bhi.w	40369c <_realloc_r+0x328>
  403480:	2a13      	cmp	r2, #19
  403482:	f240 8109 	bls.w	403698 <_realloc_r+0x324>
  403486:	6831      	ldr	r1, [r6, #0]
  403488:	f8ca 1008 	str.w	r1, [sl, #8]
  40348c:	6871      	ldr	r1, [r6, #4]
  40348e:	f8ca 100c 	str.w	r1, [sl, #12]
  403492:	2a1b      	cmp	r2, #27
  403494:	f200 8121 	bhi.w	4036da <_realloc_r+0x366>
  403498:	3608      	adds	r6, #8
  40349a:	f10a 0210 	add.w	r2, sl, #16
  40349e:	6831      	ldr	r1, [r6, #0]
  4034a0:	6011      	str	r1, [r2, #0]
  4034a2:	6871      	ldr	r1, [r6, #4]
  4034a4:	6051      	str	r1, [r2, #4]
  4034a6:	68b1      	ldr	r1, [r6, #8]
  4034a8:	6091      	str	r1, [r2, #8]
  4034aa:	461c      	mov	r4, r3
  4034ac:	f8da 3004 	ldr.w	r3, [sl, #4]
  4034b0:	463e      	mov	r6, r7
  4034b2:	46d0      	mov	r8, sl
  4034b4:	1b62      	subs	r2, r4, r5
  4034b6:	2a0f      	cmp	r2, #15
  4034b8:	f003 0301 	and.w	r3, r3, #1
  4034bc:	d80e      	bhi.n	4034dc <_realloc_r+0x168>
  4034be:	4323      	orrs	r3, r4
  4034c0:	4444      	add	r4, r8
  4034c2:	f8c8 3004 	str.w	r3, [r8, #4]
  4034c6:	6863      	ldr	r3, [r4, #4]
  4034c8:	f043 0301 	orr.w	r3, r3, #1
  4034cc:	6063      	str	r3, [r4, #4]
  4034ce:	4648      	mov	r0, r9
  4034d0:	f7ff ff4e 	bl	403370 <__malloc_unlock>
  4034d4:	4630      	mov	r0, r6
  4034d6:	b003      	add	sp, #12
  4034d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034dc:	eb08 0105 	add.w	r1, r8, r5
  4034e0:	431d      	orrs	r5, r3
  4034e2:	f042 0301 	orr.w	r3, r2, #1
  4034e6:	440a      	add	r2, r1
  4034e8:	f8c8 5004 	str.w	r5, [r8, #4]
  4034ec:	604b      	str	r3, [r1, #4]
  4034ee:	6853      	ldr	r3, [r2, #4]
  4034f0:	f043 0301 	orr.w	r3, r3, #1
  4034f4:	3108      	adds	r1, #8
  4034f6:	6053      	str	r3, [r2, #4]
  4034f8:	4648      	mov	r0, r9
  4034fa:	f7ff f84d 	bl	402598 <_free_r>
  4034fe:	e7e6      	b.n	4034ce <_realloc_r+0x15a>
  403500:	4639      	mov	r1, r7
  403502:	4648      	mov	r0, r9
  403504:	f7ff fb58 	bl	402bb8 <_malloc_r>
  403508:	4607      	mov	r7, r0
  40350a:	b1d8      	cbz	r0, 403544 <_realloc_r+0x1d0>
  40350c:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403510:	f023 0201 	bic.w	r2, r3, #1
  403514:	4442      	add	r2, r8
  403516:	f1a0 0108 	sub.w	r1, r0, #8
  40351a:	4291      	cmp	r1, r2
  40351c:	f000 80ac 	beq.w	403678 <_realloc_r+0x304>
  403520:	1f22      	subs	r2, r4, #4
  403522:	2a24      	cmp	r2, #36	; 0x24
  403524:	f200 8099 	bhi.w	40365a <_realloc_r+0x2e6>
  403528:	2a13      	cmp	r2, #19
  40352a:	d86a      	bhi.n	403602 <_realloc_r+0x28e>
  40352c:	4603      	mov	r3, r0
  40352e:	4632      	mov	r2, r6
  403530:	6811      	ldr	r1, [r2, #0]
  403532:	6019      	str	r1, [r3, #0]
  403534:	6851      	ldr	r1, [r2, #4]
  403536:	6059      	str	r1, [r3, #4]
  403538:	6892      	ldr	r2, [r2, #8]
  40353a:	609a      	str	r2, [r3, #8]
  40353c:	4631      	mov	r1, r6
  40353e:	4648      	mov	r0, r9
  403540:	f7ff f82a 	bl	402598 <_free_r>
  403544:	4648      	mov	r0, r9
  403546:	f7ff ff13 	bl	403370 <__malloc_unlock>
  40354a:	4638      	mov	r0, r7
  40354c:	b003      	add	sp, #12
  40354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403552:	4611      	mov	r1, r2
  403554:	b003      	add	sp, #12
  403556:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40355a:	f7ff bb2d 	b.w	402bb8 <_malloc_r>
  40355e:	68ca      	ldr	r2, [r1, #12]
  403560:	6889      	ldr	r1, [r1, #8]
  403562:	4604      	mov	r4, r0
  403564:	60ca      	str	r2, [r1, #12]
  403566:	6091      	str	r1, [r2, #8]
  403568:	e7a4      	b.n	4034b4 <_realloc_r+0x140>
  40356a:	6841      	ldr	r1, [r0, #4]
  40356c:	f021 0103 	bic.w	r1, r1, #3
  403570:	4421      	add	r1, r4
  403572:	f105 0010 	add.w	r0, r5, #16
  403576:	4281      	cmp	r1, r0
  403578:	da5b      	bge.n	403632 <_realloc_r+0x2be>
  40357a:	07db      	lsls	r3, r3, #31
  40357c:	d4c0      	bmi.n	403500 <_realloc_r+0x18c>
  40357e:	f856 3c08 	ldr.w	r3, [r6, #-8]
  403582:	ebc3 0a08 	rsb	sl, r3, r8
  403586:	f8da 3004 	ldr.w	r3, [sl, #4]
  40358a:	f023 0303 	bic.w	r3, r3, #3
  40358e:	eb01 0c03 	add.w	ip, r1, r3
  403592:	4560      	cmp	r0, ip
  403594:	f73f af66 	bgt.w	403464 <_realloc_r+0xf0>
  403598:	4657      	mov	r7, sl
  40359a:	f8da 300c 	ldr.w	r3, [sl, #12]
  40359e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4035a2:	1f22      	subs	r2, r4, #4
  4035a4:	2a24      	cmp	r2, #36	; 0x24
  4035a6:	60cb      	str	r3, [r1, #12]
  4035a8:	6099      	str	r1, [r3, #8]
  4035aa:	f200 80b8 	bhi.w	40371e <_realloc_r+0x3aa>
  4035ae:	2a13      	cmp	r2, #19
  4035b0:	f240 80a9 	bls.w	403706 <_realloc_r+0x392>
  4035b4:	6833      	ldr	r3, [r6, #0]
  4035b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4035ba:	6873      	ldr	r3, [r6, #4]
  4035bc:	f8ca 300c 	str.w	r3, [sl, #12]
  4035c0:	2a1b      	cmp	r2, #27
  4035c2:	f200 80b5 	bhi.w	403730 <_realloc_r+0x3bc>
  4035c6:	3608      	adds	r6, #8
  4035c8:	f10a 0310 	add.w	r3, sl, #16
  4035cc:	6832      	ldr	r2, [r6, #0]
  4035ce:	601a      	str	r2, [r3, #0]
  4035d0:	6872      	ldr	r2, [r6, #4]
  4035d2:	605a      	str	r2, [r3, #4]
  4035d4:	68b2      	ldr	r2, [r6, #8]
  4035d6:	609a      	str	r2, [r3, #8]
  4035d8:	eb0a 0205 	add.w	r2, sl, r5
  4035dc:	ebc5 030c 	rsb	r3, r5, ip
  4035e0:	f043 0301 	orr.w	r3, r3, #1
  4035e4:	f8cb 2008 	str.w	r2, [fp, #8]
  4035e8:	6053      	str	r3, [r2, #4]
  4035ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4035ee:	f003 0301 	and.w	r3, r3, #1
  4035f2:	431d      	orrs	r5, r3
  4035f4:	4648      	mov	r0, r9
  4035f6:	f8ca 5004 	str.w	r5, [sl, #4]
  4035fa:	f7ff feb9 	bl	403370 <__malloc_unlock>
  4035fe:	4638      	mov	r0, r7
  403600:	e769      	b.n	4034d6 <_realloc_r+0x162>
  403602:	6833      	ldr	r3, [r6, #0]
  403604:	6003      	str	r3, [r0, #0]
  403606:	6873      	ldr	r3, [r6, #4]
  403608:	6043      	str	r3, [r0, #4]
  40360a:	2a1b      	cmp	r2, #27
  40360c:	d829      	bhi.n	403662 <_realloc_r+0x2ee>
  40360e:	f100 0308 	add.w	r3, r0, #8
  403612:	f106 0208 	add.w	r2, r6, #8
  403616:	e78b      	b.n	403530 <_realloc_r+0x1bc>
  403618:	463b      	mov	r3, r7
  40361a:	6832      	ldr	r2, [r6, #0]
  40361c:	601a      	str	r2, [r3, #0]
  40361e:	6872      	ldr	r2, [r6, #4]
  403620:	605a      	str	r2, [r3, #4]
  403622:	68b2      	ldr	r2, [r6, #8]
  403624:	609a      	str	r2, [r3, #8]
  403626:	463e      	mov	r6, r7
  403628:	4674      	mov	r4, lr
  40362a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40362e:	46d0      	mov	r8, sl
  403630:	e740      	b.n	4034b4 <_realloc_r+0x140>
  403632:	eb08 0205 	add.w	r2, r8, r5
  403636:	1b4b      	subs	r3, r1, r5
  403638:	f043 0301 	orr.w	r3, r3, #1
  40363c:	f8cb 2008 	str.w	r2, [fp, #8]
  403640:	6053      	str	r3, [r2, #4]
  403642:	f856 3c04 	ldr.w	r3, [r6, #-4]
  403646:	f003 0301 	and.w	r3, r3, #1
  40364a:	431d      	orrs	r5, r3
  40364c:	4648      	mov	r0, r9
  40364e:	f846 5c04 	str.w	r5, [r6, #-4]
  403652:	f7ff fe8d 	bl	403370 <__malloc_unlock>
  403656:	4630      	mov	r0, r6
  403658:	e73d      	b.n	4034d6 <_realloc_r+0x162>
  40365a:	4631      	mov	r1, r6
  40365c:	f7ff fe22 	bl	4032a4 <memmove>
  403660:	e76c      	b.n	40353c <_realloc_r+0x1c8>
  403662:	68b3      	ldr	r3, [r6, #8]
  403664:	6083      	str	r3, [r0, #8]
  403666:	68f3      	ldr	r3, [r6, #12]
  403668:	60c3      	str	r3, [r0, #12]
  40366a:	2a24      	cmp	r2, #36	; 0x24
  40366c:	d02c      	beq.n	4036c8 <_realloc_r+0x354>
  40366e:	f100 0310 	add.w	r3, r0, #16
  403672:	f106 0210 	add.w	r2, r6, #16
  403676:	e75b      	b.n	403530 <_realloc_r+0x1bc>
  403678:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40367c:	f022 0203 	bic.w	r2, r2, #3
  403680:	4414      	add	r4, r2
  403682:	e717      	b.n	4034b4 <_realloc_r+0x140>
  403684:	4631      	mov	r1, r6
  403686:	4638      	mov	r0, r7
  403688:	4674      	mov	r4, lr
  40368a:	463e      	mov	r6, r7
  40368c:	f7ff fe0a 	bl	4032a4 <memmove>
  403690:	46d0      	mov	r8, sl
  403692:	f8da 3004 	ldr.w	r3, [sl, #4]
  403696:	e70d      	b.n	4034b4 <_realloc_r+0x140>
  403698:	463a      	mov	r2, r7
  40369a:	e700      	b.n	40349e <_realloc_r+0x12a>
  40369c:	4631      	mov	r1, r6
  40369e:	4638      	mov	r0, r7
  4036a0:	461c      	mov	r4, r3
  4036a2:	463e      	mov	r6, r7
  4036a4:	f7ff fdfe 	bl	4032a4 <memmove>
  4036a8:	46d0      	mov	r8, sl
  4036aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4036ae:	e701      	b.n	4034b4 <_realloc_r+0x140>
  4036b0:	68b3      	ldr	r3, [r6, #8]
  4036b2:	f8ca 3010 	str.w	r3, [sl, #16]
  4036b6:	68f3      	ldr	r3, [r6, #12]
  4036b8:	f8ca 3014 	str.w	r3, [sl, #20]
  4036bc:	2a24      	cmp	r2, #36	; 0x24
  4036be:	d018      	beq.n	4036f2 <_realloc_r+0x37e>
  4036c0:	3610      	adds	r6, #16
  4036c2:	f10a 0318 	add.w	r3, sl, #24
  4036c6:	e7a8      	b.n	40361a <_realloc_r+0x2a6>
  4036c8:	6933      	ldr	r3, [r6, #16]
  4036ca:	6103      	str	r3, [r0, #16]
  4036cc:	6973      	ldr	r3, [r6, #20]
  4036ce:	6143      	str	r3, [r0, #20]
  4036d0:	f106 0218 	add.w	r2, r6, #24
  4036d4:	f100 0318 	add.w	r3, r0, #24
  4036d8:	e72a      	b.n	403530 <_realloc_r+0x1bc>
  4036da:	68b1      	ldr	r1, [r6, #8]
  4036dc:	f8ca 1010 	str.w	r1, [sl, #16]
  4036e0:	68f1      	ldr	r1, [r6, #12]
  4036e2:	f8ca 1014 	str.w	r1, [sl, #20]
  4036e6:	2a24      	cmp	r2, #36	; 0x24
  4036e8:	d00f      	beq.n	40370a <_realloc_r+0x396>
  4036ea:	3610      	adds	r6, #16
  4036ec:	f10a 0218 	add.w	r2, sl, #24
  4036f0:	e6d5      	b.n	40349e <_realloc_r+0x12a>
  4036f2:	6933      	ldr	r3, [r6, #16]
  4036f4:	f8ca 3018 	str.w	r3, [sl, #24]
  4036f8:	6973      	ldr	r3, [r6, #20]
  4036fa:	f8ca 301c 	str.w	r3, [sl, #28]
  4036fe:	3618      	adds	r6, #24
  403700:	f10a 0320 	add.w	r3, sl, #32
  403704:	e789      	b.n	40361a <_realloc_r+0x2a6>
  403706:	463b      	mov	r3, r7
  403708:	e760      	b.n	4035cc <_realloc_r+0x258>
  40370a:	6932      	ldr	r2, [r6, #16]
  40370c:	f8ca 2018 	str.w	r2, [sl, #24]
  403710:	6972      	ldr	r2, [r6, #20]
  403712:	f8ca 201c 	str.w	r2, [sl, #28]
  403716:	3618      	adds	r6, #24
  403718:	f10a 0220 	add.w	r2, sl, #32
  40371c:	e6bf      	b.n	40349e <_realloc_r+0x12a>
  40371e:	4631      	mov	r1, r6
  403720:	4638      	mov	r0, r7
  403722:	f8cd c004 	str.w	ip, [sp, #4]
  403726:	f7ff fdbd 	bl	4032a4 <memmove>
  40372a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40372e:	e753      	b.n	4035d8 <_realloc_r+0x264>
  403730:	68b3      	ldr	r3, [r6, #8]
  403732:	f8ca 3010 	str.w	r3, [sl, #16]
  403736:	68f3      	ldr	r3, [r6, #12]
  403738:	f8ca 3014 	str.w	r3, [sl, #20]
  40373c:	2a24      	cmp	r2, #36	; 0x24
  40373e:	d003      	beq.n	403748 <_realloc_r+0x3d4>
  403740:	3610      	adds	r6, #16
  403742:	f10a 0318 	add.w	r3, sl, #24
  403746:	e741      	b.n	4035cc <_realloc_r+0x258>
  403748:	6933      	ldr	r3, [r6, #16]
  40374a:	f8ca 3018 	str.w	r3, [sl, #24]
  40374e:	6973      	ldr	r3, [r6, #20]
  403750:	f8ca 301c 	str.w	r3, [sl, #28]
  403754:	3618      	adds	r6, #24
  403756:	f10a 0320 	add.w	r3, sl, #32
  40375a:	e737      	b.n	4035cc <_realloc_r+0x258>
  40375c:	20000458 	.word	0x20000458

00403760 <_sbrk_r>:
  403760:	b538      	push	{r3, r4, r5, lr}
  403762:	4c07      	ldr	r4, [pc, #28]	; (403780 <_sbrk_r+0x20>)
  403764:	2300      	movs	r3, #0
  403766:	4605      	mov	r5, r0
  403768:	4608      	mov	r0, r1
  40376a:	6023      	str	r3, [r4, #0]
  40376c:	f7fd fa4e 	bl	400c0c <_sbrk>
  403770:	1c43      	adds	r3, r0, #1
  403772:	d000      	beq.n	403776 <_sbrk_r+0x16>
  403774:	bd38      	pop	{r3, r4, r5, pc}
  403776:	6823      	ldr	r3, [r4, #0]
  403778:	2b00      	cmp	r3, #0
  40377a:	d0fb      	beq.n	403774 <_sbrk_r+0x14>
  40377c:	602b      	str	r3, [r5, #0]
  40377e:	bd38      	pop	{r3, r4, r5, pc}
  403780:	2000094c 	.word	0x2000094c

00403784 <__sread>:
  403784:	b510      	push	{r4, lr}
  403786:	460c      	mov	r4, r1
  403788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40378c:	f000 f9bc 	bl	403b08 <_read_r>
  403790:	2800      	cmp	r0, #0
  403792:	db03      	blt.n	40379c <__sread+0x18>
  403794:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403796:	4403      	add	r3, r0
  403798:	6523      	str	r3, [r4, #80]	; 0x50
  40379a:	bd10      	pop	{r4, pc}
  40379c:	89a3      	ldrh	r3, [r4, #12]
  40379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4037a2:	81a3      	strh	r3, [r4, #12]
  4037a4:	bd10      	pop	{r4, pc}
  4037a6:	bf00      	nop

004037a8 <__swrite>:
  4037a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037ac:	4616      	mov	r6, r2
  4037ae:	898a      	ldrh	r2, [r1, #12]
  4037b0:	461d      	mov	r5, r3
  4037b2:	05d3      	lsls	r3, r2, #23
  4037b4:	460c      	mov	r4, r1
  4037b6:	4607      	mov	r7, r0
  4037b8:	d506      	bpl.n	4037c8 <__swrite+0x20>
  4037ba:	2200      	movs	r2, #0
  4037bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037c0:	2302      	movs	r3, #2
  4037c2:	f000 f98d 	bl	403ae0 <_lseek_r>
  4037c6:	89a2      	ldrh	r2, [r4, #12]
  4037c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4037cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4037d0:	81a2      	strh	r2, [r4, #12]
  4037d2:	4638      	mov	r0, r7
  4037d4:	4632      	mov	r2, r6
  4037d6:	462b      	mov	r3, r5
  4037d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4037dc:	f000 b8a0 	b.w	403920 <_write_r>

004037e0 <__sseek>:
  4037e0:	b510      	push	{r4, lr}
  4037e2:	460c      	mov	r4, r1
  4037e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037e8:	f000 f97a 	bl	403ae0 <_lseek_r>
  4037ec:	89a3      	ldrh	r3, [r4, #12]
  4037ee:	1c42      	adds	r2, r0, #1
  4037f0:	bf0e      	itee	eq
  4037f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4037f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4037fa:	6520      	strne	r0, [r4, #80]	; 0x50
  4037fc:	81a3      	strh	r3, [r4, #12]
  4037fe:	bd10      	pop	{r4, pc}

00403800 <__sclose>:
  403800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403804:	f000 b8f2 	b.w	4039ec <_close_r>

00403808 <__swbuf_r>:
  403808:	b570      	push	{r4, r5, r6, lr}
  40380a:	460d      	mov	r5, r1
  40380c:	4614      	mov	r4, r2
  40380e:	4606      	mov	r6, r0
  403810:	b110      	cbz	r0, 403818 <__swbuf_r+0x10>
  403812:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403814:	2b00      	cmp	r3, #0
  403816:	d048      	beq.n	4038aa <__swbuf_r+0xa2>
  403818:	89a2      	ldrh	r2, [r4, #12]
  40381a:	69a3      	ldr	r3, [r4, #24]
  40381c:	60a3      	str	r3, [r4, #8]
  40381e:	b291      	uxth	r1, r2
  403820:	0708      	lsls	r0, r1, #28
  403822:	d538      	bpl.n	403896 <__swbuf_r+0x8e>
  403824:	6923      	ldr	r3, [r4, #16]
  403826:	2b00      	cmp	r3, #0
  403828:	d035      	beq.n	403896 <__swbuf_r+0x8e>
  40382a:	0489      	lsls	r1, r1, #18
  40382c:	b2ed      	uxtb	r5, r5
  40382e:	d515      	bpl.n	40385c <__swbuf_r+0x54>
  403830:	6822      	ldr	r2, [r4, #0]
  403832:	6961      	ldr	r1, [r4, #20]
  403834:	1ad3      	subs	r3, r2, r3
  403836:	428b      	cmp	r3, r1
  403838:	da1c      	bge.n	403874 <__swbuf_r+0x6c>
  40383a:	3301      	adds	r3, #1
  40383c:	68a1      	ldr	r1, [r4, #8]
  40383e:	1c50      	adds	r0, r2, #1
  403840:	3901      	subs	r1, #1
  403842:	60a1      	str	r1, [r4, #8]
  403844:	6020      	str	r0, [r4, #0]
  403846:	7015      	strb	r5, [r2, #0]
  403848:	6962      	ldr	r2, [r4, #20]
  40384a:	429a      	cmp	r2, r3
  40384c:	d01a      	beq.n	403884 <__swbuf_r+0x7c>
  40384e:	89a3      	ldrh	r3, [r4, #12]
  403850:	07db      	lsls	r3, r3, #31
  403852:	d501      	bpl.n	403858 <__swbuf_r+0x50>
  403854:	2d0a      	cmp	r5, #10
  403856:	d015      	beq.n	403884 <__swbuf_r+0x7c>
  403858:	4628      	mov	r0, r5
  40385a:	bd70      	pop	{r4, r5, r6, pc}
  40385c:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40385e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403862:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403866:	81a2      	strh	r2, [r4, #12]
  403868:	6822      	ldr	r2, [r4, #0]
  40386a:	6661      	str	r1, [r4, #100]	; 0x64
  40386c:	6961      	ldr	r1, [r4, #20]
  40386e:	1ad3      	subs	r3, r2, r3
  403870:	428b      	cmp	r3, r1
  403872:	dbe2      	blt.n	40383a <__swbuf_r+0x32>
  403874:	4630      	mov	r0, r6
  403876:	4621      	mov	r1, r4
  403878:	f7fe fd22 	bl	4022c0 <_fflush_r>
  40387c:	b940      	cbnz	r0, 403890 <__swbuf_r+0x88>
  40387e:	6822      	ldr	r2, [r4, #0]
  403880:	2301      	movs	r3, #1
  403882:	e7db      	b.n	40383c <__swbuf_r+0x34>
  403884:	4630      	mov	r0, r6
  403886:	4621      	mov	r1, r4
  403888:	f7fe fd1a 	bl	4022c0 <_fflush_r>
  40388c:	2800      	cmp	r0, #0
  40388e:	d0e3      	beq.n	403858 <__swbuf_r+0x50>
  403890:	f04f 30ff 	mov.w	r0, #4294967295
  403894:	bd70      	pop	{r4, r5, r6, pc}
  403896:	4630      	mov	r0, r6
  403898:	4621      	mov	r1, r4
  40389a:	f7fe fbf5 	bl	402088 <__swsetup_r>
  40389e:	2800      	cmp	r0, #0
  4038a0:	d1f6      	bne.n	403890 <__swbuf_r+0x88>
  4038a2:	89a2      	ldrh	r2, [r4, #12]
  4038a4:	6923      	ldr	r3, [r4, #16]
  4038a6:	b291      	uxth	r1, r2
  4038a8:	e7bf      	b.n	40382a <__swbuf_r+0x22>
  4038aa:	f7fe fd9d 	bl	4023e8 <__sinit>
  4038ae:	e7b3      	b.n	403818 <__swbuf_r+0x10>

004038b0 <_wcrtomb_r>:
  4038b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038b4:	4605      	mov	r5, r0
  4038b6:	b086      	sub	sp, #24
  4038b8:	461e      	mov	r6, r3
  4038ba:	460c      	mov	r4, r1
  4038bc:	b1a1      	cbz	r1, 4038e8 <_wcrtomb_r+0x38>
  4038be:	4b10      	ldr	r3, [pc, #64]	; (403900 <_wcrtomb_r+0x50>)
  4038c0:	4617      	mov	r7, r2
  4038c2:	f8d3 8000 	ldr.w	r8, [r3]
  4038c6:	f7ff f8f5 	bl	402ab4 <__locale_charset>
  4038ca:	9600      	str	r6, [sp, #0]
  4038cc:	4603      	mov	r3, r0
  4038ce:	4621      	mov	r1, r4
  4038d0:	463a      	mov	r2, r7
  4038d2:	4628      	mov	r0, r5
  4038d4:	47c0      	blx	r8
  4038d6:	1c43      	adds	r3, r0, #1
  4038d8:	d103      	bne.n	4038e2 <_wcrtomb_r+0x32>
  4038da:	2200      	movs	r2, #0
  4038dc:	238a      	movs	r3, #138	; 0x8a
  4038de:	6032      	str	r2, [r6, #0]
  4038e0:	602b      	str	r3, [r5, #0]
  4038e2:	b006      	add	sp, #24
  4038e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038e8:	4b05      	ldr	r3, [pc, #20]	; (403900 <_wcrtomb_r+0x50>)
  4038ea:	681f      	ldr	r7, [r3, #0]
  4038ec:	f7ff f8e2 	bl	402ab4 <__locale_charset>
  4038f0:	9600      	str	r6, [sp, #0]
  4038f2:	4603      	mov	r3, r0
  4038f4:	4622      	mov	r2, r4
  4038f6:	4628      	mov	r0, r5
  4038f8:	a903      	add	r1, sp, #12
  4038fa:	47b8      	blx	r7
  4038fc:	e7eb      	b.n	4038d6 <_wcrtomb_r+0x26>
  4038fe:	bf00      	nop
  403900:	20000868 	.word	0x20000868

00403904 <__ascii_wctomb>:
  403904:	b121      	cbz	r1, 403910 <__ascii_wctomb+0xc>
  403906:	2aff      	cmp	r2, #255	; 0xff
  403908:	d804      	bhi.n	403914 <__ascii_wctomb+0x10>
  40390a:	700a      	strb	r2, [r1, #0]
  40390c:	2001      	movs	r0, #1
  40390e:	4770      	bx	lr
  403910:	4608      	mov	r0, r1
  403912:	4770      	bx	lr
  403914:	238a      	movs	r3, #138	; 0x8a
  403916:	6003      	str	r3, [r0, #0]
  403918:	f04f 30ff 	mov.w	r0, #4294967295
  40391c:	4770      	bx	lr
  40391e:	bf00      	nop

00403920 <_write_r>:
  403920:	b570      	push	{r4, r5, r6, lr}
  403922:	4c08      	ldr	r4, [pc, #32]	; (403944 <_write_r+0x24>)
  403924:	4606      	mov	r6, r0
  403926:	2500      	movs	r5, #0
  403928:	4608      	mov	r0, r1
  40392a:	4611      	mov	r1, r2
  40392c:	461a      	mov	r2, r3
  40392e:	6025      	str	r5, [r4, #0]
  403930:	f7fc fc4a 	bl	4001c8 <_write>
  403934:	1c43      	adds	r3, r0, #1
  403936:	d000      	beq.n	40393a <_write_r+0x1a>
  403938:	bd70      	pop	{r4, r5, r6, pc}
  40393a:	6823      	ldr	r3, [r4, #0]
  40393c:	2b00      	cmp	r3, #0
  40393e:	d0fb      	beq.n	403938 <_write_r+0x18>
  403940:	6033      	str	r3, [r6, #0]
  403942:	bd70      	pop	{r4, r5, r6, pc}
  403944:	2000094c 	.word	0x2000094c

00403948 <__register_exitproc>:
  403948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40394c:	4c25      	ldr	r4, [pc, #148]	; (4039e4 <__register_exitproc+0x9c>)
  40394e:	6825      	ldr	r5, [r4, #0]
  403950:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403954:	4606      	mov	r6, r0
  403956:	4688      	mov	r8, r1
  403958:	4692      	mov	sl, r2
  40395a:	4699      	mov	r9, r3
  40395c:	b3cc      	cbz	r4, 4039d2 <__register_exitproc+0x8a>
  40395e:	6860      	ldr	r0, [r4, #4]
  403960:	281f      	cmp	r0, #31
  403962:	dc18      	bgt.n	403996 <__register_exitproc+0x4e>
  403964:	1c43      	adds	r3, r0, #1
  403966:	b17e      	cbz	r6, 403988 <__register_exitproc+0x40>
  403968:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40396c:	2101      	movs	r1, #1
  40396e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403972:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  403976:	fa01 f200 	lsl.w	r2, r1, r0
  40397a:	4317      	orrs	r7, r2
  40397c:	2e02      	cmp	r6, #2
  40397e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403982:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403986:	d01e      	beq.n	4039c6 <__register_exitproc+0x7e>
  403988:	3002      	adds	r0, #2
  40398a:	6063      	str	r3, [r4, #4]
  40398c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403990:	2000      	movs	r0, #0
  403992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403996:	4b14      	ldr	r3, [pc, #80]	; (4039e8 <__register_exitproc+0xa0>)
  403998:	b303      	cbz	r3, 4039dc <__register_exitproc+0x94>
  40399a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40399e:	f7ff f903 	bl	402ba8 <malloc>
  4039a2:	4604      	mov	r4, r0
  4039a4:	b1d0      	cbz	r0, 4039dc <__register_exitproc+0x94>
  4039a6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4039aa:	2700      	movs	r7, #0
  4039ac:	e880 0088 	stmia.w	r0, {r3, r7}
  4039b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4039b4:	4638      	mov	r0, r7
  4039b6:	2301      	movs	r3, #1
  4039b8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4039bc:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4039c0:	2e00      	cmp	r6, #0
  4039c2:	d0e1      	beq.n	403988 <__register_exitproc+0x40>
  4039c4:	e7d0      	b.n	403968 <__register_exitproc+0x20>
  4039c6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4039ca:	430a      	orrs	r2, r1
  4039cc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4039d0:	e7da      	b.n	403988 <__register_exitproc+0x40>
  4039d2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4039d6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4039da:	e7c0      	b.n	40395e <__register_exitproc+0x16>
  4039dc:	f04f 30ff 	mov.w	r0, #4294967295
  4039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039e4:	004041ec 	.word	0x004041ec
  4039e8:	00402ba9 	.word	0x00402ba9

004039ec <_close_r>:
  4039ec:	b538      	push	{r3, r4, r5, lr}
  4039ee:	4c07      	ldr	r4, [pc, #28]	; (403a0c <_close_r+0x20>)
  4039f0:	2300      	movs	r3, #0
  4039f2:	4605      	mov	r5, r0
  4039f4:	4608      	mov	r0, r1
  4039f6:	6023      	str	r3, [r4, #0]
  4039f8:	f7fd f922 	bl	400c40 <_close>
  4039fc:	1c43      	adds	r3, r0, #1
  4039fe:	d000      	beq.n	403a02 <_close_r+0x16>
  403a00:	bd38      	pop	{r3, r4, r5, pc}
  403a02:	6823      	ldr	r3, [r4, #0]
  403a04:	2b00      	cmp	r3, #0
  403a06:	d0fb      	beq.n	403a00 <_close_r+0x14>
  403a08:	602b      	str	r3, [r5, #0]
  403a0a:	bd38      	pop	{r3, r4, r5, pc}
  403a0c:	2000094c 	.word	0x2000094c

00403a10 <_fclose_r>:
  403a10:	2900      	cmp	r1, #0
  403a12:	d03d      	beq.n	403a90 <_fclose_r+0x80>
  403a14:	b570      	push	{r4, r5, r6, lr}
  403a16:	4605      	mov	r5, r0
  403a18:	460c      	mov	r4, r1
  403a1a:	b108      	cbz	r0, 403a20 <_fclose_r+0x10>
  403a1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a1e:	b37b      	cbz	r3, 403a80 <_fclose_r+0x70>
  403a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a24:	b90b      	cbnz	r3, 403a2a <_fclose_r+0x1a>
  403a26:	2000      	movs	r0, #0
  403a28:	bd70      	pop	{r4, r5, r6, pc}
  403a2a:	4628      	mov	r0, r5
  403a2c:	4621      	mov	r1, r4
  403a2e:	f7fe fb9d 	bl	40216c <__sflush_r>
  403a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403a34:	4606      	mov	r6, r0
  403a36:	b133      	cbz	r3, 403a46 <_fclose_r+0x36>
  403a38:	4628      	mov	r0, r5
  403a3a:	69e1      	ldr	r1, [r4, #28]
  403a3c:	4798      	blx	r3
  403a3e:	2800      	cmp	r0, #0
  403a40:	bfb8      	it	lt
  403a42:	f04f 36ff 	movlt.w	r6, #4294967295
  403a46:	89a3      	ldrh	r3, [r4, #12]
  403a48:	061b      	lsls	r3, r3, #24
  403a4a:	d41c      	bmi.n	403a86 <_fclose_r+0x76>
  403a4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a4e:	b141      	cbz	r1, 403a62 <_fclose_r+0x52>
  403a50:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a54:	4299      	cmp	r1, r3
  403a56:	d002      	beq.n	403a5e <_fclose_r+0x4e>
  403a58:	4628      	mov	r0, r5
  403a5a:	f7fe fd9d 	bl	402598 <_free_r>
  403a5e:	2300      	movs	r3, #0
  403a60:	6323      	str	r3, [r4, #48]	; 0x30
  403a62:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403a64:	b121      	cbz	r1, 403a70 <_fclose_r+0x60>
  403a66:	4628      	mov	r0, r5
  403a68:	f7fe fd96 	bl	402598 <_free_r>
  403a6c:	2300      	movs	r3, #0
  403a6e:	6463      	str	r3, [r4, #68]	; 0x44
  403a70:	f7fe fcc0 	bl	4023f4 <__sfp_lock_acquire>
  403a74:	2300      	movs	r3, #0
  403a76:	81a3      	strh	r3, [r4, #12]
  403a78:	f7fe fcbe 	bl	4023f8 <__sfp_lock_release>
  403a7c:	4630      	mov	r0, r6
  403a7e:	bd70      	pop	{r4, r5, r6, pc}
  403a80:	f7fe fcb2 	bl	4023e8 <__sinit>
  403a84:	e7cc      	b.n	403a20 <_fclose_r+0x10>
  403a86:	4628      	mov	r0, r5
  403a88:	6921      	ldr	r1, [r4, #16]
  403a8a:	f7fe fd85 	bl	402598 <_free_r>
  403a8e:	e7dd      	b.n	403a4c <_fclose_r+0x3c>
  403a90:	2000      	movs	r0, #0
  403a92:	4770      	bx	lr

00403a94 <_fstat_r>:
  403a94:	b538      	push	{r3, r4, r5, lr}
  403a96:	4c08      	ldr	r4, [pc, #32]	; (403ab8 <_fstat_r+0x24>)
  403a98:	2300      	movs	r3, #0
  403a9a:	4605      	mov	r5, r0
  403a9c:	4608      	mov	r0, r1
  403a9e:	4611      	mov	r1, r2
  403aa0:	6023      	str	r3, [r4, #0]
  403aa2:	f7fd f8d1 	bl	400c48 <_fstat>
  403aa6:	1c43      	adds	r3, r0, #1
  403aa8:	d000      	beq.n	403aac <_fstat_r+0x18>
  403aaa:	bd38      	pop	{r3, r4, r5, pc}
  403aac:	6823      	ldr	r3, [r4, #0]
  403aae:	2b00      	cmp	r3, #0
  403ab0:	d0fb      	beq.n	403aaa <_fstat_r+0x16>
  403ab2:	602b      	str	r3, [r5, #0]
  403ab4:	bd38      	pop	{r3, r4, r5, pc}
  403ab6:	bf00      	nop
  403ab8:	2000094c 	.word	0x2000094c

00403abc <_isatty_r>:
  403abc:	b538      	push	{r3, r4, r5, lr}
  403abe:	4c07      	ldr	r4, [pc, #28]	; (403adc <_isatty_r+0x20>)
  403ac0:	2300      	movs	r3, #0
  403ac2:	4605      	mov	r5, r0
  403ac4:	4608      	mov	r0, r1
  403ac6:	6023      	str	r3, [r4, #0]
  403ac8:	f7fd f8c4 	bl	400c54 <_isatty>
  403acc:	1c43      	adds	r3, r0, #1
  403ace:	d000      	beq.n	403ad2 <_isatty_r+0x16>
  403ad0:	bd38      	pop	{r3, r4, r5, pc}
  403ad2:	6823      	ldr	r3, [r4, #0]
  403ad4:	2b00      	cmp	r3, #0
  403ad6:	d0fb      	beq.n	403ad0 <_isatty_r+0x14>
  403ad8:	602b      	str	r3, [r5, #0]
  403ada:	bd38      	pop	{r3, r4, r5, pc}
  403adc:	2000094c 	.word	0x2000094c

00403ae0 <_lseek_r>:
  403ae0:	b570      	push	{r4, r5, r6, lr}
  403ae2:	4c08      	ldr	r4, [pc, #32]	; (403b04 <_lseek_r+0x24>)
  403ae4:	4606      	mov	r6, r0
  403ae6:	2500      	movs	r5, #0
  403ae8:	4608      	mov	r0, r1
  403aea:	4611      	mov	r1, r2
  403aec:	461a      	mov	r2, r3
  403aee:	6025      	str	r5, [r4, #0]
  403af0:	f7fd f8b2 	bl	400c58 <_lseek>
  403af4:	1c43      	adds	r3, r0, #1
  403af6:	d000      	beq.n	403afa <_lseek_r+0x1a>
  403af8:	bd70      	pop	{r4, r5, r6, pc}
  403afa:	6823      	ldr	r3, [r4, #0]
  403afc:	2b00      	cmp	r3, #0
  403afe:	d0fb      	beq.n	403af8 <_lseek_r+0x18>
  403b00:	6033      	str	r3, [r6, #0]
  403b02:	bd70      	pop	{r4, r5, r6, pc}
  403b04:	2000094c 	.word	0x2000094c

00403b08 <_read_r>:
  403b08:	b570      	push	{r4, r5, r6, lr}
  403b0a:	4c08      	ldr	r4, [pc, #32]	; (403b2c <_read_r+0x24>)
  403b0c:	4606      	mov	r6, r0
  403b0e:	2500      	movs	r5, #0
  403b10:	4608      	mov	r0, r1
  403b12:	4611      	mov	r1, r2
  403b14:	461a      	mov	r2, r3
  403b16:	6025      	str	r5, [r4, #0]
  403b18:	f7fc fb38 	bl	40018c <_read>
  403b1c:	1c43      	adds	r3, r0, #1
  403b1e:	d000      	beq.n	403b22 <_read_r+0x1a>
  403b20:	bd70      	pop	{r4, r5, r6, pc}
  403b22:	6823      	ldr	r3, [r4, #0]
  403b24:	2b00      	cmp	r3, #0
  403b26:	d0fb      	beq.n	403b20 <_read_r+0x18>
  403b28:	6033      	str	r3, [r6, #0]
  403b2a:	bd70      	pop	{r4, r5, r6, pc}
  403b2c:	2000094c 	.word	0x2000094c

00403b30 <__aeabi_uldivmod>:
  403b30:	b953      	cbnz	r3, 403b48 <__aeabi_uldivmod+0x18>
  403b32:	b94a      	cbnz	r2, 403b48 <__aeabi_uldivmod+0x18>
  403b34:	2900      	cmp	r1, #0
  403b36:	bf08      	it	eq
  403b38:	2800      	cmpeq	r0, #0
  403b3a:	bf1c      	itt	ne
  403b3c:	f04f 31ff 	movne.w	r1, #4294967295
  403b40:	f04f 30ff 	movne.w	r0, #4294967295
  403b44:	f000 b83c 	b.w	403bc0 <__aeabi_idiv0>
  403b48:	b082      	sub	sp, #8
  403b4a:	46ec      	mov	ip, sp
  403b4c:	e92d 5000 	stmdb	sp!, {ip, lr}
  403b50:	f000 f81e 	bl	403b90 <__gnu_uldivmod_helper>
  403b54:	f8dd e004 	ldr.w	lr, [sp, #4]
  403b58:	b002      	add	sp, #8
  403b5a:	bc0c      	pop	{r2, r3}
  403b5c:	4770      	bx	lr
  403b5e:	bf00      	nop

00403b60 <__gnu_ldivmod_helper>:
  403b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b64:	9c06      	ldr	r4, [sp, #24]
  403b66:	4615      	mov	r5, r2
  403b68:	4606      	mov	r6, r0
  403b6a:	460f      	mov	r7, r1
  403b6c:	4698      	mov	r8, r3
  403b6e:	f000 f829 	bl	403bc4 <__divdi3>
  403b72:	fb05 f301 	mul.w	r3, r5, r1
  403b76:	fb00 3808 	mla	r8, r0, r8, r3
  403b7a:	fba5 2300 	umull	r2, r3, r5, r0
  403b7e:	1ab2      	subs	r2, r6, r2
  403b80:	4443      	add	r3, r8
  403b82:	eb67 0303 	sbc.w	r3, r7, r3
  403b86:	e9c4 2300 	strd	r2, r3, [r4]
  403b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b8e:	bf00      	nop

00403b90 <__gnu_uldivmod_helper>:
  403b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b94:	9c06      	ldr	r4, [sp, #24]
  403b96:	4690      	mov	r8, r2
  403b98:	4606      	mov	r6, r0
  403b9a:	460f      	mov	r7, r1
  403b9c:	461d      	mov	r5, r3
  403b9e:	f000 f95f 	bl	403e60 <__udivdi3>
  403ba2:	fb00 f505 	mul.w	r5, r0, r5
  403ba6:	fba0 2308 	umull	r2, r3, r0, r8
  403baa:	fb08 5501 	mla	r5, r8, r1, r5
  403bae:	1ab2      	subs	r2, r6, r2
  403bb0:	442b      	add	r3, r5
  403bb2:	eb67 0303 	sbc.w	r3, r7, r3
  403bb6:	e9c4 2300 	strd	r2, r3, [r4]
  403bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bbe:	bf00      	nop

00403bc0 <__aeabi_idiv0>:
  403bc0:	4770      	bx	lr
  403bc2:	bf00      	nop

00403bc4 <__divdi3>:
  403bc4:	2900      	cmp	r1, #0
  403bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403bca:	f2c0 80a6 	blt.w	403d1a <__divdi3+0x156>
  403bce:	2600      	movs	r6, #0
  403bd0:	2b00      	cmp	r3, #0
  403bd2:	f2c0 809c 	blt.w	403d0e <__divdi3+0x14a>
  403bd6:	4688      	mov	r8, r1
  403bd8:	4694      	mov	ip, r2
  403bda:	469e      	mov	lr, r3
  403bdc:	4615      	mov	r5, r2
  403bde:	4604      	mov	r4, r0
  403be0:	460f      	mov	r7, r1
  403be2:	2b00      	cmp	r3, #0
  403be4:	d13d      	bne.n	403c62 <__divdi3+0x9e>
  403be6:	428a      	cmp	r2, r1
  403be8:	d959      	bls.n	403c9e <__divdi3+0xda>
  403bea:	fab2 f382 	clz	r3, r2
  403bee:	b13b      	cbz	r3, 403c00 <__divdi3+0x3c>
  403bf0:	f1c3 0220 	rsb	r2, r3, #32
  403bf4:	409f      	lsls	r7, r3
  403bf6:	fa20 f202 	lsr.w	r2, r0, r2
  403bfa:	409d      	lsls	r5, r3
  403bfc:	4317      	orrs	r7, r2
  403bfe:	409c      	lsls	r4, r3
  403c00:	0c29      	lsrs	r1, r5, #16
  403c02:	0c22      	lsrs	r2, r4, #16
  403c04:	fbb7 fef1 	udiv	lr, r7, r1
  403c08:	b2a8      	uxth	r0, r5
  403c0a:	fb01 771e 	mls	r7, r1, lr, r7
  403c0e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  403c12:	fb00 f30e 	mul.w	r3, r0, lr
  403c16:	42bb      	cmp	r3, r7
  403c18:	d90a      	bls.n	403c30 <__divdi3+0x6c>
  403c1a:	197f      	adds	r7, r7, r5
  403c1c:	f10e 32ff 	add.w	r2, lr, #4294967295
  403c20:	f080 8105 	bcs.w	403e2e <__divdi3+0x26a>
  403c24:	42bb      	cmp	r3, r7
  403c26:	f240 8102 	bls.w	403e2e <__divdi3+0x26a>
  403c2a:	f1ae 0e02 	sub.w	lr, lr, #2
  403c2e:	442f      	add	r7, r5
  403c30:	1aff      	subs	r7, r7, r3
  403c32:	b2a4      	uxth	r4, r4
  403c34:	fbb7 f3f1 	udiv	r3, r7, r1
  403c38:	fb01 7713 	mls	r7, r1, r3, r7
  403c3c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403c40:	fb00 f003 	mul.w	r0, r0, r3
  403c44:	42b8      	cmp	r0, r7
  403c46:	d908      	bls.n	403c5a <__divdi3+0x96>
  403c48:	197f      	adds	r7, r7, r5
  403c4a:	f103 32ff 	add.w	r2, r3, #4294967295
  403c4e:	f080 80f0 	bcs.w	403e32 <__divdi3+0x26e>
  403c52:	42b8      	cmp	r0, r7
  403c54:	f240 80ed 	bls.w	403e32 <__divdi3+0x26e>
  403c58:	3b02      	subs	r3, #2
  403c5a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
  403c5e:	2200      	movs	r2, #0
  403c60:	e003      	b.n	403c6a <__divdi3+0xa6>
  403c62:	428b      	cmp	r3, r1
  403c64:	d90f      	bls.n	403c86 <__divdi3+0xc2>
  403c66:	2200      	movs	r2, #0
  403c68:	4613      	mov	r3, r2
  403c6a:	1c34      	adds	r4, r6, #0
  403c6c:	bf18      	it	ne
  403c6e:	2401      	movne	r4, #1
  403c70:	4260      	negs	r0, r4
  403c72:	f04f 0500 	mov.w	r5, #0
  403c76:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  403c7a:	4058      	eors	r0, r3
  403c7c:	4051      	eors	r1, r2
  403c7e:	1900      	adds	r0, r0, r4
  403c80:	4169      	adcs	r1, r5
  403c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403c86:	fab3 f283 	clz	r2, r3
  403c8a:	2a00      	cmp	r2, #0
  403c8c:	f040 8086 	bne.w	403d9c <__divdi3+0x1d8>
  403c90:	428b      	cmp	r3, r1
  403c92:	d302      	bcc.n	403c9a <__divdi3+0xd6>
  403c94:	4584      	cmp	ip, r0
  403c96:	f200 80db 	bhi.w	403e50 <__divdi3+0x28c>
  403c9a:	2301      	movs	r3, #1
  403c9c:	e7e5      	b.n	403c6a <__divdi3+0xa6>
  403c9e:	b912      	cbnz	r2, 403ca6 <__divdi3+0xe2>
  403ca0:	2301      	movs	r3, #1
  403ca2:	fbb3 f5f2 	udiv	r5, r3, r2
  403ca6:	fab5 f085 	clz	r0, r5
  403caa:	2800      	cmp	r0, #0
  403cac:	d13b      	bne.n	403d26 <__divdi3+0x162>
  403cae:	1b78      	subs	r0, r7, r5
  403cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403cb4:	fa1f fc85 	uxth.w	ip, r5
  403cb8:	2201      	movs	r2, #1
  403cba:	fbb0 f8fe 	udiv	r8, r0, lr
  403cbe:	0c21      	lsrs	r1, r4, #16
  403cc0:	fb0e 0718 	mls	r7, lr, r8, r0
  403cc4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  403cc8:	fb0c f308 	mul.w	r3, ip, r8
  403ccc:	42bb      	cmp	r3, r7
  403cce:	d907      	bls.n	403ce0 <__divdi3+0x11c>
  403cd0:	197f      	adds	r7, r7, r5
  403cd2:	f108 31ff 	add.w	r1, r8, #4294967295
  403cd6:	d202      	bcs.n	403cde <__divdi3+0x11a>
  403cd8:	42bb      	cmp	r3, r7
  403cda:	f200 80bd 	bhi.w	403e58 <__divdi3+0x294>
  403cde:	4688      	mov	r8, r1
  403ce0:	1aff      	subs	r7, r7, r3
  403ce2:	b2a4      	uxth	r4, r4
  403ce4:	fbb7 f3fe 	udiv	r3, r7, lr
  403ce8:	fb0e 7713 	mls	r7, lr, r3, r7
  403cec:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  403cf0:	fb0c fc03 	mul.w	ip, ip, r3
  403cf4:	45bc      	cmp	ip, r7
  403cf6:	d907      	bls.n	403d08 <__divdi3+0x144>
  403cf8:	197f      	adds	r7, r7, r5
  403cfa:	f103 31ff 	add.w	r1, r3, #4294967295
  403cfe:	d202      	bcs.n	403d06 <__divdi3+0x142>
  403d00:	45bc      	cmp	ip, r7
  403d02:	f200 80a7 	bhi.w	403e54 <__divdi3+0x290>
  403d06:	460b      	mov	r3, r1
  403d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403d0c:	e7ad      	b.n	403c6a <__divdi3+0xa6>
  403d0e:	4252      	negs	r2, r2
  403d10:	ea6f 0606 	mvn.w	r6, r6
  403d14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403d18:	e75d      	b.n	403bd6 <__divdi3+0x12>
  403d1a:	4240      	negs	r0, r0
  403d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403d20:	f04f 36ff 	mov.w	r6, #4294967295
  403d24:	e754      	b.n	403bd0 <__divdi3+0xc>
  403d26:	f1c0 0220 	rsb	r2, r0, #32
  403d2a:	fa24 f102 	lsr.w	r1, r4, r2
  403d2e:	fa07 f300 	lsl.w	r3, r7, r0
  403d32:	4085      	lsls	r5, r0
  403d34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403d38:	40d7      	lsrs	r7, r2
  403d3a:	4319      	orrs	r1, r3
  403d3c:	fbb7 f2fe 	udiv	r2, r7, lr
  403d40:	0c0b      	lsrs	r3, r1, #16
  403d42:	fb0e 7712 	mls	r7, lr, r2, r7
  403d46:	fa1f fc85 	uxth.w	ip, r5
  403d4a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  403d4e:	fb0c f702 	mul.w	r7, ip, r2
  403d52:	429f      	cmp	r7, r3
  403d54:	fa04 f400 	lsl.w	r4, r4, r0
  403d58:	d907      	bls.n	403d6a <__divdi3+0x1a6>
  403d5a:	195b      	adds	r3, r3, r5
  403d5c:	f102 30ff 	add.w	r0, r2, #4294967295
  403d60:	d274      	bcs.n	403e4c <__divdi3+0x288>
  403d62:	429f      	cmp	r7, r3
  403d64:	d972      	bls.n	403e4c <__divdi3+0x288>
  403d66:	3a02      	subs	r2, #2
  403d68:	442b      	add	r3, r5
  403d6a:	1bdf      	subs	r7, r3, r7
  403d6c:	b289      	uxth	r1, r1
  403d6e:	fbb7 f8fe 	udiv	r8, r7, lr
  403d72:	fb0e 7318 	mls	r3, lr, r8, r7
  403d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403d7a:	fb0c f708 	mul.w	r7, ip, r8
  403d7e:	429f      	cmp	r7, r3
  403d80:	d908      	bls.n	403d94 <__divdi3+0x1d0>
  403d82:	195b      	adds	r3, r3, r5
  403d84:	f108 31ff 	add.w	r1, r8, #4294967295
  403d88:	d25c      	bcs.n	403e44 <__divdi3+0x280>
  403d8a:	429f      	cmp	r7, r3
  403d8c:	d95a      	bls.n	403e44 <__divdi3+0x280>
  403d8e:	f1a8 0802 	sub.w	r8, r8, #2
  403d92:	442b      	add	r3, r5
  403d94:	1bd8      	subs	r0, r3, r7
  403d96:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  403d9a:	e78e      	b.n	403cba <__divdi3+0xf6>
  403d9c:	f1c2 0320 	rsb	r3, r2, #32
  403da0:	fa2c f103 	lsr.w	r1, ip, r3
  403da4:	fa0e fe02 	lsl.w	lr, lr, r2
  403da8:	fa20 f703 	lsr.w	r7, r0, r3
  403dac:	ea41 0e0e 	orr.w	lr, r1, lr
  403db0:	fa08 f002 	lsl.w	r0, r8, r2
  403db4:	fa28 f103 	lsr.w	r1, r8, r3
  403db8:	ea4f 451e 	mov.w	r5, lr, lsr #16
  403dbc:	4338      	orrs	r0, r7
  403dbe:	fbb1 f8f5 	udiv	r8, r1, r5
  403dc2:	0c03      	lsrs	r3, r0, #16
  403dc4:	fb05 1118 	mls	r1, r5, r8, r1
  403dc8:	fa1f f78e 	uxth.w	r7, lr
  403dcc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403dd0:	fb07 f308 	mul.w	r3, r7, r8
  403dd4:	428b      	cmp	r3, r1
  403dd6:	fa0c fc02 	lsl.w	ip, ip, r2
  403dda:	d909      	bls.n	403df0 <__divdi3+0x22c>
  403ddc:	eb11 010e 	adds.w	r1, r1, lr
  403de0:	f108 39ff 	add.w	r9, r8, #4294967295
  403de4:	d230      	bcs.n	403e48 <__divdi3+0x284>
  403de6:	428b      	cmp	r3, r1
  403de8:	d92e      	bls.n	403e48 <__divdi3+0x284>
  403dea:	f1a8 0802 	sub.w	r8, r8, #2
  403dee:	4471      	add	r1, lr
  403df0:	1ac9      	subs	r1, r1, r3
  403df2:	b280      	uxth	r0, r0
  403df4:	fbb1 f3f5 	udiv	r3, r1, r5
  403df8:	fb05 1113 	mls	r1, r5, r3, r1
  403dfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403e00:	fb07 f703 	mul.w	r7, r7, r3
  403e04:	428f      	cmp	r7, r1
  403e06:	d908      	bls.n	403e1a <__divdi3+0x256>
  403e08:	eb11 010e 	adds.w	r1, r1, lr
  403e0c:	f103 30ff 	add.w	r0, r3, #4294967295
  403e10:	d216      	bcs.n	403e40 <__divdi3+0x27c>
  403e12:	428f      	cmp	r7, r1
  403e14:	d914      	bls.n	403e40 <__divdi3+0x27c>
  403e16:	3b02      	subs	r3, #2
  403e18:	4471      	add	r1, lr
  403e1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403e1e:	1bc9      	subs	r1, r1, r7
  403e20:	fba3 890c 	umull	r8, r9, r3, ip
  403e24:	4549      	cmp	r1, r9
  403e26:	d309      	bcc.n	403e3c <__divdi3+0x278>
  403e28:	d005      	beq.n	403e36 <__divdi3+0x272>
  403e2a:	2200      	movs	r2, #0
  403e2c:	e71d      	b.n	403c6a <__divdi3+0xa6>
  403e2e:	4696      	mov	lr, r2
  403e30:	e6fe      	b.n	403c30 <__divdi3+0x6c>
  403e32:	4613      	mov	r3, r2
  403e34:	e711      	b.n	403c5a <__divdi3+0x96>
  403e36:	4094      	lsls	r4, r2
  403e38:	4544      	cmp	r4, r8
  403e3a:	d2f6      	bcs.n	403e2a <__divdi3+0x266>
  403e3c:	3b01      	subs	r3, #1
  403e3e:	e7f4      	b.n	403e2a <__divdi3+0x266>
  403e40:	4603      	mov	r3, r0
  403e42:	e7ea      	b.n	403e1a <__divdi3+0x256>
  403e44:	4688      	mov	r8, r1
  403e46:	e7a5      	b.n	403d94 <__divdi3+0x1d0>
  403e48:	46c8      	mov	r8, r9
  403e4a:	e7d1      	b.n	403df0 <__divdi3+0x22c>
  403e4c:	4602      	mov	r2, r0
  403e4e:	e78c      	b.n	403d6a <__divdi3+0x1a6>
  403e50:	4613      	mov	r3, r2
  403e52:	e70a      	b.n	403c6a <__divdi3+0xa6>
  403e54:	3b02      	subs	r3, #2
  403e56:	e757      	b.n	403d08 <__divdi3+0x144>
  403e58:	f1a8 0802 	sub.w	r8, r8, #2
  403e5c:	442f      	add	r7, r5
  403e5e:	e73f      	b.n	403ce0 <__divdi3+0x11c>

00403e60 <__udivdi3>:
  403e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403e64:	2b00      	cmp	r3, #0
  403e66:	d144      	bne.n	403ef2 <__udivdi3+0x92>
  403e68:	428a      	cmp	r2, r1
  403e6a:	4615      	mov	r5, r2
  403e6c:	4604      	mov	r4, r0
  403e6e:	d94f      	bls.n	403f10 <__udivdi3+0xb0>
  403e70:	fab2 f782 	clz	r7, r2
  403e74:	460e      	mov	r6, r1
  403e76:	b14f      	cbz	r7, 403e8c <__udivdi3+0x2c>
  403e78:	f1c7 0320 	rsb	r3, r7, #32
  403e7c:	40b9      	lsls	r1, r7
  403e7e:	fa20 f603 	lsr.w	r6, r0, r3
  403e82:	fa02 f507 	lsl.w	r5, r2, r7
  403e86:	430e      	orrs	r6, r1
  403e88:	fa00 f407 	lsl.w	r4, r0, r7
  403e8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403e90:	0c23      	lsrs	r3, r4, #16
  403e92:	fbb6 f0fe 	udiv	r0, r6, lr
  403e96:	b2af      	uxth	r7, r5
  403e98:	fb0e 6110 	mls	r1, lr, r0, r6
  403e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  403ea0:	fb07 f100 	mul.w	r1, r7, r0
  403ea4:	4299      	cmp	r1, r3
  403ea6:	d909      	bls.n	403ebc <__udivdi3+0x5c>
  403ea8:	195b      	adds	r3, r3, r5
  403eaa:	f100 32ff 	add.w	r2, r0, #4294967295
  403eae:	f080 80ec 	bcs.w	40408a <__udivdi3+0x22a>
  403eb2:	4299      	cmp	r1, r3
  403eb4:	f240 80e9 	bls.w	40408a <__udivdi3+0x22a>
  403eb8:	3802      	subs	r0, #2
  403eba:	442b      	add	r3, r5
  403ebc:	1a5a      	subs	r2, r3, r1
  403ebe:	b2a4      	uxth	r4, r4
  403ec0:	fbb2 f3fe 	udiv	r3, r2, lr
  403ec4:	fb0e 2213 	mls	r2, lr, r3, r2
  403ec8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  403ecc:	fb07 f703 	mul.w	r7, r7, r3
  403ed0:	4297      	cmp	r7, r2
  403ed2:	d908      	bls.n	403ee6 <__udivdi3+0x86>
  403ed4:	1952      	adds	r2, r2, r5
  403ed6:	f103 31ff 	add.w	r1, r3, #4294967295
  403eda:	f080 80d8 	bcs.w	40408e <__udivdi3+0x22e>
  403ede:	4297      	cmp	r7, r2
  403ee0:	f240 80d5 	bls.w	40408e <__udivdi3+0x22e>
  403ee4:	3b02      	subs	r3, #2
  403ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403eea:	2600      	movs	r6, #0
  403eec:	4631      	mov	r1, r6
  403eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ef2:	428b      	cmp	r3, r1
  403ef4:	d847      	bhi.n	403f86 <__udivdi3+0x126>
  403ef6:	fab3 f683 	clz	r6, r3
  403efa:	2e00      	cmp	r6, #0
  403efc:	d148      	bne.n	403f90 <__udivdi3+0x130>
  403efe:	428b      	cmp	r3, r1
  403f00:	d302      	bcc.n	403f08 <__udivdi3+0xa8>
  403f02:	4282      	cmp	r2, r0
  403f04:	f200 80cd 	bhi.w	4040a2 <__udivdi3+0x242>
  403f08:	2001      	movs	r0, #1
  403f0a:	4631      	mov	r1, r6
  403f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f10:	b912      	cbnz	r2, 403f18 <__udivdi3+0xb8>
  403f12:	2501      	movs	r5, #1
  403f14:	fbb5 f5f2 	udiv	r5, r5, r2
  403f18:	fab5 f885 	clz	r8, r5
  403f1c:	f1b8 0f00 	cmp.w	r8, #0
  403f20:	d177      	bne.n	404012 <__udivdi3+0x1b2>
  403f22:	1b4a      	subs	r2, r1, r5
  403f24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  403f28:	b2af      	uxth	r7, r5
  403f2a:	2601      	movs	r6, #1
  403f2c:	fbb2 f0fe 	udiv	r0, r2, lr
  403f30:	0c23      	lsrs	r3, r4, #16
  403f32:	fb0e 2110 	mls	r1, lr, r0, r2
  403f36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  403f3a:	fb07 f300 	mul.w	r3, r7, r0
  403f3e:	428b      	cmp	r3, r1
  403f40:	d907      	bls.n	403f52 <__udivdi3+0xf2>
  403f42:	1949      	adds	r1, r1, r5
  403f44:	f100 32ff 	add.w	r2, r0, #4294967295
  403f48:	d202      	bcs.n	403f50 <__udivdi3+0xf0>
  403f4a:	428b      	cmp	r3, r1
  403f4c:	f200 80ba 	bhi.w	4040c4 <__udivdi3+0x264>
  403f50:	4610      	mov	r0, r2
  403f52:	1ac9      	subs	r1, r1, r3
  403f54:	b2a4      	uxth	r4, r4
  403f56:	fbb1 f3fe 	udiv	r3, r1, lr
  403f5a:	fb0e 1113 	mls	r1, lr, r3, r1
  403f5e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  403f62:	fb07 f703 	mul.w	r7, r7, r3
  403f66:	42a7      	cmp	r7, r4
  403f68:	d908      	bls.n	403f7c <__udivdi3+0x11c>
  403f6a:	1964      	adds	r4, r4, r5
  403f6c:	f103 32ff 	add.w	r2, r3, #4294967295
  403f70:	f080 808f 	bcs.w	404092 <__udivdi3+0x232>
  403f74:	42a7      	cmp	r7, r4
  403f76:	f240 808c 	bls.w	404092 <__udivdi3+0x232>
  403f7a:	3b02      	subs	r3, #2
  403f7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403f80:	4631      	mov	r1, r6
  403f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f86:	2600      	movs	r6, #0
  403f88:	4630      	mov	r0, r6
  403f8a:	4631      	mov	r1, r6
  403f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f90:	f1c6 0420 	rsb	r4, r6, #32
  403f94:	fa22 f504 	lsr.w	r5, r2, r4
  403f98:	40b3      	lsls	r3, r6
  403f9a:	432b      	orrs	r3, r5
  403f9c:	fa20 fc04 	lsr.w	ip, r0, r4
  403fa0:	fa01 f706 	lsl.w	r7, r1, r6
  403fa4:	fa21 f504 	lsr.w	r5, r1, r4
  403fa8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  403fac:	ea4c 0707 	orr.w	r7, ip, r7
  403fb0:	fbb5 f8fe 	udiv	r8, r5, lr
  403fb4:	0c39      	lsrs	r1, r7, #16
  403fb6:	fb0e 5518 	mls	r5, lr, r8, r5
  403fba:	fa1f fc83 	uxth.w	ip, r3
  403fbe:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  403fc2:	fb0c f108 	mul.w	r1, ip, r8
  403fc6:	42a9      	cmp	r1, r5
  403fc8:	fa02 f206 	lsl.w	r2, r2, r6
  403fcc:	d904      	bls.n	403fd8 <__udivdi3+0x178>
  403fce:	18ed      	adds	r5, r5, r3
  403fd0:	f108 34ff 	add.w	r4, r8, #4294967295
  403fd4:	d367      	bcc.n	4040a6 <__udivdi3+0x246>
  403fd6:	46a0      	mov	r8, r4
  403fd8:	1a6d      	subs	r5, r5, r1
  403fda:	b2bf      	uxth	r7, r7
  403fdc:	fbb5 f4fe 	udiv	r4, r5, lr
  403fe0:	fb0e 5514 	mls	r5, lr, r4, r5
  403fe4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
  403fe8:	fb0c fc04 	mul.w	ip, ip, r4
  403fec:	458c      	cmp	ip, r1
  403fee:	d904      	bls.n	403ffa <__udivdi3+0x19a>
  403ff0:	18c9      	adds	r1, r1, r3
  403ff2:	f104 35ff 	add.w	r5, r4, #4294967295
  403ff6:	d35c      	bcc.n	4040b2 <__udivdi3+0x252>
  403ff8:	462c      	mov	r4, r5
  403ffa:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  403ffe:	ebcc 0101 	rsb	r1, ip, r1
  404002:	fba4 2302 	umull	r2, r3, r4, r2
  404006:	4299      	cmp	r1, r3
  404008:	d348      	bcc.n	40409c <__udivdi3+0x23c>
  40400a:	d044      	beq.n	404096 <__udivdi3+0x236>
  40400c:	4620      	mov	r0, r4
  40400e:	2600      	movs	r6, #0
  404010:	e76c      	b.n	403eec <__udivdi3+0x8c>
  404012:	f1c8 0420 	rsb	r4, r8, #32
  404016:	fa01 f308 	lsl.w	r3, r1, r8
  40401a:	fa05 f508 	lsl.w	r5, r5, r8
  40401e:	fa20 f704 	lsr.w	r7, r0, r4
  404022:	40e1      	lsrs	r1, r4
  404024:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  404028:	431f      	orrs	r7, r3
  40402a:	fbb1 f6fe 	udiv	r6, r1, lr
  40402e:	0c3a      	lsrs	r2, r7, #16
  404030:	fb0e 1116 	mls	r1, lr, r6, r1
  404034:	fa1f fc85 	uxth.w	ip, r5
  404038:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  40403c:	fb0c f206 	mul.w	r2, ip, r6
  404040:	429a      	cmp	r2, r3
  404042:	fa00 f408 	lsl.w	r4, r0, r8
  404046:	d907      	bls.n	404058 <__udivdi3+0x1f8>
  404048:	195b      	adds	r3, r3, r5
  40404a:	f106 31ff 	add.w	r1, r6, #4294967295
  40404e:	d237      	bcs.n	4040c0 <__udivdi3+0x260>
  404050:	429a      	cmp	r2, r3
  404052:	d935      	bls.n	4040c0 <__udivdi3+0x260>
  404054:	3e02      	subs	r6, #2
  404056:	442b      	add	r3, r5
  404058:	1a9b      	subs	r3, r3, r2
  40405a:	b2bf      	uxth	r7, r7
  40405c:	fbb3 f0fe 	udiv	r0, r3, lr
  404060:	fb0e 3310 	mls	r3, lr, r0, r3
  404064:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  404068:	fb0c f100 	mul.w	r1, ip, r0
  40406c:	4299      	cmp	r1, r3
  40406e:	d907      	bls.n	404080 <__udivdi3+0x220>
  404070:	195b      	adds	r3, r3, r5
  404072:	f100 32ff 	add.w	r2, r0, #4294967295
  404076:	d221      	bcs.n	4040bc <__udivdi3+0x25c>
  404078:	4299      	cmp	r1, r3
  40407a:	d91f      	bls.n	4040bc <__udivdi3+0x25c>
  40407c:	3802      	subs	r0, #2
  40407e:	442b      	add	r3, r5
  404080:	1a5a      	subs	r2, r3, r1
  404082:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  404086:	4667      	mov	r7, ip
  404088:	e750      	b.n	403f2c <__udivdi3+0xcc>
  40408a:	4610      	mov	r0, r2
  40408c:	e716      	b.n	403ebc <__udivdi3+0x5c>
  40408e:	460b      	mov	r3, r1
  404090:	e729      	b.n	403ee6 <__udivdi3+0x86>
  404092:	4613      	mov	r3, r2
  404094:	e772      	b.n	403f7c <__udivdi3+0x11c>
  404096:	40b0      	lsls	r0, r6
  404098:	4290      	cmp	r0, r2
  40409a:	d2b7      	bcs.n	40400c <__udivdi3+0x1ac>
  40409c:	1e60      	subs	r0, r4, #1
  40409e:	2600      	movs	r6, #0
  4040a0:	e724      	b.n	403eec <__udivdi3+0x8c>
  4040a2:	4630      	mov	r0, r6
  4040a4:	e722      	b.n	403eec <__udivdi3+0x8c>
  4040a6:	42a9      	cmp	r1, r5
  4040a8:	d995      	bls.n	403fd6 <__udivdi3+0x176>
  4040aa:	f1a8 0802 	sub.w	r8, r8, #2
  4040ae:	441d      	add	r5, r3
  4040b0:	e792      	b.n	403fd8 <__udivdi3+0x178>
  4040b2:	458c      	cmp	ip, r1
  4040b4:	d9a0      	bls.n	403ff8 <__udivdi3+0x198>
  4040b6:	3c02      	subs	r4, #2
  4040b8:	4419      	add	r1, r3
  4040ba:	e79e      	b.n	403ffa <__udivdi3+0x19a>
  4040bc:	4610      	mov	r0, r2
  4040be:	e7df      	b.n	404080 <__udivdi3+0x220>
  4040c0:	460e      	mov	r6, r1
  4040c2:	e7c9      	b.n	404058 <__udivdi3+0x1f8>
  4040c4:	3802      	subs	r0, #2
  4040c6:	4429      	add	r1, r5
  4040c8:	e743      	b.n	403f52 <__udivdi3+0xf2>
  4040ca:	bf00      	nop
  4040cc:	00002032 	.word	0x00002032
  4040d0:	47202d2d 	.word	0x47202d2d
  4040d4:	69747465 	.word	0x69747465
  4040d8:	5320676e 	.word	0x5320676e
  4040dc:	74726174 	.word	0x74726174
  4040e0:	45206465 	.word	0x45206465
  4040e4:	706d6178 	.word	0x706d6178
  4040e8:	2d20656c 	.word	0x2d20656c
  4040ec:	2d0a0d2d 	.word	0x2d0a0d2d
  4040f0:	4153202d 	.word	0x4153202d
  4040f4:	2d53344d 	.word	0x2d53344d
  4040f8:	20324b45 	.word	0x20324b45
  4040fc:	0a0d2d2d 	.word	0x0a0d2d2d
  404100:	43202d2d 	.word	0x43202d2d
  404104:	69706d6f 	.word	0x69706d6f
  404108:	3a64656c 	.word	0x3a64656c
  40410c:	72614d20 	.word	0x72614d20
  404110:	20303120 	.word	0x20303120
  404114:	36313032 	.word	0x36313032
  404118:	3a313220 	.word	0x3a313220
  40411c:	353a3030 	.word	0x353a3030
  404120:	2d2d2034 	.word	0x2d2d2034
  404124:	0000000d 	.word	0x0000000d
  404128:	666e6f43 	.word	0x666e6f43
  40412c:	72756769 	.word	0x72756769
  404130:	79732065 	.word	0x79732065
  404134:	6d657473 	.word	0x6d657473
  404138:	63697420 	.word	0x63697420
  40413c:	6f74206b 	.word	0x6f74206b
  404140:	74656720 	.word	0x74656720
  404144:	736d3120 	.word	0x736d3120
  404148:	63697420 	.word	0x63697420
  40414c:	6570206b 	.word	0x6570206b
  404150:	646f6972 	.word	0x646f6972
  404154:	00000d2e 	.word	0x00000d2e
  404158:	666e6f43 	.word	0x666e6f43
  40415c:	72756769 	.word	0x72756769
  404160:	43542065 	.word	0x43542065
  404164:	00000d2e 	.word	0x00000d2e
  404168:	666e6f43 	.word	0x666e6f43
  40416c:	72756769 	.word	0x72756769
  404170:	75622065 	.word	0x75622065
  404174:	6e6f7474 	.word	0x6e6f7474
  404178:	69772073 	.word	0x69772073
  40417c:	64206874 	.word	0x64206874
  404180:	756f6265 	.word	0x756f6265
  404184:	6e69636e 	.word	0x6e69636e
  404188:	000d2e67 	.word	0x000d2e67
  40418c:	73657250 	.word	0x73657250
  404190:	73252073 	.word	0x73252073
  404194:	206f7420 	.word	0x206f7420
  404198:	72617453 	.word	0x72617453
  40419c:	74532f74 	.word	0x74532f74
  4041a0:	7420706f 	.word	0x7420706f
  4041a4:	25206568 	.word	0x25206568
  4041a8:	6c622073 	.word	0x6c622073
  4041ac:	696b6e69 	.word	0x696b6e69
  4041b0:	0d2e676e 	.word	0x0d2e676e
  4041b4:	0000000a 	.word	0x0000000a
  4041b8:	50525355 	.word	0x50525355
  4041bc:	00003142 	.word	0x00003142
  4041c0:	65756c62 	.word	0x65756c62
  4041c4:	44454c20 	.word	0x44454c20
  4041c8:	00324420 	.word	0x00324420
  4041cc:	50525355 	.word	0x50525355
  4041d0:	00003242 	.word	0x00003242
  4041d4:	65657267 	.word	0x65657267
  4041d8:	454c206e 	.word	0x454c206e
  4041dc:	33442044 	.word	0x33442044
  4041e0:	00000000 	.word	0x00000000
  4041e4:	00002031 	.word	0x00002031
  4041e8:	00000043 	.word	0x00000043

004041ec <_global_impure_ptr>:
  4041ec:	20000008                                ... 

004041f0 <zeroes.6869>:
  4041f0:	30303030 30303030 30303030 30303030     0000000000000000
  404200:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  404210:	00000000 33323130 37363534 62613938     ....0123456789ab
  404220:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404230 <blanks.6868>:
  404230:	20202020 20202020 20202020 20202020                     

00404240 <_init>:
  404240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404242:	bf00      	nop
  404244:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404246:	bc08      	pop	{r3}
  404248:	469e      	mov	lr, r3
  40424a:	4770      	bx	lr

0040424c <__init_array_start>:
  40424c:	0040214d 	.word	0x0040214d

00404250 <__frame_dummy_init_array_entry>:
  404250:	004000f1                                ..@.

00404254 <_fini>:
  404254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404256:	bf00      	nop
  404258:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40425a:	bc08      	pop	{r3}
  40425c:	469e      	mov	lr, r3
  40425e:	4770      	bx	lr

00404260 <__fini_array_start>:
  404260:	004000cd 	.word	0x004000cd
